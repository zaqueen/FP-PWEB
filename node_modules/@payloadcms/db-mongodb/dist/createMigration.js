/* eslint-disable no-restricted-syntax, no-await-in-loop */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createMigration", {
    enumerable: true,
    get: function() {
        return createMigration;
    }
});
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const migrationTemplate = (upSQL, downSQL)=>`import {
  MigrateUpArgs,
  MigrateDownArgs,
} from "@payloadcms/db-mongodb";

export async function up({ payload }: MigrateUpArgs): Promise<void> {
${upSQL ?? `  // Migration code`}
};

export async function down({ payload }: MigrateDownArgs): Promise<void> {
${downSQL ?? `  // Migration code`}
};
`;
const createMigration = async function createMigration({ file, migrationName, payload }) {
    const dir = payload.db.migrationDir;
    if (!_fs.default.existsSync(dir)) {
        _fs.default.mkdirSync(dir);
    }
    let migrationFileContent;
    // Check for predefined migration.
    // Either passed in via --file or prefixed with @payloadcms/db-mongodb/
    if (file || migrationName.startsWith('@payloadcms/db-mongodb/')) {
        if (!file) file = migrationName;
        const predefinedMigrationName = file.replace('@payloadcms/db-mongodb/', '');
        migrationName = predefinedMigrationName;
        const cleanPath = _path.default.join(__dirname, `../predefinedMigrations/${predefinedMigrationName}.js`);
        // Check if predefined migration exists
        if (_fs.default.existsSync(cleanPath)) {
            const { down, up } = require(cleanPath);
            migrationFileContent = migrationTemplate(up, down);
        } else {
            payload.logger.error({
                msg: `Canned migration ${predefinedMigrationName} not found.`
            });
            process.exit(1);
        }
    } else {
        migrationFileContent = migrationTemplate();
    }
    const [yyymmdd, hhmmss] = new Date().toISOString().split('T');
    const formattedDate = yyymmdd.replace(/\D/g, '');
    const formattedTime = hhmmss.split('.')[0].replace(/\D/g, '');
    const timestamp = `${formattedDate}_${formattedTime}`;
    const formattedName = migrationName.replace(/\W/g, '_');
    const fileName = `${timestamp}_${formattedName}.ts`;
    const filePath = `${dir}/${fileName}`;
    _fs.default.writeFileSync(filePath, migrationFileContent);
    payload.logger.info({
        msg: `Migration created at ${filePath}`
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVNaWdyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCB0eXBlIHsgQ3JlYXRlTWlncmF0aW9uIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuY29uc3QgbWlncmF0aW9uVGVtcGxhdGUgPSAodXBTUUw/OiBzdHJpbmcsIGRvd25TUUw/OiBzdHJpbmcpID0+IGBpbXBvcnQge1xuICBNaWdyYXRlVXBBcmdzLFxuICBNaWdyYXRlRG93bkFyZ3MsXG59IGZyb20gXCJAcGF5bG9hZGNtcy9kYi1tb25nb2RiXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cCh7IHBheWxvYWQgfTogTWlncmF0ZVVwQXJncyk6IFByb21pc2U8dm9pZD4ge1xuJHt1cFNRTCA/PyBgICAvLyBNaWdyYXRpb24gY29kZWB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bih7IHBheWxvYWQgfTogTWlncmF0ZURvd25BcmdzKTogUHJvbWlzZTx2b2lkPiB7XG4ke2Rvd25TUUwgPz8gYCAgLy8gTWlncmF0aW9uIGNvZGVgfVxufTtcbmBcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1pZ3JhdGlvbjogQ3JlYXRlTWlncmF0aW9uID0gYXN5bmMgZnVuY3Rpb24gY3JlYXRlTWlncmF0aW9uKHtcbiAgZmlsZSxcbiAgbWlncmF0aW9uTmFtZSxcbiAgcGF5bG9hZCxcbn0pIHtcbiAgY29uc3QgZGlyID0gcGF5bG9hZC5kYi5taWdyYXRpb25EaXJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZGlyKVxuICB9XG5cbiAgbGV0IG1pZ3JhdGlvbkZpbGVDb250ZW50OiBzdHJpbmcgfCB1bmRlZmluZWRcblxuICAvLyBDaGVjayBmb3IgcHJlZGVmaW5lZCBtaWdyYXRpb24uXG4gIC8vIEVpdGhlciBwYXNzZWQgaW4gdmlhIC0tZmlsZSBvciBwcmVmaXhlZCB3aXRoIEBwYXlsb2FkY21zL2RiLW1vbmdvZGIvXG4gIGlmIChmaWxlIHx8IG1pZ3JhdGlvbk5hbWUuc3RhcnRzV2l0aCgnQHBheWxvYWRjbXMvZGItbW9uZ29kYi8nKSkge1xuICAgIGlmICghZmlsZSkgZmlsZSA9IG1pZ3JhdGlvbk5hbWVcblxuICAgIGNvbnN0IHByZWRlZmluZWRNaWdyYXRpb25OYW1lID0gZmlsZS5yZXBsYWNlKCdAcGF5bG9hZGNtcy9kYi1tb25nb2RiLycsICcnKVxuICAgIG1pZ3JhdGlvbk5hbWUgPSBwcmVkZWZpbmVkTWlncmF0aW9uTmFtZVxuICAgIGNvbnN0IGNsZWFuUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIGAuLi9wcmVkZWZpbmVkTWlncmF0aW9ucy8ke3ByZWRlZmluZWRNaWdyYXRpb25OYW1lfS5qc2ApXG5cbiAgICAvLyBDaGVjayBpZiBwcmVkZWZpbmVkIG1pZ3JhdGlvbiBleGlzdHNcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhjbGVhblBhdGgpKSB7XG4gICAgICBjb25zdCB7IGRvd24sIHVwIH0gPSByZXF1aXJlKGNsZWFuUGF0aClcbiAgICAgIG1pZ3JhdGlvbkZpbGVDb250ZW50ID0gbWlncmF0aW9uVGVtcGxhdGUodXAsIGRvd24pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBheWxvYWQubG9nZ2VyLmVycm9yKHtcbiAgICAgICAgbXNnOiBgQ2FubmVkIG1pZ3JhdGlvbiAke3ByZWRlZmluZWRNaWdyYXRpb25OYW1lfSBub3QgZm91bmQuYCxcbiAgICAgIH0pXG4gICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWlncmF0aW9uRmlsZUNvbnRlbnQgPSBtaWdyYXRpb25UZW1wbGF0ZSgpXG4gIH1cblxuICBjb25zdCBbeXl5bW1kZCwgaGhtbXNzXSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpXG4gIGNvbnN0IGZvcm1hdHRlZERhdGUgPSB5eXltbWRkLnJlcGxhY2UoL1xcRC9nLCAnJylcbiAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGhobW1zcy5zcGxpdCgnLicpWzBdLnJlcGxhY2UoL1xcRC9nLCAnJylcblxuICBjb25zdCB0aW1lc3RhbXAgPSBgJHtmb3JtYXR0ZWREYXRlfV8ke2Zvcm1hdHRlZFRpbWV9YFxuXG4gIGNvbnN0IGZvcm1hdHRlZE5hbWUgPSBtaWdyYXRpb25OYW1lLnJlcGxhY2UoL1xcVy9nLCAnXycpXG4gIGNvbnN0IGZpbGVOYW1lID0gYCR7dGltZXN0YW1wfV8ke2Zvcm1hdHRlZE5hbWV9LnRzYFxuICBjb25zdCBmaWxlUGF0aCA9IGAke2Rpcn0vJHtmaWxlTmFtZX1gXG4gIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIG1pZ3JhdGlvbkZpbGVDb250ZW50KVxuICBwYXlsb2FkLmxvZ2dlci5pbmZvKHsgbXNnOiBgTWlncmF0aW9uIGNyZWF0ZWQgYXQgJHtmaWxlUGF0aH1gIH0pXG59XG4iXSwibmFtZXMiOlsiY3JlYXRlTWlncmF0aW9uIiwibWlncmF0aW9uVGVtcGxhdGUiLCJ1cFNRTCIsImRvd25TUUwiLCJmaWxlIiwibWlncmF0aW9uTmFtZSIsInBheWxvYWQiLCJkaXIiLCJkYiIsIm1pZ3JhdGlvbkRpciIsImZzIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsIm1pZ3JhdGlvbkZpbGVDb250ZW50Iiwic3RhcnRzV2l0aCIsInByZWRlZmluZWRNaWdyYXRpb25OYW1lIiwicmVwbGFjZSIsImNsZWFuUGF0aCIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwiZG93biIsInVwIiwicmVxdWlyZSIsImxvZ2dlciIsImVycm9yIiwibXNnIiwicHJvY2VzcyIsImV4aXQiLCJ5eXltbWRkIiwiaGhtbXNzIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJmb3JtYXR0ZWREYXRlIiwiZm9ybWF0dGVkVGltZSIsInRpbWVzdGFtcCIsImZvcm1hdHRlZE5hbWUiLCJmaWxlTmFtZSIsImZpbGVQYXRoIiwid3JpdGVGaWxlU3luYyIsImluZm8iXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDs7OzsrQkFvQjVDQTs7O2VBQUFBOzs7MkRBakJFOzZEQUNFOzs7Ozs7QUFFakIsTUFBTUMsb0JBQW9CLENBQUNDLE9BQWdCQyxVQUFxQixDQUFDOzs7Ozs7QUFNakUsRUFBRUQsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7QUFJakMsRUFBRUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O0FBRW5DLENBQUM7QUFFTSxNQUFNSCxrQkFBbUMsZUFBZUEsZ0JBQWdCLEVBQzdFSSxJQUFJLEVBQ0pDLGFBQWEsRUFDYkMsT0FBTyxFQUNSO0lBQ0MsTUFBTUMsTUFBTUQsUUFBUUUsRUFBRSxDQUFDQyxZQUFZO0lBQ25DLElBQUksQ0FBQ0MsV0FBRSxDQUFDQyxVQUFVLENBQUNKLE1BQU07UUFDdkJHLFdBQUUsQ0FBQ0UsU0FBUyxDQUFDTDtJQUNmO0lBRUEsSUFBSU07SUFFSixrQ0FBa0M7SUFDbEMsdUVBQXVFO0lBQ3ZFLElBQUlULFFBQVFDLGNBQWNTLFVBQVUsQ0FBQyw0QkFBNEI7UUFDL0QsSUFBSSxDQUFDVixNQUFNQSxPQUFPQztRQUVsQixNQUFNVSwwQkFBMEJYLEtBQUtZLE9BQU8sQ0FBQywyQkFBMkI7UUFDeEVYLGdCQUFnQlU7UUFDaEIsTUFBTUUsWUFBWUMsYUFBSSxDQUFDQyxJQUFJLENBQUNDLFdBQVcsQ0FBQyx3QkFBd0IsRUFBRUwsd0JBQXdCLEdBQUcsQ0FBQztRQUU5Rix1Q0FBdUM7UUFDdkMsSUFBSUwsV0FBRSxDQUFDQyxVQUFVLENBQUNNLFlBQVk7WUFDNUIsTUFBTSxFQUFFSSxJQUFJLEVBQUVDLEVBQUUsRUFBRSxHQUFHQyxRQUFRTjtZQUM3QkosdUJBQXVCWixrQkFBa0JxQixJQUFJRDtRQUMvQyxPQUFPO1lBQ0xmLFFBQVFrQixNQUFNLENBQUNDLEtBQUssQ0FBQztnQkFDbkJDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRVgsd0JBQXdCLFdBQVcsQ0FBQztZQUMvRDtZQUNBWSxRQUFRQyxJQUFJLENBQUM7UUFDZjtJQUNGLE9BQU87UUFDTGYsdUJBQXVCWjtJQUN6QjtJQUVBLE1BQU0sQ0FBQzRCLFNBQVNDLE9BQU8sR0FBRyxJQUFJQyxPQUFPQyxXQUFXLEdBQUdDLEtBQUssQ0FBQztJQUN6RCxNQUFNQyxnQkFBZ0JMLFFBQVFiLE9BQU8sQ0FBQyxPQUFPO0lBQzdDLE1BQU1tQixnQkFBZ0JMLE9BQU9HLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDakIsT0FBTyxDQUFDLE9BQU87SUFFMUQsTUFBTW9CLFlBQVksQ0FBQyxFQUFFRixjQUFjLENBQUMsRUFBRUMsY0FBYyxDQUFDO0lBRXJELE1BQU1FLGdCQUFnQmhDLGNBQWNXLE9BQU8sQ0FBQyxPQUFPO0lBQ25ELE1BQU1zQixXQUFXLENBQUMsRUFBRUYsVUFBVSxDQUFDLEVBQUVDLGNBQWMsR0FBRyxDQUFDO0lBQ25ELE1BQU1FLFdBQVcsQ0FBQyxFQUFFaEMsSUFBSSxDQUFDLEVBQUUrQixTQUFTLENBQUM7SUFDckM1QixXQUFFLENBQUM4QixhQUFhLENBQUNELFVBQVUxQjtJQUMzQlAsUUFBUWtCLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQztRQUFFZixLQUFLLENBQUMscUJBQXFCLEVBQUVhLFNBQVMsQ0FBQztJQUFDO0FBQ2hFIn0=