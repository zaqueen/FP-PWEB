"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "create", {
    enumerable: true,
    get: function() {
        return create;
    }
});
const _withSession = require("./withSession");
const _errors = require("payload/errors");
const _utilities = require("payload/utilities");
const create = async function create({ collection, data, req = {} }) {
    const Model = this.collections[collection];
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let doc;
    try {
        [doc] = await Model.create([
            data
        ], options);
    } catch (error) {
        // Handle uniqueness error from MongoDB
        throw error.code === 11000 && error.keyValue ? new _errors.ValidationError([
            {
                field: Object.keys(error.keyValue)[0],
                message: req.t('error:valueMustBeUnique')
            }
        ], req?.t ?? (0, _utilities.i18nInit)(this.payload.config.i18n).t) : error;
    }
    // doc.toJSON does not do stuff like converting ObjectIds to string, or date strings to date objects. That's why we use JSON.parse/stringify here
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDcmVhdGUgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCwgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ3BheWxvYWQvZXJyb3JzJ1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZTogQ3JlYXRlID0gYXN5bmMgZnVuY3Rpb24gY3JlYXRlKFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHsgY29sbGVjdGlvbiwgZGF0YSwgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QgfSxcbikge1xuICBjb25zdCBNb2RlbCA9IHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl1cbiAgY29uc3Qgb3B0aW9ucyA9IHdpdGhTZXNzaW9uKHRoaXMsIHJlcS50cmFuc2FjdGlvbklEKVxuICBsZXQgZG9jXG4gIHRyeSB7XG4gICAgO1tkb2NdID0gYXdhaXQgTW9kZWwuY3JlYXRlKFtkYXRhXSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBIYW5kbGUgdW5pcXVlbmVzcyBlcnJvciBmcm9tIE1vbmdvREJcbiAgICB0aHJvdyBlcnJvci5jb2RlID09PSAxMTAwMCAmJiBlcnJvci5rZXlWYWx1ZVxuICAgICAgPyBuZXcgVmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmllbGQ6IE9iamVjdC5rZXlzKGVycm9yLmtleVZhbHVlKVswXSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogcmVxLnQoJ2Vycm9yOnZhbHVlTXVzdEJlVW5pcXVlJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgcmVxPy50ID8/IGkxOG5Jbml0KHRoaXMucGF5bG9hZC5jb25maWcuaTE4bikudCxcbiAgICAgICAgKVxuICAgICAgOiBlcnJvclxuICB9XG5cbiAgLy8gZG9jLnRvSlNPTiBkb2VzIG5vdCBkbyBzdHVmZiBsaWtlIGNvbnZlcnRpbmcgT2JqZWN0SWRzIHRvIHN0cmluZywgb3IgZGF0ZSBzdHJpbmdzIHRvIGRhdGUgb2JqZWN0cy4gVGhhdCdzIHdoeSB3ZSB1c2UgSlNPTi5wYXJzZS9zdHJpbmdpZnkgaGVyZVxuICBjb25zdCByZXN1bHQ6IERvY3VtZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkb2MpKVxuICBjb25zdCB2ZXJpZmljYXRpb25Ub2tlbiA9IGRvYy5fdmVyaWZpY2F0aW9uVG9rZW5cblxuICAvLyBjdXN0b20gaWQgdHlwZSByZXNldFxuICByZXN1bHQuaWQgPSByZXN1bHQuX2lkXG4gIGlmICh2ZXJpZmljYXRpb25Ub2tlbikge1xuICAgIHJlc3VsdC5fdmVyaWZpY2F0aW9uVG9rZW4gPSB2ZXJpZmljYXRpb25Ub2tlblxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsImNvbGxlY3Rpb24iLCJkYXRhIiwicmVxIiwiTW9kZWwiLCJjb2xsZWN0aW9ucyIsIm9wdGlvbnMiLCJ3aXRoU2Vzc2lvbiIsInRyYW5zYWN0aW9uSUQiLCJkb2MiLCJlcnJvciIsImNvZGUiLCJrZXlWYWx1ZSIsIlZhbGlkYXRpb25FcnJvciIsImZpZWxkIiwiT2JqZWN0Iiwia2V5cyIsIm1lc3NhZ2UiLCJ0IiwiaTE4bkluaXQiLCJwYXlsb2FkIiwiY29uZmlnIiwiaTE4biIsInJlc3VsdCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInZlcmlmaWNhdGlvblRva2VuIiwiX3ZlcmlmaWNhdGlvblRva2VuIiwiaWQiLCJfaWQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBU2FBOzs7ZUFBQUE7Ozs2QkFKZTt3QkFDSTsyQkFDUDtBQUVsQixNQUFNQSxTQUFpQixlQUFlQSxPQUUzQyxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsTUFBTSxDQUFDLENBQW1CLEVBQUU7SUFFaEQsTUFBTUMsUUFBUSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0osV0FBVztJQUMxQyxNQUFNSyxVQUFVQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRUosSUFBSUssYUFBYTtJQUNuRCxJQUFJQztJQUNKLElBQUk7UUFDRCxDQUFDQSxJQUFJLEdBQUcsTUFBTUwsTUFBTUosTUFBTSxDQUFDO1lBQUNFO1NBQUssRUFBRUk7SUFDdEMsRUFBRSxPQUFPSSxPQUFPO1FBQ2QsdUNBQXVDO1FBQ3ZDLE1BQU1BLE1BQU1DLElBQUksS0FBSyxTQUFTRCxNQUFNRSxRQUFRLEdBQ3hDLElBQUlDLHVCQUFlLENBQ2pCO1lBQ0U7Z0JBQ0VDLE9BQU9DLE9BQU9DLElBQUksQ0FBQ04sTUFBTUUsUUFBUSxDQUFDLENBQUMsRUFBRTtnQkFDckNLLFNBQVNkLElBQUllLENBQUMsQ0FBQztZQUNqQjtTQUNELEVBQ0RmLEtBQUtlLEtBQUtDLElBQUFBLG1CQUFRLEVBQUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFSixDQUFDLElBRWhEUjtJQUNOO0lBRUEsaUpBQWlKO0lBQ2pKLE1BQU1hLFNBQW1CQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ2pCO0lBQ25ELE1BQU1rQixvQkFBb0JsQixJQUFJbUIsa0JBQWtCO0lBRWhELHVCQUF1QjtJQUN2QkwsT0FBT00sRUFBRSxHQUFHTixPQUFPTyxHQUFHO0lBQ3RCLElBQUlILG1CQUFtQjtRQUNyQkosT0FBT0ssa0JBQWtCLEdBQUdEO0lBQzlCO0lBRUEsT0FBT0o7QUFDVCJ9