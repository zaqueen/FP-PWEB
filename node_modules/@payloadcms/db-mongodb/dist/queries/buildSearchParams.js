"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildSearchParam", {
    enumerable: true,
    get: function() {
        return buildSearchParam;
    }
});
const _bsonobjectid = /*#__PURE__*/ _interop_require_default(require("bson-objectid"));
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
const _database = require("payload/database");
const _types = require("payload/types");
const _operatorMap = require("./operatorMap");
const _sanitizeQueryValue = require("./sanitizeQueryValue");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const subQueryOptions = {
    lean: true,
    limit: 50
};
async function buildSearchParam({ collectionSlug, fields, globalSlug, incomingPath, locale, operator, payload, val }) {
    // Replace GraphQL nested field double underscore formatting
    let sanitizedPath = incomingPath.replace(/__/g, '.');
    if (sanitizedPath === 'id') sanitizedPath = '_id';
    let paths = [];
    let hasCustomID = false;
    if (sanitizedPath === '_id') {
        const customIDfield = payload.collections[collectionSlug]?.config.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
        let idFieldType = 'text';
        if (customIDfield) {
            if (customIDfield?.type === 'text' || customIDfield?.type === 'number') {
                idFieldType = customIDfield.type;
            }
            hasCustomID = true;
        }
        paths.push({
            collectionSlug,
            complete: true,
            field: {
                name: 'id',
                type: idFieldType
            },
            path: '_id'
        });
    } else {
        paths = await (0, _database.getLocalizedPaths)({
            collectionSlug,
            fields,
            globalSlug,
            incomingPath: sanitizedPath,
            locale,
            payload
        });
    }
    const [{ field, path }] = paths;
    if (path) {
        const formattedValue = (0, _sanitizeQueryValue.sanitizeQueryValue)({
            field,
            hasCustomID,
            operator,
            path,
            val
        });
        // If there are multiple collections to search through,
        // Recursively build up a list of query constraints
        if (paths.length > 1) {
            // Remove top collection and reverse array
            // to work backwards from top
            const pathsToQuery = paths.slice(1).reverse();
            const initialRelationshipQuery = {
                value: {}
            };
            const relationshipQuery = await pathsToQuery.reduce(async (priorQuery, { collectionSlug: slug, path: subPath }, i)=>{
                const priorQueryResult = await priorQuery;
                const SubModel = payload.db.collections[slug];
                // On the "deepest" collection,
                // Search on the value passed through the query
                if (i === 0) {
                    const subQuery = await SubModel.buildQuery({
                        locale,
                        payload,
                        where: {
                            [subPath]: {
                                [operator]: val
                            }
                        }
                    });
                    const result = await SubModel.find(subQuery, subQueryOptions);
                    const $in = [];
                    result.forEach((doc)=>{
                        const stringID = doc._id.toString();
                        $in.push(stringID);
                        if (_mongoose.default.Types.ObjectId.isValid(stringID)) {
                            $in.push(doc._id);
                        }
                    });
                    if (pathsToQuery.length === 1) {
                        return {
                            path,
                            value: {
                                $in
                            }
                        };
                    }
                    const nextSubPath = pathsToQuery[i + 1].path;
                    return {
                        value: {
                            [nextSubPath]: {
                                $in
                            }
                        }
                    };
                }
                const subQuery = priorQueryResult.value;
                const result = await SubModel.find(subQuery, subQueryOptions);
                const $in = result.map((doc)=>doc._id.toString());
                // If it is the last recursion
                // then pass through the search param
                if (i + 1 === pathsToQuery.length) {
                    return {
                        path,
                        value: {
                            $in
                        }
                    };
                }
                return {
                    value: {
                        _id: {
                            $in
                        }
                    }
                };
            }, Promise.resolve(initialRelationshipQuery));
            return relationshipQuery;
        }
        if (operator && _types.validOperators.includes(operator)) {
            const operatorKey = _operatorMap.operatorMap[operator];
            if (field.type === 'relationship' || field.type === 'upload') {
                let hasNumberIDRelation;
                const result = {
                    value: {
                        $or: [
                            {
                                [path]: {
                                    [operatorKey]: formattedValue
                                }
                            }
                        ]
                    }
                };
                if (typeof formattedValue === 'string') {
                    if (_mongoose.default.Types.ObjectId.isValid(formattedValue)) {
                        result.value.$or.push({
                            [path]: {
                                [operatorKey]: (0, _bsonobjectid.default)(formattedValue)
                            }
                        });
                    } else {
                        (Array.isArray(field.relationTo) ? field.relationTo : [
                            field.relationTo
                        ]).forEach((relationTo)=>{
                            const isRelatedToCustomNumberID = payload.collections[relationTo]?.config?.fields.find((relatedField)=>{
                                return (0, _types.fieldAffectsData)(relatedField) && relatedField.name === 'id' && relatedField.type === 'number';
                            });
                            if (isRelatedToCustomNumberID) {
                                if (isRelatedToCustomNumberID.type === 'number') hasNumberIDRelation = true;
                            }
                        });
                        if (hasNumberIDRelation) result.value.$or.push({
                            [path]: {
                                [operatorKey]: parseFloat(formattedValue)
                            }
                        });
                    }
                }
                if (result.value.$or.length > 1) {
                    return result;
                }
            }
            if (operator === 'like' && typeof formattedValue === 'string') {
                const words = formattedValue.split(' ');
                const result = {
                    value: {
                        $and: words.map((word)=>({
                                [path]: {
                                    $options: 'i',
                                    $regex: word.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&')
                                }
                            }))
                    }
                };
                return result;
            }
            // Some operators like 'near' need to define a full query
            // so if there is no operator key, just return the value
            if (!operatorKey) {
                return {
                    path,
                    value: formattedValue
                };
            }
            return {
                path,
                value: {
                    [operatorKey]: formattedValue
                }
            };
        }
    }
    return undefined;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2J1aWxkU2VhcmNoUGFyYW1zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJ3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IFBhdGhUb1F1ZXJ5IH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcbmltcG9ydCB0eXBlIHsgRmllbGQgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBPcGVyYXRvciB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCBvYmplY3RJRCBmcm9tICdic29uLW9iamVjdGlkJ1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IHsgZ2V0TG9jYWxpemVkUGF0aHMgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHsgZmllbGRBZmZlY3RzRGF0YSB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5pbXBvcnQgeyB2YWxpZE9wZXJhdG9ycyB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB0eXBlIHsgTW9uZ29vc2VBZGFwdGVyIH0gZnJvbSAnLi4nXG5cbmltcG9ydCB7IG9wZXJhdG9yTWFwIH0gZnJvbSAnLi9vcGVyYXRvck1hcCdcbmltcG9ydCB7IHNhbml0aXplUXVlcnlWYWx1ZSB9IGZyb20gJy4vc2FuaXRpemVRdWVyeVZhbHVlJ1xuXG50eXBlIFNlYXJjaFBhcmFtID0ge1xuICBwYXRoPzogc3RyaW5nXG4gIHZhbHVlOiB1bmtub3duXG59XG5cbmNvbnN0IHN1YlF1ZXJ5T3B0aW9ucyA9IHtcbiAgbGVhbjogdHJ1ZSxcbiAgbGltaXQ6IDUwLFxufVxuXG4vKipcbiAqIENvbnZlcnQgdGhlIFBheWxvYWQga2V5IC8gdmFsdWUgLyBvcGVyYXRvciBpbnRvIGEgTW9uZ29EQiBxdWVyeVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRTZWFyY2hQYXJhbSh7XG4gIGNvbGxlY3Rpb25TbHVnLFxuICBmaWVsZHMsXG4gIGdsb2JhbFNsdWcsXG4gIGluY29taW5nUGF0aCxcbiAgbG9jYWxlLFxuICBvcGVyYXRvcixcbiAgcGF5bG9hZCxcbiAgdmFsLFxufToge1xuICBjb2xsZWN0aW9uU2x1Zz86IHN0cmluZ1xuICBmaWVsZHM6IEZpZWxkW11cbiAgZ2xvYmFsU2x1Zz86IHN0cmluZ1xuICBpbmNvbWluZ1BhdGg6IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3BlcmF0b3I6IHN0cmluZ1xuICBwYXlsb2FkOiBQYXlsb2FkXG4gIHZhbDogdW5rbm93blxufSk6IFByb21pc2U8U2VhcmNoUGFyYW0+IHtcbiAgLy8gUmVwbGFjZSBHcmFwaFFMIG5lc3RlZCBmaWVsZCBkb3VibGUgdW5kZXJzY29yZSBmb3JtYXR0aW5nXG4gIGxldCBzYW5pdGl6ZWRQYXRoID0gaW5jb21pbmdQYXRoLnJlcGxhY2UoL19fL2csICcuJylcbiAgaWYgKHNhbml0aXplZFBhdGggPT09ICdpZCcpIHNhbml0aXplZFBhdGggPSAnX2lkJ1xuXG4gIGxldCBwYXRoczogUGF0aFRvUXVlcnlbXSA9IFtdXG5cbiAgbGV0IGhhc0N1c3RvbUlEID0gZmFsc2VcblxuICBpZiAoc2FuaXRpemVkUGF0aCA9PT0gJ19pZCcpIHtcbiAgICBjb25zdCBjdXN0b21JRGZpZWxkID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z10/LmNvbmZpZy5maWVsZHMuZmluZChcbiAgICAgIChmaWVsZCkgPT4gZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgZmllbGQubmFtZSA9PT0gJ2lkJyxcbiAgICApXG5cbiAgICBsZXQgaWRGaWVsZFR5cGU6ICdudW1iZXInIHwgJ3RleHQnID0gJ3RleHQnXG5cbiAgICBpZiAoY3VzdG9tSURmaWVsZCkge1xuICAgICAgaWYgKGN1c3RvbUlEZmllbGQ/LnR5cGUgPT09ICd0ZXh0JyB8fCBjdXN0b21JRGZpZWxkPy50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZEZpZWxkVHlwZSA9IGN1c3RvbUlEZmllbGQudHlwZVxuICAgICAgfVxuXG4gICAgICBoYXNDdXN0b21JRCA9IHRydWVcbiAgICB9XG5cbiAgICBwYXRocy5wdXNoKHtcbiAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgY29tcGxldGU6IHRydWUsXG4gICAgICBmaWVsZDoge1xuICAgICAgICBuYW1lOiAnaWQnLFxuICAgICAgICB0eXBlOiBpZEZpZWxkVHlwZSxcbiAgICAgIH0gYXMgRmllbGQsXG4gICAgICBwYXRoOiAnX2lkJyxcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHBhdGhzID0gYXdhaXQgZ2V0TG9jYWxpemVkUGF0aHMoe1xuICAgICAgY29sbGVjdGlvblNsdWcsXG4gICAgICBmaWVsZHMsXG4gICAgICBnbG9iYWxTbHVnLFxuICAgICAgaW5jb21pbmdQYXRoOiBzYW5pdGl6ZWRQYXRoLFxuICAgICAgbG9jYWxlLFxuICAgICAgcGF5bG9hZCxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgW3sgZmllbGQsIHBhdGggfV0gPSBwYXRoc1xuXG4gIGlmIChwYXRoKSB7XG4gICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBzYW5pdGl6ZVF1ZXJ5VmFsdWUoe1xuICAgICAgZmllbGQsXG4gICAgICBoYXNDdXN0b21JRCxcbiAgICAgIG9wZXJhdG9yLFxuICAgICAgcGF0aCxcbiAgICAgIHZhbCxcbiAgICB9KVxuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvbGxlY3Rpb25zIHRvIHNlYXJjaCB0aHJvdWdoLFxuICAgIC8vIFJlY3Vyc2l2ZWx5IGJ1aWxkIHVwIGEgbGlzdCBvZiBxdWVyeSBjb25zdHJhaW50c1xuICAgIGlmIChwYXRocy5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBSZW1vdmUgdG9wIGNvbGxlY3Rpb24gYW5kIHJldmVyc2UgYXJyYXlcbiAgICAgIC8vIHRvIHdvcmsgYmFja3dhcmRzIGZyb20gdG9wXG4gICAgICBjb25zdCBwYXRoc1RvUXVlcnkgPSBwYXRocy5zbGljZSgxKS5yZXZlcnNlKClcblxuICAgICAgY29uc3QgaW5pdGlhbFJlbGF0aW9uc2hpcFF1ZXJ5ID0ge1xuICAgICAgICB2YWx1ZToge30sXG4gICAgICB9IGFzIFNlYXJjaFBhcmFtXG5cbiAgICAgIGNvbnN0IHJlbGF0aW9uc2hpcFF1ZXJ5ID0gYXdhaXQgcGF0aHNUb1F1ZXJ5LnJlZHVjZShcbiAgICAgICAgYXN5bmMgKHByaW9yUXVlcnksIHsgY29sbGVjdGlvblNsdWc6IHNsdWcsIHBhdGg6IHN1YlBhdGggfSwgaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByaW9yUXVlcnlSZXN1bHQgPSBhd2FpdCBwcmlvclF1ZXJ5XG5cbiAgICAgICAgICBjb25zdCBTdWJNb2RlbCA9IChwYXlsb2FkLmRiIGFzIE1vbmdvb3NlQWRhcHRlcikuY29sbGVjdGlvbnNbc2x1Z11cblxuICAgICAgICAgIC8vIE9uIHRoZSBcImRlZXBlc3RcIiBjb2xsZWN0aW9uLFxuICAgICAgICAgIC8vIFNlYXJjaCBvbiB0aGUgdmFsdWUgcGFzc2VkIHRocm91Z2ggdGhlIHF1ZXJ5XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YlF1ZXJ5ID0gYXdhaXQgU3ViTW9kZWwuYnVpbGRRdWVyeSh7XG4gICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICBbc3ViUGF0aF06IHtcbiAgICAgICAgICAgICAgICAgIFtvcGVyYXRvcl06IHZhbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgU3ViTW9kZWwuZmluZChzdWJRdWVyeSwgc3ViUXVlcnlPcHRpb25zKVxuXG4gICAgICAgICAgICBjb25zdCAkaW46IHVua25vd25bXSA9IFtdXG5cbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nSUQgPSBkb2MuX2lkLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgJGluLnB1c2goc3RyaW5nSUQpXG5cbiAgICAgICAgICAgICAgaWYgKG1vbmdvb3NlLlR5cGVzLk9iamVjdElkLmlzVmFsaWQoc3RyaW5nSUQpKSB7XG4gICAgICAgICAgICAgICAgJGluLnB1c2goZG9jLl9pZClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYgKHBhdGhzVG9RdWVyeS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7ICRpbiB9LFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5leHRTdWJQYXRoID0gcGF0aHNUb1F1ZXJ5W2kgKyAxXS5wYXRoXG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiB7IFtuZXh0U3ViUGF0aF06IHsgJGluIH0gfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdWJRdWVyeSA9IHByaW9yUXVlcnlSZXN1bHQudmFsdWVcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBTdWJNb2RlbC5maW5kKHN1YlF1ZXJ5LCBzdWJRdWVyeU9wdGlvbnMpXG5cbiAgICAgICAgICBjb25zdCAkaW4gPSByZXN1bHQubWFwKChkb2MpID0+IGRvYy5faWQudG9TdHJpbmcoKSlcblxuICAgICAgICAgIC8vIElmIGl0IGlzIHRoZSBsYXN0IHJlY3Vyc2lvblxuICAgICAgICAgIC8vIHRoZW4gcGFzcyB0aHJvdWdoIHRoZSBzZWFyY2ggcGFyYW1cbiAgICAgICAgICBpZiAoaSArIDEgPT09IHBhdGhzVG9RdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgIHZhbHVlOiB7ICRpbiB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICBfaWQ6IHsgJGluIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGluaXRpYWxSZWxhdGlvbnNoaXBRdWVyeSksXG4gICAgICApXG5cbiAgICAgIHJldHVybiByZWxhdGlvbnNoaXBRdWVyeVxuICAgIH1cblxuICAgIGlmIChvcGVyYXRvciAmJiB2YWxpZE9wZXJhdG9ycy5pbmNsdWRlcyhvcGVyYXRvciBhcyBPcGVyYXRvcikpIHtcbiAgICAgIGNvbnN0IG9wZXJhdG9yS2V5ID0gb3BlcmF0b3JNYXBbb3BlcmF0b3JdXG5cbiAgICAgIGlmIChmaWVsZC50eXBlID09PSAncmVsYXRpb25zaGlwJyB8fCBmaWVsZC50eXBlID09PSAndXBsb2FkJykge1xuICAgICAgICBsZXQgaGFzTnVtYmVySURSZWxhdGlvblxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgJG9yOiBbeyBbcGF0aF06IHsgW29wZXJhdG9yS2V5XTogZm9ybWF0dGVkVmFsdWUgfSB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAobW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQuaXNWYWxpZChmb3JtYXR0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZS4kb3IucHVzaCh7IFtwYXRoXTogeyBbb3BlcmF0b3JLZXldOiBvYmplY3RJRChmb3JtYXR0ZWRWYWx1ZSkgfSB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICA7KEFycmF5LmlzQXJyYXkoZmllbGQucmVsYXRpb25UbykgPyBmaWVsZC5yZWxhdGlvblRvIDogW2ZpZWxkLnJlbGF0aW9uVG9dKS5mb3JFYWNoKFxuICAgICAgICAgICAgICAocmVsYXRpb25UbykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmVsYXRlZFRvQ3VzdG9tTnVtYmVySUQgPSBwYXlsb2FkLmNvbGxlY3Rpb25zW1xuICAgICAgICAgICAgICAgICAgcmVsYXRpb25Ub1xuICAgICAgICAgICAgICAgIF0/LmNvbmZpZz8uZmllbGRzLmZpbmQoKHJlbGF0ZWRGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZmllbGRBZmZlY3RzRGF0YShyZWxhdGVkRmllbGQpICYmXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRGaWVsZC5uYW1lID09PSAnaWQnICYmXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRGaWVsZC50eXBlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGVkVG9DdXN0b21OdW1iZXJJRCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRlZFRvQ3VzdG9tTnVtYmVySUQudHlwZSA9PT0gJ251bWJlcicpIGhhc051bWJlcklEUmVsYXRpb24gPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiAoaGFzTnVtYmVySURSZWxhdGlvbilcbiAgICAgICAgICAgICAgcmVzdWx0LnZhbHVlLiRvci5wdXNoKHsgW3BhdGhdOiB7IFtvcGVyYXRvcktleV06IHBhcnNlRmxvYXQoZm9ybWF0dGVkVmFsdWUpIH0gfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzdWx0LnZhbHVlLiRvci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2xpa2UnICYmIHR5cGVvZiBmb3JtYXR0ZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSBmb3JtYXR0ZWRWYWx1ZS5zcGxpdCgnICcpXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAkYW5kOiB3b3Jkcy5tYXAoKHdvcmQpID0+ICh7XG4gICAgICAgICAgICAgIFtwYXRoXToge1xuICAgICAgICAgICAgICAgICRvcHRpb25zOiAnaScsXG4gICAgICAgICAgICAgICAgJHJlZ2V4OiB3b3JkLnJlcGxhY2UoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgLy8gU29tZSBvcGVyYXRvcnMgbGlrZSAnbmVhcicgbmVlZCB0byBkZWZpbmUgYSBmdWxsIHF1ZXJ5XG4gICAgICAvLyBzbyBpZiB0aGVyZSBpcyBubyBvcGVyYXRvciBrZXksIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZVxuICAgICAgaWYgKCFvcGVyYXRvcktleSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWU6IGZvcm1hdHRlZFZhbHVlLFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHZhbHVlOiB7IFtvcGVyYXRvcktleV06IGZvcm1hdHRlZFZhbHVlIH0sXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn1cbiJdLCJuYW1lcyI6WyJidWlsZFNlYXJjaFBhcmFtIiwic3ViUXVlcnlPcHRpb25zIiwibGVhbiIsImxpbWl0IiwiY29sbGVjdGlvblNsdWciLCJmaWVsZHMiLCJnbG9iYWxTbHVnIiwiaW5jb21pbmdQYXRoIiwibG9jYWxlIiwib3BlcmF0b3IiLCJwYXlsb2FkIiwidmFsIiwic2FuaXRpemVkUGF0aCIsInJlcGxhY2UiLCJwYXRocyIsImhhc0N1c3RvbUlEIiwiY3VzdG9tSURmaWVsZCIsImNvbGxlY3Rpb25zIiwiY29uZmlnIiwiZmluZCIsImZpZWxkIiwiZmllbGRBZmZlY3RzRGF0YSIsIm5hbWUiLCJpZEZpZWxkVHlwZSIsInR5cGUiLCJwdXNoIiwiY29tcGxldGUiLCJwYXRoIiwiZ2V0TG9jYWxpemVkUGF0aHMiLCJmb3JtYXR0ZWRWYWx1ZSIsInNhbml0aXplUXVlcnlWYWx1ZSIsImxlbmd0aCIsInBhdGhzVG9RdWVyeSIsInNsaWNlIiwicmV2ZXJzZSIsImluaXRpYWxSZWxhdGlvbnNoaXBRdWVyeSIsInZhbHVlIiwicmVsYXRpb25zaGlwUXVlcnkiLCJyZWR1Y2UiLCJwcmlvclF1ZXJ5Iiwic2x1ZyIsInN1YlBhdGgiLCJpIiwicHJpb3JRdWVyeVJlc3VsdCIsIlN1Yk1vZGVsIiwiZGIiLCJzdWJRdWVyeSIsImJ1aWxkUXVlcnkiLCJ3aGVyZSIsInJlc3VsdCIsIiRpbiIsImZvckVhY2giLCJkb2MiLCJzdHJpbmdJRCIsIl9pZCIsInRvU3RyaW5nIiwibW9uZ29vc2UiLCJUeXBlcyIsIk9iamVjdElkIiwiaXNWYWxpZCIsIm5leHRTdWJQYXRoIiwibWFwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2YWxpZE9wZXJhdG9ycyIsImluY2x1ZGVzIiwib3BlcmF0b3JLZXkiLCJvcGVyYXRvck1hcCIsImhhc051bWJlcklEUmVsYXRpb24iLCIkb3IiLCJvYmplY3RJRCIsIkFycmF5IiwiaXNBcnJheSIsInJlbGF0aW9uVG8iLCJpc1JlbGF0ZWRUb0N1c3RvbU51bWJlcklEIiwicmVsYXRlZEZpZWxkIiwicGFyc2VGbG9h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