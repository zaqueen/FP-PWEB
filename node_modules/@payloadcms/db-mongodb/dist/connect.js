/* eslint-disable @typescript-eslint/no-var-requires */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "connect", {
    enumerable: true,
    get: function() {
        return connect;
    }
});
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const connect = async function connect(payload) {
    if (this.url === false) {
        return;
    }
    if (!payload.local && typeof this.url !== 'string') {
        throw new Error('Error: missing MongoDB connection URL.');
    }
    let urlToConnect = this.url;
    let successfulConnectionMessage = 'Connected to MongoDB server successfully!';
    const connectionOptions = {
        autoIndex: true,
        ...this.connectOptions,
        useFacet: undefined
    };
    if (process.env.NODE_ENV === 'test') {
        if (process.env.PAYLOAD_TEST_MONGO_URL) {
            urlToConnect = process.env.PAYLOAD_TEST_MONGO_URL;
        } else {
            connectionOptions.dbName = 'payloadmemory';
            const { MongoMemoryServer } = require('mongodb-memory-server');
            const getPort = require('get-port');
            const port = await getPort();
            this.mongoMemoryServer = await MongoMemoryServer.create({
                instance: {
                    dbName: 'payloadmemory',
                    port
                }
            });
            urlToConnect = this.mongoMemoryServer.getUri();
            successfulConnectionMessage = 'Connected to in-memory MongoDB server successfully!';
        }
    }
    try {
        this.connection = (await _mongoose.default.connect(urlToConnect, connectionOptions)).connection;
        if (process.env.PAYLOAD_DROP_DATABASE === 'true') {
            this.payload.logger.info('---- DROPPING DATABASE ----');
            await _mongoose.default.connection.dropDatabase();
            this.payload.logger.info('---- DROPPED DATABASE ----');
        }
        this.payload.logger.info(successfulConnectionMessage);
    } catch (err) {
        this.payload.logger.error(`Error: cannot connect to MongoDB. Details: ${err.message}`, err);
        process.exit(1);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25uZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMgKi9cbmltcG9ydCB0eXBlIHsgQ29ubmVjdE9wdGlvbnMgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgQ29ubmVjdCB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5cbmltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5leHBvcnQgY29uc3QgY29ubmVjdDogQ29ubmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QodGhpczogTW9uZ29vc2VBZGFwdGVyLCBwYXlsb2FkKSB7XG4gIGlmICh0aGlzLnVybCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghcGF5bG9hZC5sb2NhbCAmJiB0eXBlb2YgdGhpcy51cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvcjogbWlzc2luZyBNb25nb0RCIGNvbm5lY3Rpb24gVVJMLicpXG4gIH1cblxuICBsZXQgdXJsVG9Db25uZWN0ID0gdGhpcy51cmxcbiAgbGV0IHN1Y2Nlc3NmdWxDb25uZWN0aW9uTWVzc2FnZSA9ICdDb25uZWN0ZWQgdG8gTW9uZ29EQiBzZXJ2ZXIgc3VjY2Vzc2Z1bGx5ISdcblxuICBjb25zdCBjb25uZWN0aW9uT3B0aW9uczogQ29ubmVjdE9wdGlvbnMgJiB7IHVzZUZhY2V0OiB1bmRlZmluZWQgfSA9IHtcbiAgICBhdXRvSW5kZXg6IHRydWUsXG4gICAgLi4udGhpcy5jb25uZWN0T3B0aW9ucyxcbiAgICB1c2VGYWNldDogdW5kZWZpbmVkLFxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuUEFZTE9BRF9URVNUX01PTkdPX1VSTCkge1xuICAgICAgdXJsVG9Db25uZWN0ID0gcHJvY2Vzcy5lbnYuUEFZTE9BRF9URVNUX01PTkdPX1VSTFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25uZWN0aW9uT3B0aW9ucy5kYk5hbWUgPSAncGF5bG9hZG1lbW9yeSdcbiAgICAgIGNvbnN0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSA9IHJlcXVpcmUoJ21vbmdvZGItbWVtb3J5LXNlcnZlcicpXG4gICAgICBjb25zdCBnZXRQb3J0ID0gcmVxdWlyZSgnZ2V0LXBvcnQnKVxuXG4gICAgICBjb25zdCBwb3J0ID0gYXdhaXQgZ2V0UG9ydCgpXG4gICAgICB0aGlzLm1vbmdvTWVtb3J5U2VydmVyID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKHtcbiAgICAgICAgaW5zdGFuY2U6IHtcbiAgICAgICAgICBkYk5hbWU6ICdwYXlsb2FkbWVtb3J5JyxcbiAgICAgICAgICBwb3J0LFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgdXJsVG9Db25uZWN0ID0gdGhpcy5tb25nb01lbW9yeVNlcnZlci5nZXRVcmkoKVxuICAgICAgc3VjY2Vzc2Z1bENvbm5lY3Rpb25NZXNzYWdlID0gJ0Nvbm5lY3RlZCB0byBpbi1tZW1vcnkgTW9uZ29EQiBzZXJ2ZXIgc3VjY2Vzc2Z1bGx5ISdcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuY29ubmVjdGlvbiA9IChhd2FpdCBtb25nb29zZS5jb25uZWN0KHVybFRvQ29ubmVjdCwgY29ubmVjdGlvbk9wdGlvbnMpKS5jb25uZWN0aW9uXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuUEFZTE9BRF9EUk9QX0RBVEFCQVNFID09PSAndHJ1ZScpIHtcbiAgICAgIHRoaXMucGF5bG9hZC5sb2dnZXIuaW5mbygnLS0tLSBEUk9QUElORyBEQVRBQkFTRSAtLS0tJylcbiAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uZHJvcERhdGFiYXNlKClcbiAgICAgIHRoaXMucGF5bG9hZC5sb2dnZXIuaW5mbygnLS0tLSBEUk9QUEVEIERBVEFCQVNFIC0tLS0nKVxuICAgIH1cbiAgICB0aGlzLnBheWxvYWQubG9nZ2VyLmluZm8oc3VjY2Vzc2Z1bENvbm5lY3Rpb25NZXNzYWdlKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aGlzLnBheWxvYWQubG9nZ2VyLmVycm9yKGBFcnJvcjogY2Fubm90IGNvbm5lY3QgdG8gTW9uZ29EQi4gRGV0YWlsczogJHtlcnIubWVzc2FnZX1gLCBlcnIpXG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjb25uZWN0IiwicGF5bG9hZCIsInVybCIsImxvY2FsIiwiRXJyb3IiLCJ1cmxUb0Nvbm5lY3QiLCJzdWNjZXNzZnVsQ29ubmVjdGlvbk1lc3NhZ2UiLCJjb25uZWN0aW9uT3B0aW9ucyIsImF1dG9JbmRleCIsImNvbm5lY3RPcHRpb25zIiwidXNlRmFjZXQiLCJ1bmRlZmluZWQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJQQVlMT0FEX1RFU1RfTU9OR09fVVJMIiwiZGJOYW1lIiwiTW9uZ29NZW1vcnlTZXJ2ZXIiLCJyZXF1aXJlIiwiZ2V0UG9ydCIsInBvcnQiLCJtb25nb01lbW9yeVNlcnZlciIsImNyZWF0ZSIsImluc3RhbmNlIiwiZ2V0VXJpIiwiY29ubmVjdGlvbiIsIm1vbmdvb3NlIiwiUEFZTE9BRF9EUk9QX0RBVEFCQVNFIiwibG9nZ2VyIiwiaW5mbyIsImRyb3BEYXRhYmFzZSIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImV4aXQiXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDs7OzsrQkFReENBOzs7ZUFBQUE7OztpRUFKUTs7Ozs7O0FBSWQsTUFBTUEsVUFBbUIsZUFBZUEsUUFBK0JDLE9BQU87SUFDbkYsSUFBSSxJQUFJLENBQUNDLEdBQUcsS0FBSyxPQUFPO1FBQ3RCO0lBQ0Y7SUFFQSxJQUFJLENBQUNELFFBQVFFLEtBQUssSUFBSSxPQUFPLElBQUksQ0FBQ0QsR0FBRyxLQUFLLFVBQVU7UUFDbEQsTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBRUEsSUFBSUMsZUFBZSxJQUFJLENBQUNILEdBQUc7SUFDM0IsSUFBSUksOEJBQThCO0lBRWxDLE1BQU1DLG9CQUE4RDtRQUNsRUMsV0FBVztRQUNYLEdBQUcsSUFBSSxDQUFDQyxjQUFjO1FBQ3RCQyxVQUFVQztJQUNaO0lBRUEsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssUUFBUTtRQUNuQyxJQUFJRixRQUFRQyxHQUFHLENBQUNFLHNCQUFzQixFQUFFO1lBQ3RDVixlQUFlTyxRQUFRQyxHQUFHLENBQUNFLHNCQUFzQjtRQUNuRCxPQUFPO1lBQ0xSLGtCQUFrQlMsTUFBTSxHQUFHO1lBQzNCLE1BQU0sRUFBRUMsaUJBQWlCLEVBQUUsR0FBR0MsUUFBUTtZQUN0QyxNQUFNQyxVQUFVRCxRQUFRO1lBRXhCLE1BQU1FLE9BQU8sTUFBTUQ7WUFDbkIsSUFBSSxDQUFDRSxpQkFBaUIsR0FBRyxNQUFNSixrQkFBa0JLLE1BQU0sQ0FBQztnQkFDdERDLFVBQVU7b0JBQ1JQLFFBQVE7b0JBQ1JJO2dCQUNGO1lBQ0Y7WUFFQWYsZUFBZSxJQUFJLENBQUNnQixpQkFBaUIsQ0FBQ0csTUFBTTtZQUM1Q2xCLDhCQUE4QjtRQUNoQztJQUNGO0lBRUEsSUFBSTtRQUNGLElBQUksQ0FBQ21CLFVBQVUsR0FBRyxBQUFDLENBQUEsTUFBTUMsaUJBQVEsQ0FBQzFCLE9BQU8sQ0FBQ0ssY0FBY0Usa0JBQWlCLEVBQUdrQixVQUFVO1FBRXRGLElBQUliLFFBQVFDLEdBQUcsQ0FBQ2MscUJBQXFCLEtBQUssUUFBUTtZQUNoRCxJQUFJLENBQUMxQixPQUFPLENBQUMyQixNQUFNLENBQUNDLElBQUksQ0FBQztZQUN6QixNQUFNSCxpQkFBUSxDQUFDRCxVQUFVLENBQUNLLFlBQVk7WUFDdEMsSUFBSSxDQUFDN0IsT0FBTyxDQUFDMkIsTUFBTSxDQUFDQyxJQUFJLENBQUM7UUFDM0I7UUFDQSxJQUFJLENBQUM1QixPQUFPLENBQUMyQixNQUFNLENBQUNDLElBQUksQ0FBQ3ZCO0lBQzNCLEVBQUUsT0FBT3lCLEtBQUs7UUFDWixJQUFJLENBQUM5QixPQUFPLENBQUMyQixNQUFNLENBQUNJLEtBQUssQ0FBQyxDQUFDLDJDQUEyQyxFQUFFRCxJQUFJRSxPQUFPLENBQUMsQ0FBQyxFQUFFRjtRQUN2Rm5CLFFBQVFzQixJQUFJLENBQUM7SUFDZjtBQUNGIn0=