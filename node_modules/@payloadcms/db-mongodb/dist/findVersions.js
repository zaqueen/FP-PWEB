"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "findVersions", {
    enumerable: true,
    get: function() {
        return findVersions;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const findVersions = async function findVersions({ collection, limit, locale, page, pagination, req = {}, skip, sort: sortArg, where }) {
    const Model = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = {
        ...(0, _withSession.withSession)(this, req.transactionID),
        limit,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        limit,
        offset: skip || 0,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kVmVyc2lvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZU9wdGlvbnMgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgRmluZFZlcnNpb25zIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgeyBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5cbmltcG9ydCB0eXBlIHsgTW9uZ29vc2VBZGFwdGVyIH0gZnJvbSAnLidcblxuaW1wb3J0IHsgYnVpbGRTb3J0UGFyYW0gfSBmcm9tICcuL3F1ZXJpZXMvYnVpbGRTb3J0UGFyYW0nXG5pbXBvcnQgc2FuaXRpemVJbnRlcm5hbEZpZWxkcyBmcm9tICcuL3V0aWxpdGllcy9zYW5pdGl6ZUludGVybmFsRmllbGRzJ1xuaW1wb3J0IHsgd2l0aFNlc3Npb24gfSBmcm9tICcuL3dpdGhTZXNzaW9uJ1xuXG5leHBvcnQgY29uc3QgZmluZFZlcnNpb25zOiBGaW5kVmVyc2lvbnMgPSBhc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbnMoXG4gIHRoaXM6IE1vbmdvb3NlQWRhcHRlcixcbiAge1xuICAgIGNvbGxlY3Rpb24sXG4gICAgbGltaXQsXG4gICAgbG9jYWxlLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbixcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBza2lwLFxuICAgIHNvcnQ6IHNvcnRBcmcsXG4gICAgd2hlcmUsXG4gIH0sXG4pIHtcbiAgY29uc3QgTW9kZWwgPSB0aGlzLnZlcnNpb25zW2NvbGxlY3Rpb25dXG4gIGNvbnN0IGNvbGxlY3Rpb25Db25maWcgPSB0aGlzLnBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvbl0uY29uZmlnXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4ud2l0aFNlc3Npb24odGhpcywgcmVxLnRyYW5zYWN0aW9uSUQpLFxuICAgIGxpbWl0LFxuICAgIHNraXAsXG4gIH1cblxuICBsZXQgaGFzTmVhckNvbnN0cmFpbnQgPSBmYWxzZVxuXG4gIGlmICh3aGVyZSkge1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMod2hlcmUpXG4gICAgaGFzTmVhckNvbnN0cmFpbnQgPSBjb25zdHJhaW50cy5zb21lKChwcm9wKSA9PiBPYmplY3Qua2V5cyhwcm9wKS5zb21lKChrZXkpID0+IGtleSA9PT0gJ25lYXInKSlcbiAgfVxuXG4gIGxldCBzb3J0XG4gIGlmICghaGFzTmVhckNvbnN0cmFpbnQpIHtcbiAgICBzb3J0ID0gYnVpbGRTb3J0UGFyYW0oe1xuICAgICAgY29uZmlnOiB0aGlzLnBheWxvYWQuY29uZmlnLFxuICAgICAgZmllbGRzOiBjb2xsZWN0aW9uQ29uZmlnLmZpZWxkcyxcbiAgICAgIGxvY2FsZSxcbiAgICAgIHNvcnQ6IHNvcnRBcmcgfHwgJy11cGRhdGVkQXQnLFxuICAgICAgdGltZXN0YW1wczogdHJ1ZSxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgcXVlcnkgPSBhd2FpdCBNb2RlbC5idWlsZFF1ZXJ5KHtcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLFxuICAgIHdoZXJlLFxuICB9KVxuXG4gIC8vIHVzZUVzdGltYXRlZENvdW50IGlzIGZhc3RlciwgYnV0IG5vdCBhY2N1cmF0ZSwgYXMgaXQgaWdub3JlcyBhbnkgZmlsdGVycy4gSXQgaXMgdGh1cyBzZXQgdG8gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZmlsdGVycy5cbiAgY29uc3QgdXNlRXN0aW1hdGVkQ291bnQgPSBoYXNOZWFyQ29uc3RyYWludCB8fCAhcXVlcnkgfHwgT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMFxuICBjb25zdCBwYWdpbmF0aW9uT3B0aW9uczogUGFnaW5hdGVPcHRpb25zID0ge1xuICAgIGZvcmNlQ291bnRGbjogaGFzTmVhckNvbnN0cmFpbnQsXG4gICAgbGVhbjogdHJ1ZSxcbiAgICBsZWFuV2l0aElkOiB0cnVlLFxuICAgIGxpbWl0LFxuICAgIG9mZnNldDogc2tpcCB8fCAwLFxuICAgIG9wdGlvbnMsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnQsXG4gICAgdXNlRXN0aW1hdGVkQ291bnQsXG4gIH1cblxuICBpZiAoIXVzZUVzdGltYXRlZENvdW50ICYmIHRoaXMuZGlzYWJsZUluZGV4SGludHMgIT09IHRydWUpIHtcbiAgICAvLyBJbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY291bnREb2N1bWVudHMgcXVlcnkgd2hpY2ggaXMgdXNlZCBpZiB1c2VFc3RpbWF0ZWRDb3VudCBpcyBzZXQgdG8gZmFsc2UgYnkgYWRkaW5nIGEgaGludC5cbiAgICBwYWdpbmF0aW9uT3B0aW9ucy51c2VDdXN0b21Db3VudEZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgTW9kZWwuY291bnREb2N1bWVudHMocXVlcnksIHtcbiAgICAgICAgICBoaW50OiB7IF9pZDogMSB9LFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBpZiAobGltaXQgPiAwKSB7XG4gICAgcGFnaW5hdGlvbk9wdGlvbnMubGltaXQgPSBsaW1pdFxuICAgIC8vIGxpbWl0IG11c3QgYWxzbyBiZSBzZXQgaGVyZSwgaXQncyBpZ25vcmVkIHdoZW4gcGFnaW5hdGlvbiBpcyBmYWxzZVxuICAgIHBhZ2luYXRpb25PcHRpb25zLm9wdGlvbnMubGltaXQgPSBsaW1pdFxuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgTW9kZWwucGFnaW5hdGUocXVlcnksIHBhZ2luYXRpb25PcHRpb25zKVxuICBjb25zdCBkb2NzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQuZG9jcykpXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN1bHQsXG4gICAgZG9jczogZG9jcy5tYXAoKGRvYykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBkb2MuaWQgPSBkb2MuX2lkXG4gICAgICByZXR1cm4gc2FuaXRpemVJbnRlcm5hbEZpZWxkcyhkb2MpXG4gICAgfSksXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmaW5kVmVyc2lvbnMiLCJjb2xsZWN0aW9uIiwibGltaXQiLCJsb2NhbGUiLCJwYWdlIiwicGFnaW5hdGlvbiIsInJlcSIsInNraXAiLCJzb3J0Iiwic29ydEFyZyIsIndoZXJlIiwiTW9kZWwiLCJ2ZXJzaW9ucyIsImNvbGxlY3Rpb25Db25maWciLCJwYXlsb2FkIiwiY29sbGVjdGlvbnMiLCJjb25maWciLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwiaGFzTmVhckNvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsImZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIiwic29tZSIsInByb3AiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiYnVpbGRTb3J0UGFyYW0iLCJmaWVsZHMiLCJ0aW1lc3RhbXBzIiwicXVlcnkiLCJidWlsZFF1ZXJ5IiwidXNlRXN0aW1hdGVkQ291bnQiLCJsZW5ndGgiLCJwYWdpbmF0aW9uT3B0aW9ucyIsImZvcmNlQ291bnRGbiIsImxlYW4iLCJsZWFuV2l0aElkIiwib2Zmc2V0IiwiZGlzYWJsZUluZGV4SGludHMiLCJ1c2VDdXN0b21Db3VudEZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb3VudERvY3VtZW50cyIsImhpbnQiLCJfaWQiLCJyZXN1bHQiLCJwYWdpbmF0ZSIsImRvY3MiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJtYXAiLCJkb2MiLCJpZCIsInNhbml0aXplSW50ZXJuYWxGaWVsZHMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBWWFBOzs7ZUFBQUE7OzswQkFSMkI7Z0NBSVQ7K0VBQ0k7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