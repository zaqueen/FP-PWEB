"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "updateOne", {
    enumerable: true,
    get: function() {
        return updateOne;
    }
});
const _errors = require("payload/errors");
const _utilities = require("payload/utilities");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const updateOne = async function updateOne({ id, collection, data, locale, req = {}, where: whereArg }) {
    const where = id ? {
        id: {
            equals: id
        }
    } : whereArg;
    const Model = this.collections[collection];
    const options = {
        ...(0, _withSession.withSession)(this, req.transactionID),
        lean: true,
        new: true
    };
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    let result;
    try {
        result = await Model.findOneAndUpdate(query, data, options);
    } catch (error) {
        // Handle uniqueness error from MongoDB
        throw error.code === 11000 && error.keyValue ? new _errors.ValidationError([
            {
                field: Object.keys(error.keyValue)[0],
                message: 'Value must be unique'
            }
        ], req?.t ?? (0, _utilities.i18nInit)(this.payload.config.i18n).t) : error;
    }
    result = JSON.parse(JSON.stringify(result));
    result.id = result._id;
    result = (0, _sanitizeInternalFields.default)(result);
    return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91cGRhdGVPbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBVcGRhdGVPbmUgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ3BheWxvYWQvZXJyb3JzJ1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgc2FuaXRpemVJbnRlcm5hbEZpZWxkcyBmcm9tICcuL3V0aWxpdGllcy9zYW5pdGl6ZUludGVybmFsRmllbGRzJ1xuaW1wb3J0IHsgd2l0aFNlc3Npb24gfSBmcm9tICcuL3dpdGhTZXNzaW9uJ1xuXG5leHBvcnQgY29uc3QgdXBkYXRlT25lOiBVcGRhdGVPbmUgPSBhc3luYyBmdW5jdGlvbiB1cGRhdGVPbmUoXG4gIHRoaXM6IE1vbmdvb3NlQWRhcHRlcixcbiAgeyBpZCwgY29sbGVjdGlvbiwgZGF0YSwgbG9jYWxlLCByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCwgd2hlcmU6IHdoZXJlQXJnIH0sXG4pIHtcbiAgY29uc3Qgd2hlcmUgPSBpZCA/IHsgaWQ6IHsgZXF1YWxzOiBpZCB9IH0gOiB3aGVyZUFyZ1xuICBjb25zdCBNb2RlbCA9IHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl1cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi53aXRoU2Vzc2lvbih0aGlzLCByZXEudHJhbnNhY3Rpb25JRCksXG4gICAgbGVhbjogdHJ1ZSxcbiAgICBuZXc6IHRydWUsXG4gIH1cblxuICBjb25zdCBxdWVyeSA9IGF3YWl0IE1vZGVsLmJ1aWxkUXVlcnkoe1xuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQsXG4gICAgd2hlcmUsXG4gIH0pXG5cbiAgbGV0IHJlc3VsdFxuICB0cnkge1xuICAgIHJlc3VsdCA9IGF3YWl0IE1vZGVsLmZpbmRPbmVBbmRVcGRhdGUocXVlcnksIGRhdGEsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gSGFuZGxlIHVuaXF1ZW5lc3MgZXJyb3IgZnJvbSBNb25nb0RCXG4gICAgdGhyb3cgZXJyb3IuY29kZSA9PT0gMTEwMDAgJiYgZXJyb3Iua2V5VmFsdWVcbiAgICAgID8gbmV3IFZhbGlkYXRpb25FcnJvcihcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZpZWxkOiBPYmplY3Qua2V5cyhlcnJvci5rZXlWYWx1ZSlbMF0sXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdWYWx1ZSBtdXN0IGJlIHVuaXF1ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgcmVxPy50ID8/IGkxOG5Jbml0KHRoaXMucGF5bG9hZC5jb25maWcuaTE4bikudCxcbiAgICAgICAgKVxuICAgICAgOiBlcnJvclxuICB9XG5cbiAgcmVzdWx0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQpKVxuICByZXN1bHQuaWQgPSByZXN1bHQuX2lkXG4gIHJlc3VsdCA9IHNhbml0aXplSW50ZXJuYWxGaWVsZHMocmVzdWx0KVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6WyJ1cGRhdGVPbmUiLCJpZCIsImNvbGxlY3Rpb24iLCJkYXRhIiwibG9jYWxlIiwicmVxIiwid2hlcmUiLCJ3aGVyZUFyZyIsImVxdWFscyIsIk1vZGVsIiwiY29sbGVjdGlvbnMiLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwibGVhbiIsIm5ldyIsInF1ZXJ5IiwiYnVpbGRRdWVyeSIsInBheWxvYWQiLCJyZXN1bHQiLCJmaW5kT25lQW5kVXBkYXRlIiwiZXJyb3IiLCJjb2RlIiwia2V5VmFsdWUiLCJWYWxpZGF0aW9uRXJyb3IiLCJmaWVsZCIsIk9iamVjdCIsImtleXMiLCJtZXNzYWdlIiwidCIsImkxOG5Jbml0IiwiY29uZmlnIiwiaTE4biIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIl9pZCIsInNhbml0aXplSW50ZXJuYWxGaWVsZHMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBV2FBOzs7ZUFBQUE7Ozt3QkFSbUI7MkJBQ1A7K0VBSVU7NkJBQ1A7Ozs7OztBQUVyQixNQUFNQSxZQUF1QixlQUFlQSxVQUVqRCxFQUFFQyxFQUFFLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxDQUFtQixFQUFFQyxPQUFPQyxRQUFRLEVBQUU7SUFFN0UsTUFBTUQsUUFBUUwsS0FBSztRQUFFQSxJQUFJO1lBQUVPLFFBQVFQO1FBQUc7SUFBRSxJQUFJTTtJQUM1QyxNQUFNRSxRQUFRLElBQUksQ0FBQ0MsV0FBVyxDQUFDUixXQUFXO0lBQzFDLE1BQU1TLFVBQVU7UUFDZCxHQUFHQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRVAsSUFBSVEsYUFBYSxDQUFDO1FBQ3ZDQyxNQUFNO1FBQ05DLEtBQUs7SUFDUDtJQUVBLE1BQU1DLFFBQVEsTUFBTVAsTUFBTVEsVUFBVSxDQUFDO1FBQ25DYjtRQUNBYyxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUNyQlo7SUFDRjtJQUVBLElBQUlhO0lBQ0osSUFBSTtRQUNGQSxTQUFTLE1BQU1WLE1BQU1XLGdCQUFnQixDQUFDSixPQUFPYixNQUFNUTtJQUNyRCxFQUFFLE9BQU9VLE9BQU87UUFDZCx1Q0FBdUM7UUFDdkMsTUFBTUEsTUFBTUMsSUFBSSxLQUFLLFNBQVNELE1BQU1FLFFBQVEsR0FDeEMsSUFBSUMsdUJBQWUsQ0FDakI7WUFDRTtnQkFDRUMsT0FBT0MsT0FBT0MsSUFBSSxDQUFDTixNQUFNRSxRQUFRLENBQUMsQ0FBQyxFQUFFO2dCQUNyQ0ssU0FBUztZQUNYO1NBQ0QsRUFDRHZCLEtBQUt3QixLQUFLQyxJQUFBQSxtQkFBUSxFQUFDLElBQUksQ0FBQ1osT0FBTyxDQUFDYSxNQUFNLENBQUNDLElBQUksRUFBRUgsQ0FBQyxJQUVoRFI7SUFDTjtJQUVBRixTQUFTYyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ2hCO0lBQ25DQSxPQUFPbEIsRUFBRSxHQUFHa0IsT0FBT2lCLEdBQUc7SUFDdEJqQixTQUFTa0IsSUFBQUEsK0JBQXNCLEVBQUNsQjtJQUVoQyxPQUFPQTtBQUNUIn0=