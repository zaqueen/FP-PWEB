/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "init", {
    enumerable: true,
    get: function() {
        return init;
    }
});
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
const _mongooseaggregatepaginatev2 = /*#__PURE__*/ _interop_require_default(require("mongoose-aggregate-paginate-v2"));
const _mongoosepaginatev2 = /*#__PURE__*/ _interop_require_default(require("mongoose-paginate-v2"));
const _versions = require("payload/versions");
const _buildCollectionSchema = /*#__PURE__*/ _interop_require_default(require("./models/buildCollectionSchema"));
const _buildGlobalModel = require("./models/buildGlobalModel");
const _buildSchema = /*#__PURE__*/ _interop_require_default(require("./models/buildSchema"));
const _buildQuery = /*#__PURE__*/ _interop_require_default(require("./queries/buildQuery"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const init = async function init() {
    this.payload.config.collections.forEach((collection)=>{
        const schema = (0, _buildCollectionSchema.default)(collection, this.payload.config);
        if (collection.versions) {
            const versionModelName = (0, _versions.getVersionsModelName)(collection);
            const versionCollectionFields = (0, _versions.buildVersionCollectionFields)(collection);
            const versionSchema = (0, _buildSchema.default)(this.payload.config, versionCollectionFields, {
                disableUnique: true,
                draftsEnabled: true,
                options: {
                    minimize: false,
                    timestamps: false
                }
            });
            versionSchema.plugin(_mongoosepaginatev2.default, {
                useEstimatedCount: true
            }).plugin((0, _buildQuery.default)({
                collectionSlug: collection.slug,
                versionsFields: versionCollectionFields
            }));
            if (collection.versions?.drafts) {
                versionSchema.plugin(_mongooseaggregatepaginatev2.default);
            }
            const model = _mongoose.default.model(versionModelName, versionSchema, this.autoPluralization === true ? undefined : versionModelName);
            // this.payload.versions[collection.slug] = model;
            this.versions[collection.slug] = model;
        }
        const model = _mongoose.default.model(collection.slug, schema, this.autoPluralization === true ? undefined : collection.slug);
        this.collections[collection.slug] = model;
        // TS expect error only needed until we launch 2.0.0
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        this.payload.collections[collection.slug] = {
            config: collection
        };
    });
    const model = (0, _buildGlobalModel.buildGlobalModel)(this.payload.config);
    this.globals = model;
    this.payload.config.globals.forEach((global)=>{
        if (global.versions) {
            const versionModelName = (0, _versions.getVersionsModelName)(global);
            const versionGlobalFields = (0, _versions.buildVersionGlobalFields)(global);
            const versionSchema = (0, _buildSchema.default)(this.payload.config, versionGlobalFields, {
                disableUnique: true,
                draftsEnabled: true,
                indexSortableFields: this.payload.config.indexSortableFields,
                options: {
                    minimize: false,
                    timestamps: false
                }
            });
            versionSchema.plugin(_mongoosepaginatev2.default, {
                useEstimatedCount: true
            }).plugin((0, _buildQuery.default)({
                versionsFields: versionGlobalFields
            }));
            const versionsModel = _mongoose.default.model(versionModelName, versionSchema, versionModelName);
            this.versions[global.slug] = versionsModel;
        }
    });
};

//# sourceMappingURL=data:application/json;base64,