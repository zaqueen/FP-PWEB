"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "queryDrafts", {
    enumerable: true,
    get: function() {
        return queryDrafts;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryDrafts = async function queryDrafts({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const VersionModel = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let hasNearConstraint;
    let sort;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const combinedWhere = (0, _database.combineQueries)({
        latest: {
            equals: true
        }
    }, where);
    const versionQuery = await VersionModel.buildQuery({
        locale,
        payload: this.payload,
        where: combinedWhere
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(VersionModel.countDocuments(versionQuery, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await VersionModel.paginate(versionQuery, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc = {
                _id: doc.parent,
                id: doc.parent,
                ...doc.version,
                createdAt: doc.createdAt,
                updatedAt: doc.updatedAt
            };
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeURyYWZ0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFBhZ2luYXRlT3B0aW9ucyB9IGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IHR5cGUgeyBRdWVyeURyYWZ0cyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHsgY29tYmluZVF1ZXJpZXMsIGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgeyBidWlsZFNvcnRQYXJhbSB9IGZyb20gJy4vcXVlcmllcy9idWlsZFNvcnRQYXJhbSdcbmltcG9ydCBzYW5pdGl6ZUludGVybmFsRmllbGRzIGZyb20gJy4vdXRpbGl0aWVzL3Nhbml0aXplSW50ZXJuYWxGaWVsZHMnXG5pbXBvcnQgeyB3aXRoU2Vzc2lvbiB9IGZyb20gJy4vd2l0aFNlc3Npb24nXG5cbmV4cG9ydCBjb25zdCBxdWVyeURyYWZ0czogUXVlcnlEcmFmdHMgPSBhc3luYyBmdW5jdGlvbiBxdWVyeURyYWZ0cyhcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGNvbGxlY3Rpb24sIGxpbWl0LCBsb2NhbGUsIHBhZ2UsIHBhZ2luYXRpb24sIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCBzb3J0OiBzb3J0QXJnLCB3aGVyZSB9LFxuKSB7XG4gIGNvbnN0IFZlcnNpb25Nb2RlbCA9IHRoaXMudmVyc2lvbnNbY29sbGVjdGlvbl1cbiAgY29uc3QgY29sbGVjdGlvbkNvbmZpZyA9IHRoaXMucGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXS5jb25maWdcbiAgY29uc3Qgb3B0aW9ucyA9IHdpdGhTZXNzaW9uKHRoaXMsIHJlcS50cmFuc2FjdGlvbklEKVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludFxuICBsZXQgc29ydFxuXG4gIGlmICh3aGVyZSkge1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMod2hlcmUpXG4gICAgaGFzTmVhckNvbnN0cmFpbnQgPSBjb25zdHJhaW50cy5zb21lKChwcm9wKSA9PiBPYmplY3Qua2V5cyhwcm9wKS5zb21lKChrZXkpID0+IGtleSA9PT0gJ25lYXInKSlcbiAgfVxuXG4gIGlmICghaGFzTmVhckNvbnN0cmFpbnQpIHtcbiAgICBzb3J0ID0gYnVpbGRTb3J0UGFyYW0oe1xuICAgICAgY29uZmlnOiB0aGlzLnBheWxvYWQuY29uZmlnLFxuICAgICAgZmllbGRzOiBjb2xsZWN0aW9uQ29uZmlnLmZpZWxkcyxcbiAgICAgIGxvY2FsZSxcbiAgICAgIHNvcnQ6IHNvcnRBcmcgfHwgY29sbGVjdGlvbkNvbmZpZy5kZWZhdWx0U29ydCxcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGNvbWJpbmVkV2hlcmUgPSBjb21iaW5lUXVlcmllcyh7IGxhdGVzdDogeyBlcXVhbHM6IHRydWUgfSB9LCB3aGVyZSlcblxuICBjb25zdCB2ZXJzaW9uUXVlcnkgPSBhd2FpdCBWZXJzaW9uTW9kZWwuYnVpbGRRdWVyeSh7XG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCxcbiAgICB3aGVyZTogY29tYmluZWRXaGVyZSxcbiAgfSlcblxuICAvLyB1c2VFc3RpbWF0ZWRDb3VudCBpcyBmYXN0ZXIsIGJ1dCBub3QgYWNjdXJhdGUsIGFzIGl0IGlnbm9yZXMgYW55IGZpbHRlcnMuIEl0IGlzIHRodXMgc2V0IHRvIHRydWUgaWYgdGhlcmUgYXJlIG5vIGZpbHRlcnMuXG4gIGNvbnN0IHVzZUVzdGltYXRlZENvdW50ID1cbiAgICBoYXNOZWFyQ29uc3RyYWludCB8fCAhdmVyc2lvblF1ZXJ5IHx8IE9iamVjdC5rZXlzKHZlcnNpb25RdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb3B0aW9ucyxcbiAgICBwYWdlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgc29ydCxcbiAgICB1c2VFc3RpbWF0ZWRDb3VudCxcbiAgfVxuXG4gIGlmICghdXNlRXN0aW1hdGVkQ291bnQgJiYgdGhpcy5kaXNhYmxlSW5kZXhIaW50cyAhPT0gdHJ1ZSkge1xuICAgIC8vIEltcHJvdmUgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBjb3VudERvY3VtZW50cyBxdWVyeSB3aGljaCBpcyB1c2VkIGlmIHVzZUVzdGltYXRlZENvdW50IGlzIHNldCB0byBmYWxzZSBieSBhZGRpbmcgYSBoaW50LlxuICAgIHBhZ2luYXRpb25PcHRpb25zLnVzZUN1c3RvbUNvdW50Rm4gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICBWZXJzaW9uTW9kZWwuY291bnREb2N1bWVudHModmVyc2lvblF1ZXJ5LCB7XG4gICAgICAgICAgaGludDogeyBfaWQ6IDEgfSxcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgaWYgKGxpbWl0ID4gMCkge1xuICAgIHBhZ2luYXRpb25PcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgICAvLyBsaW1pdCBtdXN0IGFsc28gYmUgc2V0IGhlcmUsIGl0J3MgaWdub3JlZCB3aGVuIHBhZ2luYXRpb24gaXMgZmFsc2VcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy5vcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFZlcnNpb25Nb2RlbC5wYWdpbmF0ZSh2ZXJzaW9uUXVlcnksIHBhZ2luYXRpb25PcHRpb25zKVxuICBjb25zdCBkb2NzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQuZG9jcykpXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN1bHQsXG4gICAgZG9jczogZG9jcy5tYXAoKGRvYykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBkb2MgPSB7XG4gICAgICAgIF9pZDogZG9jLnBhcmVudCxcbiAgICAgICAgaWQ6IGRvYy5wYXJlbnQsXG4gICAgICAgIC4uLmRvYy52ZXJzaW9uLFxuICAgICAgICBjcmVhdGVkQXQ6IGRvYy5jcmVhdGVkQXQsXG4gICAgICAgIHVwZGF0ZWRBdDogZG9jLnVwZGF0ZWRBdCxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNhbml0aXplSW50ZXJuYWxGaWVsZHMoZG9jKVxuICAgIH0pLFxuICB9XG59XG4iXSwibmFtZXMiOlsicXVlcnlEcmFmdHMiLCJjb2xsZWN0aW9uIiwibGltaXQiLCJsb2NhbGUiLCJwYWdlIiwicGFnaW5hdGlvbiIsInJlcSIsInNvcnQiLCJzb3J0QXJnIiwid2hlcmUiLCJWZXJzaW9uTW9kZWwiLCJ2ZXJzaW9ucyIsImNvbGxlY3Rpb25Db25maWciLCJwYXlsb2FkIiwiY29sbGVjdGlvbnMiLCJjb25maWciLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwiaGFzTmVhckNvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsImZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIiwic29tZSIsInByb3AiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiYnVpbGRTb3J0UGFyYW0iLCJmaWVsZHMiLCJkZWZhdWx0U29ydCIsInRpbWVzdGFtcHMiLCJjb21iaW5lZFdoZXJlIiwiY29tYmluZVF1ZXJpZXMiLCJsYXRlc3QiLCJlcXVhbHMiLCJ2ZXJzaW9uUXVlcnkiLCJidWlsZFF1ZXJ5IiwidXNlRXN0aW1hdGVkQ291bnQiLCJsZW5ndGgiLCJwYWdpbmF0aW9uT3B0aW9ucyIsImZvcmNlQ291bnRGbiIsImxlYW4iLCJsZWFuV2l0aElkIiwiZGlzYWJsZUluZGV4SGludHMiLCJ1c2VDdXN0b21Db3VudEZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb3VudERvY3VtZW50cyIsImhpbnQiLCJfaWQiLCJyZXN1bHQiLCJwYWdpbmF0ZSIsImRvY3MiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJtYXAiLCJkb2MiLCJwYXJlbnQiLCJpZCIsInZlcnNpb24iLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzYW5pdGl6ZUludGVybmFsRmllbGRzIl0sIm1hcHBpbmdzIjoiOzs7OytCQVlhQTs7O2VBQUFBOzs7MEJBUjJDO2dDQUl6QjsrRUFDSTs2QkFDUDs7Ozs7O0FBRXJCLE1BQU1BLGNBQTJCLGVBQWVBLFlBRXJELEVBQUVDLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxNQUFNLENBQUMsQ0FBbUIsRUFBRUMsTUFBTUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7SUFFakcsTUFBTUMsZUFBZSxJQUFJLENBQUNDLFFBQVEsQ0FBQ1YsV0FBVztJQUM5QyxNQUFNVyxtQkFBbUIsSUFBSSxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQ2IsV0FBVyxDQUFDYyxNQUFNO0lBQ3BFLE1BQU1DLFVBQVVDLElBQUFBLHdCQUFXLEVBQUMsSUFBSSxFQUFFWCxJQUFJWSxhQUFhO0lBRW5ELElBQUlDO0lBQ0osSUFBSVo7SUFFSixJQUFJRSxPQUFPO1FBQ1QsTUFBTVcsY0FBY0MsSUFBQUEsaUNBQXVCLEVBQUNaO1FBQzVDVSxvQkFBb0JDLFlBQVlFLElBQUksQ0FBQyxDQUFDQyxPQUFTQyxPQUFPQyxJQUFJLENBQUNGLE1BQU1ELElBQUksQ0FBQyxDQUFDSSxNQUFRQSxRQUFRO0lBQ3pGO0lBRUEsSUFBSSxDQUFDUCxtQkFBbUI7UUFDdEJaLE9BQU9vQixJQUFBQSw4QkFBYyxFQUFDO1lBQ3BCWixRQUFRLElBQUksQ0FBQ0YsT0FBTyxDQUFDRSxNQUFNO1lBQzNCYSxRQUFRaEIsaUJBQWlCZ0IsTUFBTTtZQUMvQnpCO1lBQ0FJLE1BQU1DLFdBQVdJLGlCQUFpQmlCLFdBQVc7WUFDN0NDLFlBQVk7UUFDZDtJQUNGO0lBRUEsTUFBTUMsZ0JBQWdCQyxJQUFBQSx3QkFBYyxFQUFDO1FBQUVDLFFBQVE7WUFBRUMsUUFBUTtRQUFLO0lBQUUsR0FBR3pCO0lBRW5FLE1BQU0wQixlQUFlLE1BQU16QixhQUFhMEIsVUFBVSxDQUFDO1FBQ2pEakM7UUFDQVUsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFDckJKLE9BQU9zQjtJQUNUO0lBRUEsNEhBQTRIO0lBQzVILE1BQU1NLG9CQUNKbEIscUJBQXFCLENBQUNnQixnQkFBZ0JYLE9BQU9DLElBQUksQ0FBQ1UsY0FBY0csTUFBTSxLQUFLO0lBQzdFLE1BQU1DLG9CQUFxQztRQUN6Q0MsY0FBY3JCO1FBQ2RzQixNQUFNO1FBQ05DLFlBQVk7UUFDWjFCO1FBQ0FaO1FBQ0FDO1FBQ0FFO1FBQ0E4QjtJQUNGO0lBRUEsSUFBSSxDQUFDQSxxQkFBcUIsSUFBSSxDQUFDTSxpQkFBaUIsS0FBSyxNQUFNO1FBQ3pELDJIQUEySDtRQUMzSEosa0JBQWtCSyxnQkFBZ0IsR0FBRztZQUNuQyxPQUFPQyxRQUFRQyxPQUFPLENBQ3BCcEMsYUFBYXFDLGNBQWMsQ0FBQ1osY0FBYztnQkFDeENhLE1BQU07b0JBQUVDLEtBQUs7Z0JBQUU7WUFDakI7UUFFSjtJQUNGO0lBRUEsSUFBSS9DLFFBQVEsR0FBRztRQUNicUMsa0JBQWtCckMsS0FBSyxHQUFHQTtRQUMxQixxRUFBcUU7UUFDckVxQyxrQkFBa0J2QixPQUFPLENBQUNkLEtBQUssR0FBR0E7SUFDcEM7SUFFQSxNQUFNZ0QsU0FBUyxNQUFNeEMsYUFBYXlDLFFBQVEsQ0FBQ2hCLGNBQWNJO0lBQ3pELE1BQU1hLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDTCxPQUFPRSxJQUFJO0lBRWxELE9BQU87UUFDTCxHQUFHRixNQUFNO1FBQ1RFLE1BQU1BLEtBQUtJLEdBQUcsQ0FBQyxDQUFDQztZQUNkLDZDQUE2QztZQUM3Q0EsTUFBTTtnQkFDSlIsS0FBS1EsSUFBSUMsTUFBTTtnQkFDZkMsSUFBSUYsSUFBSUMsTUFBTTtnQkFDZCxHQUFHRCxJQUFJRyxPQUFPO2dCQUNkQyxXQUFXSixJQUFJSSxTQUFTO2dCQUN4QkMsV0FBV0wsSUFBSUssU0FBUztZQUMxQjtZQUVBLE9BQU9DLElBQUFBLCtCQUFzQixFQUFDTjtRQUNoQztJQUNGO0FBQ0YifQ==