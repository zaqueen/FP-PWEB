"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "findGlobalVersions", {
    enumerable: true,
    get: function() {
        return findGlobalVersions;
    }
});
const _database = require("payload/database");
const _versions = require("payload/versions");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const findGlobalVersions = async function findGlobalVersions({ global, limit, locale, page, pagination, req = {}, skip, sort: sortArg, where }) {
    const Model = this.versions[global];
    const versionFields = (0, _versions.buildVersionGlobalFields)(this.payload.globals.config.find(({ slug })=>slug === global));
    const options = {
        ...(0, _withSession.withSession)(this, req.transactionID),
        limit,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: versionFields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        globalSlug: global,
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        offset: skip,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kR2xvYmFsVmVyc2lvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZU9wdGlvbnMgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgRmluZEdsb2JhbFZlcnNpb25zIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgeyBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgeyBidWlsZFZlcnNpb25HbG9iYWxGaWVsZHMgfSBmcm9tICdwYXlsb2FkL3ZlcnNpb25zJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCB7IGJ1aWxkU29ydFBhcmFtIH0gZnJvbSAnLi9xdWVyaWVzL2J1aWxkU29ydFBhcmFtJ1xuaW1wb3J0IHNhbml0aXplSW50ZXJuYWxGaWVsZHMgZnJvbSAnLi91dGlsaXRpZXMvc2FuaXRpemVJbnRlcm5hbEZpZWxkcydcbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcblxuZXhwb3J0IGNvbnN0IGZpbmRHbG9iYWxWZXJzaW9uczogRmluZEdsb2JhbFZlcnNpb25zID0gYXN5bmMgZnVuY3Rpb24gZmluZEdsb2JhbFZlcnNpb25zKFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHtcbiAgICBnbG9iYWwsXG4gICAgbGltaXQsXG4gICAgbG9jYWxlLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbixcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBza2lwLFxuICAgIHNvcnQ6IHNvcnRBcmcsXG4gICAgd2hlcmUsXG4gIH0sXG4pIHtcbiAgY29uc3QgTW9kZWwgPSB0aGlzLnZlcnNpb25zW2dsb2JhbF1cbiAgY29uc3QgdmVyc2lvbkZpZWxkcyA9IGJ1aWxkVmVyc2lvbkdsb2JhbEZpZWxkcyhcbiAgICB0aGlzLnBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoeyBzbHVnIH0pID0+IHNsdWcgPT09IGdsb2JhbCksXG4gIClcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi53aXRoU2Vzc2lvbih0aGlzLCByZXEudHJhbnNhY3Rpb25JRCksXG4gICAgbGltaXQsXG4gICAgc2tpcCxcbiAgfVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludCA9IGZhbHNlXG5cbiAgaWYgKHdoZXJlKSB7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyh3aGVyZSlcbiAgICBoYXNOZWFyQ29uc3RyYWludCA9IGNvbnN0cmFpbnRzLnNvbWUoKHByb3ApID0+IE9iamVjdC5rZXlzKHByb3ApLnNvbWUoKGtleSkgPT4ga2V5ID09PSAnbmVhcicpKVxuICB9XG5cbiAgbGV0IHNvcnRcbiAgaWYgKCFoYXNOZWFyQ29uc3RyYWludCkge1xuICAgIHNvcnQgPSBidWlsZFNvcnRQYXJhbSh7XG4gICAgICBjb25maWc6IHRoaXMucGF5bG9hZC5jb25maWcsXG4gICAgICBmaWVsZHM6IHZlcnNpb25GaWVsZHMsXG4gICAgICBsb2NhbGUsXG4gICAgICBzb3J0OiBzb3J0QXJnIHx8ICctdXBkYXRlZEF0JyxcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gYXdhaXQgTW9kZWwuYnVpbGRRdWVyeSh7XG4gICAgZ2xvYmFsU2x1ZzogZ2xvYmFsLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQsXG4gICAgd2hlcmUsXG4gIH0pXG5cbiAgLy8gdXNlRXN0aW1hdGVkQ291bnQgaXMgZmFzdGVyLCBidXQgbm90IGFjY3VyYXRlLCBhcyBpdCBpZ25vcmVzIGFueSBmaWx0ZXJzLiBJdCBpcyB0aHVzIHNldCB0byB0cnVlIGlmIHRoZXJlIGFyZSBubyBmaWx0ZXJzLlxuICBjb25zdCB1c2VFc3RpbWF0ZWRDb3VudCA9IGhhc05lYXJDb25zdHJhaW50IHx8ICFxdWVyeSB8fCBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb2Zmc2V0OiBza2lwLFxuICAgIG9wdGlvbnMsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnQsXG4gICAgdXNlRXN0aW1hdGVkQ291bnQsXG4gIH1cblxuICBpZiAoIXVzZUVzdGltYXRlZENvdW50ICYmIHRoaXMuZGlzYWJsZUluZGV4SGludHMgIT09IHRydWUpIHtcbiAgICAvLyBJbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY291bnREb2N1bWVudHMgcXVlcnkgd2hpY2ggaXMgdXNlZCBpZiB1c2VFc3RpbWF0ZWRDb3VudCBpcyBzZXQgdG8gZmFsc2UgYnkgYWRkaW5nIGEgaGludC5cbiAgICBwYWdpbmF0aW9uT3B0aW9ucy51c2VDdXN0b21Db3VudEZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgTW9kZWwuY291bnREb2N1bWVudHMocXVlcnksIHtcbiAgICAgICAgICBoaW50OiB7IF9pZDogMSB9LFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBpZiAobGltaXQgPiAwKSB7XG4gICAgcGFnaW5hdGlvbk9wdGlvbnMubGltaXQgPSBsaW1pdFxuICAgIC8vIGxpbWl0IG11c3QgYWxzbyBiZSBzZXQgaGVyZSwgaXQncyBpZ25vcmVkIHdoZW4gcGFnaW5hdGlvbiBpcyBmYWxzZVxuICAgIHBhZ2luYXRpb25PcHRpb25zLm9wdGlvbnMubGltaXQgPSBsaW1pdFxuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgTW9kZWwucGFnaW5hdGUocXVlcnksIHBhZ2luYXRpb25PcHRpb25zKVxuICBjb25zdCBkb2NzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQuZG9jcykpXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN1bHQsXG4gICAgZG9jczogZG9jcy5tYXAoKGRvYykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBkb2MuaWQgPSBkb2MuX2lkXG4gICAgICByZXR1cm4gc2FuaXRpemVJbnRlcm5hbEZpZWxkcyhkb2MpXG4gICAgfSksXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmaW5kR2xvYmFsVmVyc2lvbnMiLCJnbG9iYWwiLCJsaW1pdCIsImxvY2FsZSIsInBhZ2UiLCJwYWdpbmF0aW9uIiwicmVxIiwic2tpcCIsInNvcnQiLCJzb3J0QXJnIiwid2hlcmUiLCJNb2RlbCIsInZlcnNpb25zIiwidmVyc2lvbkZpZWxkcyIsImJ1aWxkVmVyc2lvbkdsb2JhbEZpZWxkcyIsInBheWxvYWQiLCJnbG9iYWxzIiwiY29uZmlnIiwiZmluZCIsInNsdWciLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwiaGFzTmVhckNvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsImZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIiwic29tZSIsInByb3AiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiYnVpbGRTb3J0UGFyYW0iLCJmaWVsZHMiLCJ0aW1lc3RhbXBzIiwicXVlcnkiLCJidWlsZFF1ZXJ5IiwiZ2xvYmFsU2x1ZyIsInVzZUVzdGltYXRlZENvdW50IiwibGVuZ3RoIiwicGFnaW5hdGlvbk9wdGlvbnMiLCJmb3JjZUNvdW50Rm4iLCJsZWFuIiwibGVhbldpdGhJZCIsIm9mZnNldCIsImRpc2FibGVJbmRleEhpbnRzIiwidXNlQ3VzdG9tQ291bnRGbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiY291bnREb2N1bWVudHMiLCJoaW50IiwiX2lkIiwicmVzdWx0IiwicGFnaW5hdGUiLCJkb2NzIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwibWFwIiwiZG9jIiwiaWQiLCJzYW5pdGl6ZUludGVybmFsRmllbGRzIl0sIm1hcHBpbmdzIjoiOzs7OytCQWFhQTs7O2VBQUFBOzs7MEJBVDJCOzBCQUNDO2dDQUlWOytFQUNJOzZCQUNQOzs7Ozs7QUFFckIsTUFBTUEscUJBQXlDLGVBQWVBLG1CQUVuRSxFQUNFQyxNQUFNLEVBQ05DLEtBQUssRUFDTEMsTUFBTSxFQUNOQyxJQUFJLEVBQ0pDLFVBQVUsRUFDVkMsTUFBTSxDQUFDLENBQW1CLEVBQzFCQyxJQUFJLEVBQ0pDLE1BQU1DLE9BQU8sRUFDYkMsS0FBSyxFQUNOO0lBRUQsTUFBTUMsUUFBUSxJQUFJLENBQUNDLFFBQVEsQ0FBQ1gsT0FBTztJQUNuQyxNQUFNWSxnQkFBZ0JDLElBQUFBLGtDQUF3QixFQUM1QyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVDLElBQUksRUFBRSxHQUFLQSxTQUFTbEI7SUFFMUQsTUFBTW1CLFVBQVU7UUFDZCxHQUFHQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRWYsSUFBSWdCLGFBQWEsQ0FBQztRQUN2Q3BCO1FBQ0FLO0lBQ0Y7SUFFQSxJQUFJZ0Isb0JBQW9CO0lBRXhCLElBQUliLE9BQU87UUFDVCxNQUFNYyxjQUFjQyxJQUFBQSxpQ0FBdUIsRUFBQ2Y7UUFDNUNhLG9CQUFvQkMsWUFBWUUsSUFBSSxDQUFDLENBQUNDLE9BQVNDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsSUFBSSxDQUFDLENBQUNJLE1BQVFBLFFBQVE7SUFDekY7SUFFQSxJQUFJdEI7SUFDSixJQUFJLENBQUNlLG1CQUFtQjtRQUN0QmYsT0FBT3VCLElBQUFBLDhCQUFjLEVBQUM7WUFDcEJkLFFBQVEsSUFBSSxDQUFDRixPQUFPLENBQUNFLE1BQU07WUFDM0JlLFFBQVFuQjtZQUNSVjtZQUNBSyxNQUFNQyxXQUFXO1lBQ2pCd0IsWUFBWTtRQUNkO0lBQ0Y7SUFFQSxNQUFNQyxRQUFRLE1BQU12QixNQUFNd0IsVUFBVSxDQUFDO1FBQ25DQyxZQUFZbkM7UUFDWkU7UUFDQVksU0FBUyxJQUFJLENBQUNBLE9BQU87UUFDckJMO0lBQ0Y7SUFFQSw0SEFBNEg7SUFDNUgsTUFBTTJCLG9CQUFvQmQscUJBQXFCLENBQUNXLFNBQVNOLE9BQU9DLElBQUksQ0FBQ0ssT0FBT0ksTUFBTSxLQUFLO0lBQ3ZGLE1BQU1DLG9CQUFxQztRQUN6Q0MsY0FBY2pCO1FBQ2RrQixNQUFNO1FBQ05DLFlBQVk7UUFDWkMsUUFBUXBDO1FBQ1JhO1FBQ0FoQjtRQUNBQztRQUNBRztRQUNBNkI7SUFDRjtJQUVBLElBQUksQ0FBQ0EscUJBQXFCLElBQUksQ0FBQ08saUJBQWlCLEtBQUssTUFBTTtRQUN6RCwySEFBMkg7UUFDM0hMLGtCQUFrQk0sZ0JBQWdCLEdBQUc7WUFDbkMsT0FBT0MsUUFBUUMsT0FBTyxDQUNwQnBDLE1BQU1xQyxjQUFjLENBQUNkLE9BQU87Z0JBQzFCZSxNQUFNO29CQUFFQyxLQUFLO2dCQUFFO1lBQ2pCO1FBRUo7SUFDRjtJQUVBLElBQUloRCxRQUFRLEdBQUc7UUFDYnFDLGtCQUFrQnJDLEtBQUssR0FBR0E7UUFDMUIscUVBQXFFO1FBQ3JFcUMsa0JBQWtCbkIsT0FBTyxDQUFDbEIsS0FBSyxHQUFHQTtJQUNwQztJQUVBLE1BQU1pRCxTQUFTLE1BQU14QyxNQUFNeUMsUUFBUSxDQUFDbEIsT0FBT0s7SUFDM0MsTUFBTWMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNMLE9BQU9FLElBQUk7SUFFbEQsT0FBTztRQUNMLEdBQUdGLE1BQU07UUFDVEUsTUFBTUEsS0FBS0ksR0FBRyxDQUFDLENBQUNDO1lBQ2QsNkNBQTZDO1lBQzdDQSxJQUFJQyxFQUFFLEdBQUdELElBQUlSLEdBQUc7WUFDaEIsT0FBT1UsSUFBQUEsK0JBQXNCLEVBQUNGO1FBQ2hDO0lBQ0Y7QUFDRiJ9