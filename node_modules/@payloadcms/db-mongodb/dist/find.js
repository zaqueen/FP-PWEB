"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "find", {
    enumerable: true,
    get: function() {
        return find;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const find = async function find({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const Model = this.collections[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGFnaW5hdGVPcHRpb25zIH0gZnJvbSAnbW9uZ29vc2UnXG5pbXBvcnQgdHlwZSB7IEZpbmQgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgeyBidWlsZFNvcnRQYXJhbSB9IGZyb20gJy4vcXVlcmllcy9idWlsZFNvcnRQYXJhbSdcbmltcG9ydCBzYW5pdGl6ZUludGVybmFsRmllbGRzIGZyb20gJy4vdXRpbGl0aWVzL3Nhbml0aXplSW50ZXJuYWxGaWVsZHMnXG5pbXBvcnQgeyB3aXRoU2Vzc2lvbiB9IGZyb20gJy4vd2l0aFNlc3Npb24nXG5cbmV4cG9ydCBjb25zdCBmaW5kOiBGaW5kID0gYXN5bmMgZnVuY3Rpb24gZmluZChcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGNvbGxlY3Rpb24sIGxpbWl0LCBsb2NhbGUsIHBhZ2UsIHBhZ2luYXRpb24sIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCBzb3J0OiBzb3J0QXJnLCB3aGVyZSB9LFxuKSB7XG4gIGNvbnN0IE1vZGVsID0gdGhpcy5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXVxuICBjb25zdCBjb2xsZWN0aW9uQ29uZmlnID0gdGhpcy5wYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dLmNvbmZpZ1xuICBjb25zdCBvcHRpb25zID0gd2l0aFNlc3Npb24odGhpcywgcmVxLnRyYW5zYWN0aW9uSUQpXG5cbiAgbGV0IGhhc05lYXJDb25zdHJhaW50ID0gZmFsc2VcblxuICBpZiAod2hlcmUpIHtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzKHdoZXJlKVxuICAgIGhhc05lYXJDb25zdHJhaW50ID0gY29uc3RyYWludHMuc29tZSgocHJvcCkgPT4gT2JqZWN0LmtleXMocHJvcCkuc29tZSgoa2V5KSA9PiBrZXkgPT09ICduZWFyJykpXG4gIH1cblxuICBsZXQgc29ydFxuICBpZiAoIWhhc05lYXJDb25zdHJhaW50KSB7XG4gICAgc29ydCA9IGJ1aWxkU29ydFBhcmFtKHtcbiAgICAgIGNvbmZpZzogdGhpcy5wYXlsb2FkLmNvbmZpZyxcbiAgICAgIGZpZWxkczogY29sbGVjdGlvbkNvbmZpZy5maWVsZHMsXG4gICAgICBsb2NhbGUsXG4gICAgICBzb3J0OiBzb3J0QXJnIHx8IGNvbGxlY3Rpb25Db25maWcuZGVmYXVsdFNvcnQsXG4gICAgICB0aW1lc3RhbXBzOiB0cnVlLFxuICAgIH0pXG4gIH1cblxuICBjb25zdCBxdWVyeSA9IGF3YWl0IE1vZGVsLmJ1aWxkUXVlcnkoe1xuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQsXG4gICAgd2hlcmUsXG4gIH0pXG5cbiAgLy8gdXNlRXN0aW1hdGVkQ291bnQgaXMgZmFzdGVyLCBidXQgbm90IGFjY3VyYXRlLCBhcyBpdCBpZ25vcmVzIGFueSBmaWx0ZXJzLiBJdCBpcyB0aHVzIHNldCB0byB0cnVlIGlmIHRoZXJlIGFyZSBubyBmaWx0ZXJzLlxuICBjb25zdCB1c2VFc3RpbWF0ZWRDb3VudCA9IGhhc05lYXJDb25zdHJhaW50IHx8ICFxdWVyeSB8fCBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb3B0aW9ucyxcbiAgICBwYWdlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgc29ydCxcbiAgICB1c2VFc3RpbWF0ZWRDb3VudCxcbiAgfVxuXG4gIGlmICghdXNlRXN0aW1hdGVkQ291bnQgJiYgdGhpcy5kaXNhYmxlSW5kZXhIaW50cyAhPT0gdHJ1ZSkge1xuICAgIC8vIEltcHJvdmUgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBjb3VudERvY3VtZW50cyBxdWVyeSB3aGljaCBpcyB1c2VkIGlmIHVzZUVzdGltYXRlZENvdW50IGlzIHNldCB0byBmYWxzZSBieSBhZGRpbmcgYSBoaW50LlxuICAgIHBhZ2luYXRpb25PcHRpb25zLnVzZUN1c3RvbUNvdW50Rm4gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICBNb2RlbC5jb3VudERvY3VtZW50cyhxdWVyeSwge1xuICAgICAgICAgIGhpbnQ6IHsgX2lkOiAxIH0sXG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGlmIChsaW1pdCA+IDApIHtcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy5saW1pdCA9IGxpbWl0XG4gICAgLy8gbGltaXQgbXVzdCBhbHNvIGJlIHNldCBoZXJlLCBpdCdzIGlnbm9yZWQgd2hlbiBwYWdpbmF0aW9uIGlzIGZhbHNlXG4gICAgcGFnaW5hdGlvbk9wdGlvbnMub3B0aW9ucy5saW1pdCA9IGxpbWl0XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBNb2RlbC5wYWdpbmF0ZShxdWVyeSwgcGFnaW5hdGlvbk9wdGlvbnMpXG4gIGNvbnN0IGRvY3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3VsdC5kb2NzKSlcblxuICByZXR1cm4ge1xuICAgIC4uLnJlc3VsdCxcbiAgICBkb2NzOiBkb2NzLm1hcCgoZG9jKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGRvYy5pZCA9IGRvYy5faWRcbiAgICAgIHJldHVybiBzYW5pdGl6ZUludGVybmFsRmllbGRzKGRvYylcbiAgICB9KSxcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZpbmQiLCJjb2xsZWN0aW9uIiwibGltaXQiLCJsb2NhbGUiLCJwYWdlIiwicGFnaW5hdGlvbiIsInJlcSIsInNvcnQiLCJzb3J0QXJnIiwid2hlcmUiLCJNb2RlbCIsImNvbGxlY3Rpb25zIiwiY29sbGVjdGlvbkNvbmZpZyIsInBheWxvYWQiLCJjb25maWciLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJ0cmFuc2FjdGlvbklEIiwiaGFzTmVhckNvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsImZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIiwic29tZSIsInByb3AiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiYnVpbGRTb3J0UGFyYW0iLCJmaWVsZHMiLCJkZWZhdWx0U29ydCIsInRpbWVzdGFtcHMiLCJxdWVyeSIsImJ1aWxkUXVlcnkiLCJ1c2VFc3RpbWF0ZWRDb3VudCIsImxlbmd0aCIsInBhZ2luYXRpb25PcHRpb25zIiwiZm9yY2VDb3VudEZuIiwibGVhbiIsImxlYW5XaXRoSWQiLCJkaXNhYmxlSW5kZXhIaW50cyIsInVzZUN1c3RvbUNvdW50Rm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvdW50RG9jdW1lbnRzIiwiaGludCIsIl9pZCIsInJlc3VsdCIsInBhZ2luYXRlIiwiZG9jcyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm1hcCIsImRvYyIsImlkIiwic2FuaXRpemVJbnRlcm5hbEZpZWxkcyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFZYUE7OztlQUFBQTs7OzBCQVIyQjtnQ0FJVDsrRUFDSTs2QkFDUDs7Ozs7O0FBRXJCLE1BQU1BLE9BQWEsZUFBZUEsS0FFdkMsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sQ0FBQyxDQUFtQixFQUFFQyxNQUFNQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtJQUVqRyxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsV0FBVyxDQUFDVixXQUFXO0lBQzFDLE1BQU1XLG1CQUFtQixJQUFJLENBQUNDLE9BQU8sQ0FBQ0YsV0FBVyxDQUFDVixXQUFXLENBQUNhLE1BQU07SUFDcEUsTUFBTUMsVUFBVUMsSUFBQUEsd0JBQVcsRUFBQyxJQUFJLEVBQUVWLElBQUlXLGFBQWE7SUFFbkQsSUFBSUMsb0JBQW9CO0lBRXhCLElBQUlULE9BQU87UUFDVCxNQUFNVSxjQUFjQyxJQUFBQSxpQ0FBdUIsRUFBQ1g7UUFDNUNTLG9CQUFvQkMsWUFBWUUsSUFBSSxDQUFDLENBQUNDLE9BQVNDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsSUFBSSxDQUFDLENBQUNJLE1BQVFBLFFBQVE7SUFDekY7SUFFQSxJQUFJbEI7SUFDSixJQUFJLENBQUNXLG1CQUFtQjtRQUN0QlgsT0FBT21CLElBQUFBLDhCQUFjLEVBQUM7WUFDcEJaLFFBQVEsSUFBSSxDQUFDRCxPQUFPLENBQUNDLE1BQU07WUFDM0JhLFFBQVFmLGlCQUFpQmUsTUFBTTtZQUMvQnhCO1lBQ0FJLE1BQU1DLFdBQVdJLGlCQUFpQmdCLFdBQVc7WUFDN0NDLFlBQVk7UUFDZDtJQUNGO0lBRUEsTUFBTUMsUUFBUSxNQUFNcEIsTUFBTXFCLFVBQVUsQ0FBQztRQUNuQzVCO1FBQ0FVLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1FBQ3JCSjtJQUNGO0lBRUEsNEhBQTRIO0lBQzVILE1BQU11QixvQkFBb0JkLHFCQUFxQixDQUFDWSxTQUFTUCxPQUFPQyxJQUFJLENBQUNNLE9BQU9HLE1BQU0sS0FBSztJQUN2RixNQUFNQyxvQkFBcUM7UUFDekNDLGNBQWNqQjtRQUNka0IsTUFBTTtRQUNOQyxZQUFZO1FBQ1p0QjtRQUNBWDtRQUNBQztRQUNBRTtRQUNBeUI7SUFDRjtJQUVBLElBQUksQ0FBQ0EscUJBQXFCLElBQUksQ0FBQ00saUJBQWlCLEtBQUssTUFBTTtRQUN6RCwySEFBMkg7UUFDM0hKLGtCQUFrQkssZ0JBQWdCLEdBQUc7WUFDbkMsT0FBT0MsUUFBUUMsT0FBTyxDQUNwQi9CLE1BQU1nQyxjQUFjLENBQUNaLE9BQU87Z0JBQzFCYSxNQUFNO29CQUFFQyxLQUFLO2dCQUFFO1lBQ2pCO1FBRUo7SUFDRjtJQUVBLElBQUkxQyxRQUFRLEdBQUc7UUFDYmdDLGtCQUFrQmhDLEtBQUssR0FBR0E7UUFDMUIscUVBQXFFO1FBQ3JFZ0Msa0JBQWtCbkIsT0FBTyxDQUFDYixLQUFLLEdBQUdBO0lBQ3BDO0lBRUEsTUFBTTJDLFNBQVMsTUFBTW5DLE1BQU1vQyxRQUFRLENBQUNoQixPQUFPSTtJQUMzQyxNQUFNYSxPQUFPQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ0wsT0FBT0UsSUFBSTtJQUVsRCxPQUFPO1FBQ0wsR0FBR0YsTUFBTTtRQUNURSxNQUFNQSxLQUFLSSxHQUFHLENBQUMsQ0FBQ0M7WUFDZCw2Q0FBNkM7WUFDN0NBLElBQUlDLEVBQUUsR0FBR0QsSUFBSVIsR0FBRztZQUNoQixPQUFPVSxJQUFBQSwrQkFBc0IsRUFBQ0Y7UUFDaEM7SUFDRjtBQUNGIn0=