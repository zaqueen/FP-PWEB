"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    recurseRichText: function() {
        return recurseRichText;
    },
    richTextRelationshipPromise: function() {
        return richTextRelationshipPromise;
    }
});
const _populate = require("./populate");
const _recurseNestedFields = require("./recurseNestedFields");
const recurseRichText = ({ children, currentDepth = 0, depth, field, overrideAccess = false, promises, req, showHiddenFields })=>{
    if (depth <= 0 || currentDepth > depth) {
        return;
    }
    if (Array.isArray(children)) {
        children.forEach((element)=>{
            if ((element.type === 'relationship' || element.type === 'upload') && element?.value?.id) {
                const collection = req.payload.collections[element?.relationTo];
                if (collection) {
                    promises.push((0, _populate.populate)({
                        id: element.value.id,
                        collection,
                        currentDepth,
                        data: element,
                        depth,
                        field,
                        key: 'value',
                        overrideAccess,
                        req,
                        showHiddenFields
                    }));
                }
                if (element.type === 'upload' && Array.isArray(field.admin?.upload?.collections?.[element?.relationTo]?.fields)) {
                    (0, _recurseNestedFields.recurseNestedFields)({
                        currentDepth,
                        data: element.fields || {},
                        depth,
                        fields: field.admin.upload.collections[element.relationTo].fields,
                        overrideAccess,
                        promises,
                        req,
                        showHiddenFields
                    });
                }
            }
            if (element.type === 'link') {
                if (element?.doc?.value && element?.doc?.relationTo) {
                    const collection = req.payload.collections[element?.doc?.relationTo];
                    if (collection) {
                        promises.push((0, _populate.populate)({
                            id: element.doc.value,
                            collection,
                            currentDepth,
                            data: element.doc,
                            depth,
                            field,
                            key: 'value',
                            overrideAccess,
                            req,
                            showHiddenFields
                        }));
                    }
                }
                if (Array.isArray(field.admin?.link?.fields)) {
                    (0, _recurseNestedFields.recurseNestedFields)({
                        currentDepth,
                        data: element.fields || {},
                        depth,
                        fields: field.admin?.link?.fields,
                        overrideAccess,
                        promises,
                        req,
                        showHiddenFields
                    });
                }
            }
            if (element?.children) {
                recurseRichText({
                    children: element.children,
                    currentDepth,
                    depth,
                    field,
                    overrideAccess,
                    promises,
                    req,
                    showHiddenFields
                });
            }
        });
    }
};
const richTextRelationshipPromise = async ({ currentDepth, depth, field, overrideAccess, req, showHiddenFields, siblingDoc })=>{
    const promises = [];
    recurseRichText({
        children: siblingDoc[field.name],
        currentDepth,
        depth,
        field,
        overrideAccess,
        promises,
        req,
        showHiddenFields
    });
    await Promise.all(promises);
};

//# sourceMappingURL=data:application/json;base64,