"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "recurseNestedFields", {
    enumerable: true,
    get: function() {
        return recurseNestedFields;
    }
});
const _types = require("payload/types");
const _populate = require("./populate");
const _richTextRelationshipPromise = require("./richTextRelationshipPromise");
const recurseNestedFields = ({ currentDepth = 0, data, depth, fields, overrideAccess = false, promises, req, showHiddenFields })=>{
    fields.forEach((field)=>{
        if (field.type === 'relationship' || field.type === 'upload') {
            if (field.type === 'relationship') {
                if (field.hasMany && Array.isArray(data[field.name])) {
                    if (Array.isArray(field.relationTo)) {
                        data[field.name].forEach(({ relationTo, value }, i)=>{
                            const collection = req.payload.collections[relationTo];
                            if (collection) {
                                promises.push((0, _populate.populate)({
                                    id: value,
                                    collection,
                                    currentDepth,
                                    data: data[field.name],
                                    depth,
                                    field,
                                    key: i,
                                    overrideAccess,
                                    req,
                                    showHiddenFields
                                }));
                            }
                        });
                    } else {
                        data[field.name].forEach((id, i)=>{
                            const collection = req.payload.collections[field.relationTo];
                            if (collection) {
                                promises.push((0, _populate.populate)({
                                    id,
                                    collection,
                                    currentDepth,
                                    data: data[field.name],
                                    depth,
                                    field,
                                    key: i,
                                    overrideAccess,
                                    req,
                                    showHiddenFields
                                }));
                            }
                        });
                    }
                } else if (Array.isArray(field.relationTo) && data[field.name]?.value && data[field.name]?.relationTo) {
                    if (!('hasMany' in field) || !field.hasMany) {
                        const collection = req.payload.collections[data[field.name].relationTo];
                        promises.push((0, _populate.populate)({
                            id: data[field.name].value,
                            collection,
                            currentDepth,
                            data: data[field.name],
                            depth,
                            field,
                            key: 'value',
                            overrideAccess,
                            req,
                            showHiddenFields
                        }));
                    }
                }
            }
            if (typeof data[field.name] !== 'undefined' && typeof field.relationTo === 'string') {
                const collection = req.payload.collections[field.relationTo];
                promises.push((0, _populate.populate)({
                    id: data[field.name],
                    collection,
                    currentDepth,
                    data,
                    depth,
                    field,
                    key: field.name,
                    overrideAccess,
                    req,
                    showHiddenFields
                }));
            }
        } else if ((0, _types.fieldHasSubFields)(field) && !(0, _types.fieldIsArrayType)(field)) {
            if ((0, _types.fieldAffectsData)(field) && typeof data[field.name] === 'object') {
                recurseNestedFields({
                    currentDepth,
                    data: data[field.name],
                    depth,
                    fields: field.fields,
                    overrideAccess,
                    promises,
                    req,
                    showHiddenFields
                });
            } else {
                recurseNestedFields({
                    currentDepth,
                    data,
                    depth,
                    fields: field.fields,
                    overrideAccess,
                    promises,
                    req,
                    showHiddenFields
                });
            }
        } else if (field.type === 'tabs') {
            field.tabs.forEach((tab)=>{
                recurseNestedFields({
                    currentDepth,
                    data,
                    depth,
                    fields: tab.fields,
                    overrideAccess,
                    promises,
                    req,
                    showHiddenFields
                });
            });
        } else if (Array.isArray(data[field.name])) {
            if (field.type === 'blocks') {
                data[field.name].forEach((row, i)=>{
                    const block = field.blocks.find(({ slug })=>slug === row?.blockType);
                    if (block) {
                        recurseNestedFields({
                            currentDepth,
                            data: data[field.name][i],
                            depth,
                            fields: block.fields,
                            overrideAccess,
                            promises,
                            req,
                            showHiddenFields
                        });
                    }
                });
            }
            if (field.type === 'array') {
                data[field.name].forEach((_, i)=>{
                    recurseNestedFields({
                        currentDepth,
                        data: data[field.name][i],
                        depth,
                        fields: field.fields,
                        overrideAccess,
                        promises,
                        req,
                        showHiddenFields
                    });
                });
            }
        }
        if (field.type === 'richText' && Array.isArray(data[field.name])) {
            data[field.name].forEach((node)=>{
                if (Array.isArray(node.children)) {
                    (0, _richTextRelationshipPromise.recurseRichText)({
                        children: node.children,
                        currentDepth,
                        depth,
                        field,
                        overrideAccess,
                        promises,
                        req,
                        showHiddenFields
                    });
                }
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhL3JlY3Vyc2VOZXN0ZWRGaWVsZHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGaWVsZCwgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgeyBmaWVsZEFmZmVjdHNEYXRhLCBmaWVsZEhhc1N1YkZpZWxkcywgZmllbGRJc0FycmF5VHlwZSB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHBvcHVsYXRlIH0gZnJvbSAnLi9wb3B1bGF0ZSdcbmltcG9ydCB7IHJlY3Vyc2VSaWNoVGV4dCB9IGZyb20gJy4vcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlJ1xuXG50eXBlIE5lc3RlZFJpY2hUZXh0RmllbGRzQXJncyA9IHtcbiAgY3VycmVudERlcHRoPzogbnVtYmVyXG4gIGRhdGE6IHVua25vd25cbiAgZGVwdGg6IG51bWJlclxuICBmaWVsZHM6IEZpZWxkW11cbiAgb3ZlcnJpZGVBY2Nlc3M6IGJvb2xlYW5cbiAgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXVxuICByZXE6IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHJlY3Vyc2VOZXN0ZWRGaWVsZHMgPSAoe1xuICBjdXJyZW50RGVwdGggPSAwLFxuICBkYXRhLFxuICBkZXB0aCxcbiAgZmllbGRzLFxuICBvdmVycmlkZUFjY2VzcyA9IGZhbHNlLFxuICBwcm9taXNlcyxcbiAgcmVxLFxuICBzaG93SGlkZGVuRmllbGRzLFxufTogTmVzdGVkUmljaFRleHRGaWVsZHNBcmdzKTogdm9pZCA9PiB7XG4gIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC50eXBlID09PSAncmVsYXRpb25zaGlwJyB8fCBmaWVsZC50eXBlID09PSAndXBsb2FkJykge1xuICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdyZWxhdGlvbnNoaXAnKSB7XG4gICAgICAgIGlmIChmaWVsZC5oYXNNYW55ICYmIEFycmF5LmlzQXJyYXkoZGF0YVtmaWVsZC5uYW1lXSkpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZC5yZWxhdGlvblRvKSkge1xuICAgICAgICAgICAgZGF0YVtmaWVsZC5uYW1lXS5mb3JFYWNoKCh7IHJlbGF0aW9uVG8sIHZhbHVlIH0sIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHJlcS5wYXlsb2FkLmNvbGxlY3Rpb25zW3JlbGF0aW9uVG9dXG4gICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgICAgIHBvcHVsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGVwdGgsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFbZmllbGQubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBpLFxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhW2ZpZWxkLm5hbWVdLmZvckVhY2goKGlkLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSByZXEucGF5bG9hZC5jb2xsZWN0aW9uc1tmaWVsZC5yZWxhdGlvblRvIGFzIHN0cmluZ11cbiAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgcG9wdWxhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhW2ZpZWxkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgQXJyYXkuaXNBcnJheShmaWVsZC5yZWxhdGlvblRvKSAmJlxuICAgICAgICAgIGRhdGFbZmllbGQubmFtZV0/LnZhbHVlICYmXG4gICAgICAgICAgZGF0YVtmaWVsZC5uYW1lXT8ucmVsYXRpb25Ub1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoISgnaGFzTWFueScgaW4gZmllbGQpIHx8ICFmaWVsZC5oYXNNYW55KSB7XG4gICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gcmVxLnBheWxvYWQuY29sbGVjdGlvbnNbZGF0YVtmaWVsZC5uYW1lXS5yZWxhdGlvblRvXVxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgcG9wdWxhdGUoe1xuICAgICAgICAgICAgICAgIGlkOiBkYXRhW2ZpZWxkLm5hbWVdLnZhbHVlLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFbZmllbGQubmFtZV0sXG4gICAgICAgICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAga2V5OiAndmFsdWUnLFxuICAgICAgICAgICAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZGF0YVtmaWVsZC5uYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGZpZWxkLnJlbGF0aW9uVG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSByZXEucGF5bG9hZC5jb2xsZWN0aW9uc1tmaWVsZC5yZWxhdGlvblRvXVxuICAgICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICAgIHBvcHVsYXRlKHtcbiAgICAgICAgICAgIGlkOiBkYXRhW2ZpZWxkLm5hbWVdLFxuICAgICAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAga2V5OiBmaWVsZC5uYW1lLFxuICAgICAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZEhhc1N1YkZpZWxkcyhmaWVsZCkgJiYgIWZpZWxkSXNBcnJheVR5cGUoZmllbGQpKSB7XG4gICAgICBpZiAoZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgdHlwZW9mIGRhdGFbZmllbGQubmFtZV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJlY3Vyc2VOZXN0ZWRGaWVsZHMoe1xuICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICBkYXRhOiBkYXRhW2ZpZWxkLm5hbWVdLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIGZpZWxkczogZmllbGQuZmllbGRzLFxuICAgICAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgICAgIHByb21pc2VzLFxuICAgICAgICAgIHJlcSxcbiAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjdXJzZU5lc3RlZEZpZWxkcyh7XG4gICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgZmllbGRzOiBmaWVsZC5maWVsZHMsXG4gICAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgICAgcHJvbWlzZXMsXG4gICAgICAgICAgcmVxLFxuICAgICAgICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09PSAndGFicycpIHtcbiAgICAgIGZpZWxkLnRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XG4gICAgICAgIHJlY3Vyc2VOZXN0ZWRGaWVsZHMoe1xuICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIGZpZWxkczogdGFiLmZpZWxkcyxcbiAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICBwcm9taXNlcyxcbiAgICAgICAgICByZXEsXG4gICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGFbZmllbGQubmFtZV0pKSB7XG4gICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ2Jsb2NrcycpIHtcbiAgICAgICAgZGF0YVtmaWVsZC5uYW1lXS5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBibG9jayA9IGZpZWxkLmJsb2Nrcy5maW5kKCh7IHNsdWcgfSkgPT4gc2x1ZyA9PT0gcm93Py5ibG9ja1R5cGUpXG4gICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICByZWN1cnNlTmVzdGVkRmllbGRzKHtcbiAgICAgICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgICAgICBkYXRhOiBkYXRhW2ZpZWxkLm5hbWVdW2ldLFxuICAgICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgICAgZmllbGRzOiBibG9jay5maWVsZHMsXG4gICAgICAgICAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgICAgICAgICBwcm9taXNlcyxcbiAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC50eXBlID09PSAnYXJyYXknKSB7XG4gICAgICAgIGRhdGFbZmllbGQubmFtZV0uZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgICAgIHJlY3Vyc2VOZXN0ZWRGaWVsZHMoe1xuICAgICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgICAgZGF0YTogZGF0YVtmaWVsZC5uYW1lXVtpXSxcbiAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgZmllbGRzOiBmaWVsZC5maWVsZHMsXG4gICAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICAgIHByb21pc2VzLFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaWVsZC50eXBlID09PSAncmljaFRleHQnICYmIEFycmF5LmlzQXJyYXkoZGF0YVtmaWVsZC5uYW1lXSkpIHtcbiAgICAgIGRhdGFbZmllbGQubmFtZV0uZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICAgIHJlY3Vyc2VSaWNoVGV4dCh7XG4gICAgICAgICAgICBjaGlsZHJlbjogbm9kZS5jaGlsZHJlbixcbiAgICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICAgIHByb21pc2VzLFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWN1cnNlTmVzdGVkRmllbGRzIiwiY3VycmVudERlcHRoIiwiZGF0YSIsImRlcHRoIiwiZmllbGRzIiwib3ZlcnJpZGVBY2Nlc3MiLCJwcm9taXNlcyIsInJlcSIsInNob3dIaWRkZW5GaWVsZHMiLCJmb3JFYWNoIiwiZmllbGQiLCJ0eXBlIiwiaGFzTWFueSIsIkFycmF5IiwiaXNBcnJheSIsIm5hbWUiLCJyZWxhdGlvblRvIiwidmFsdWUiLCJpIiwiY29sbGVjdGlvbiIsInBheWxvYWQiLCJjb2xsZWN0aW9ucyIsInB1c2giLCJwb3B1bGF0ZSIsImlkIiwia2V5IiwiZmllbGRIYXNTdWJGaWVsZHMiLCJmaWVsZElzQXJyYXlUeXBlIiwiZmllbGRBZmZlY3RzRGF0YSIsInRhYnMiLCJ0YWIiLCJyb3ciLCJibG9jayIsImJsb2NrcyIsImZpbmQiLCJzbHVnIiwiYmxvY2tUeXBlIiwiXyIsIm5vZGUiLCJjaGlsZHJlbiIsInJlY3Vyc2VSaWNoVGV4dCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFrQmFBOzs7ZUFBQUE7Ozt1QkFoQnlEOzBCQUU3Qzs2Q0FDTztBQWF6QixNQUFNQSxzQkFBc0IsQ0FBQyxFQUNsQ0MsZUFBZSxDQUFDLEVBQ2hCQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsTUFBTSxFQUNOQyxpQkFBaUIsS0FBSyxFQUN0QkMsUUFBUSxFQUNSQyxHQUFHLEVBQ0hDLGdCQUFnQixFQUNTO0lBQ3pCSixPQUFPSyxPQUFPLENBQUMsQ0FBQ0M7UUFDZCxJQUFJQSxNQUFNQyxJQUFJLEtBQUssa0JBQWtCRCxNQUFNQyxJQUFJLEtBQUssVUFBVTtZQUM1RCxJQUFJRCxNQUFNQyxJQUFJLEtBQUssZ0JBQWdCO2dCQUNqQyxJQUFJRCxNQUFNRSxPQUFPLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1osSUFBSSxDQUFDUSxNQUFNSyxJQUFJLENBQUMsR0FBRztvQkFDcEQsSUFBSUYsTUFBTUMsT0FBTyxDQUFDSixNQUFNTSxVQUFVLEdBQUc7d0JBQ25DZCxJQUFJLENBQUNRLE1BQU1LLElBQUksQ0FBQyxDQUFDTixPQUFPLENBQUMsQ0FBQyxFQUFFTyxVQUFVLEVBQUVDLEtBQUssRUFBRSxFQUFFQzs0QkFDL0MsTUFBTUMsYUFBYVosSUFBSWEsT0FBTyxDQUFDQyxXQUFXLENBQUNMLFdBQVc7NEJBQ3RELElBQUlHLFlBQVk7Z0NBQ2RiLFNBQVNnQixJQUFJLENBQ1hDLElBQUFBLGtCQUFRLEVBQUM7b0NBQ1BDLElBQUlQO29DQUNKRTtvQ0FDQWxCO29DQUNBQyxNQUFNQSxJQUFJLENBQUNRLE1BQU1LLElBQUksQ0FBQztvQ0FDdEJaO29DQUNBTztvQ0FDQWUsS0FBS1A7b0NBQ0xiO29DQUNBRTtvQ0FDQUM7Z0NBQ0Y7NEJBRUo7d0JBQ0Y7b0JBQ0YsT0FBTzt3QkFDTE4sSUFBSSxDQUFDUSxNQUFNSyxJQUFJLENBQUMsQ0FBQ04sT0FBTyxD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