"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _slate = require("slate");
const _slatehyperscript = require("slate-hyperscript");
const ELEMENT_TAGS = {
    A: (el)=>({
            newTab: el.getAttribute('target') === '_blank',
            type: 'link',
            url: el.getAttribute('href')
        }),
    BLOCKQUOTE: ()=>({
            type: 'blockquote'
        }),
    H1: ()=>({
            type: 'h1'
        }),
    H2: ()=>({
            type: 'h2'
        }),
    H3: ()=>({
            type: 'h3'
        }),
    H4: ()=>({
            type: 'h4'
        }),
    H5: ()=>({
            type: 'h5'
        }),
    H6: ()=>({
            type: 'h6'
        }),
    LI: ()=>({
            type: 'li'
        }),
    OL: ()=>({
            type: 'ol'
        }),
    P: ()=>({}),
    PRE: ()=>({
            type: 'code'
        }),
    UL: ()=>({
            type: 'ul'
        })
};
const TEXT_TAGS = {
    CODE: ()=>({
            code: true
        }),
    DEL: ()=>({
            strikethrough: true
        }),
    EM: ()=>({
            italic: true
        }),
    I: ()=>({
            italic: true
        }),
    S: ()=>({
            strikethrough: true
        }),
    STRONG: ()=>({
            bold: true
        }),
    U: ()=>({
            underline: true
        })
};
const deserialize = (el)=>{
    if (el.nodeType === 3) {
        return el.textContent;
    }
    if (el.nodeType !== 1) {
        return null;
    }
    if (el.nodeName === 'BR') {
        return '\n';
    }
    const { nodeName } = el;
    let parent = el;
    if (nodeName === 'PRE' && el.childNodes[0] && el.childNodes[0].nodeName === 'CODE') {
        [parent] = el.childNodes;
    }
    let children = Array.from(parent.childNodes).map(deserialize).flat();
    if (children.length === 0) {
        children = [
            {
                text: ''
            }
        ];
    }
    if (el.nodeName === 'BODY') {
        return (0, _slatehyperscript.jsx)('fragment', {}, children);
    }
    if (ELEMENT_TAGS[nodeName]) {
        const attrs = ELEMENT_TAGS[nodeName](el);
        return (0, _slatehyperscript.jsx)('element', attrs, children);
    }
    if (TEXT_TAGS[nodeName]) {
        const attrs = TEXT_TAGS[nodeName](el);
        return children.map((child)=>(0, _slatehyperscript.jsx)('text', attrs, child));
    }
    return children;
};
const withHTML = (incomingEditor)=>{
    const { insertData } = incomingEditor;
    const editor = incomingEditor;
    editor.insertData = (data)=>{
        if (!data.types.includes('application/x-slate-fragment')) {
            const html = data.getData('text/html');
            if (html) {
                const parsed = new DOMParser().parseFromString(html, 'text/html');
                const fragment = deserialize(parsed.body);
                _slate.Transforms.insertFragment(editor, fragment);
                return;
            }
        }
        insertData(data);
    };
    return editor;
};
const _default = withHTML;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWVsZC9wbHVnaW5zL3dpdGhIVE1MLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2Zvcm1zIH0gZnJvbSAnc2xhdGUnXG5pbXBvcnQgeyBqc3ggfSBmcm9tICdzbGF0ZS1oeXBlcnNjcmlwdCdcblxuY29uc3QgRUxFTUVOVF9UQUdTID0ge1xuICBBOiAoZWwpID0+ICh7XG4gICAgbmV3VGFiOiBlbC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpID09PSAnX2JsYW5rJyxcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdXJsOiBlbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSxcbiAgfSksXG4gIEJMT0NLUVVPVEU6ICgpID0+ICh7IHR5cGU6ICdibG9ja3F1b3RlJyB9KSxcbiAgSDE6ICgpID0+ICh7IHR5cGU6ICdoMScgfSksXG4gIEgyOiAoKSA9PiAoeyB0eXBlOiAnaDInIH0pLFxuICBIMzogKCkgPT4gKHsgdHlwZTogJ2gzJyB9KSxcbiAgSDQ6ICgpID0+ICh7IHR5cGU6ICdoNCcgfSksXG4gIEg1OiAoKSA9PiAoeyB0eXBlOiAnaDUnIH0pLFxuICBINjogKCkgPT4gKHsgdHlwZTogJ2g2JyB9KSxcbiAgTEk6ICgpID0+ICh7IHR5cGU6ICdsaScgfSksXG4gIE9MOiAoKSA9PiAoeyB0eXBlOiAnb2wnIH0pLFxuICBQOiAoKSA9PiAoe30pLFxuICBQUkU6ICgpID0+ICh7IHR5cGU6ICdjb2RlJyB9KSxcbiAgVUw6ICgpID0+ICh7IHR5cGU6ICd1bCcgfSksXG59XG5cbmNvbnN0IFRFWFRfVEFHUyA9IHtcbiAgQ09ERTogKCkgPT4gKHsgY29kZTogdHJ1ZSB9KSxcbiAgREVMOiAoKSA9PiAoeyBzdHJpa2V0aHJvdWdoOiB0cnVlIH0pLFxuICBFTTogKCkgPT4gKHsgaXRhbGljOiB0cnVlIH0pLFxuICBJOiAoKSA9PiAoeyBpdGFsaWM6IHRydWUgfSksXG4gIFM6ICgpID0+ICh7IHN0cmlrZXRocm91Z2g6IHRydWUgfSksXG4gIFNUUk9ORzogKCkgPT4gKHsgYm9sZDogdHJ1ZSB9KSxcbiAgVTogKCkgPT4gKHsgdW5kZXJsaW5lOiB0cnVlIH0pLFxufVxuXG5jb25zdCBkZXNlcmlhbGl6ZSA9IChlbCkgPT4ge1xuICBpZiAoZWwubm9kZVR5cGUgPT09IDMpIHtcbiAgICByZXR1cm4gZWwudGV4dENvbnRlbnRcbiAgfVxuICBpZiAoZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGlmIChlbC5ub2RlTmFtZSA9PT0gJ0JSJykge1xuICAgIHJldHVybiAnXFxuJ1xuICB9XG5cbiAgY29uc3QgeyBub2RlTmFtZSB9ID0gZWxcbiAgbGV0IHBhcmVudCA9IGVsXG5cbiAgaWYgKG5vZGVOYW1lID09PSAnUFJFJyAmJiBlbC5jaGlsZE5vZGVzWzBdICYmIGVsLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUgPT09ICdDT0RFJykge1xuICAgIDtbcGFyZW50XSA9IGVsLmNoaWxkTm9kZXNcbiAgfVxuXG4gIGxldCBjaGlsZHJlbiA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkTm9kZXMpLm1hcChkZXNlcmlhbGl6ZSkuZmxhdCgpXG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgIGNoaWxkcmVuID0gW3sgdGV4dDogJycgfV1cbiAgfVxuXG4gIGlmIChlbC5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGpzeCgnZnJhZ21lbnQnLCB7fSwgY2hpbGRyZW4pXG4gIH1cblxuICBpZiAoRUxFTUVOVF9UQUdTW25vZGVOYW1lXSkge1xuICAgIGNvbnN0IGF0dHJzID0gRUxFTUVOVF9UQUdTW25vZGVOYW1lXShlbClcbiAgICByZXR1cm4ganN4KCdlbGVtZW50JywgYXR0cnMsIGNoaWxkcmVuKVxuICB9XG5cbiAgaWYgKFRFWFRfVEFHU1tub2RlTmFtZV0pIHtcbiAgICBjb25zdCBhdHRycyA9IFRFWFRfVEFHU1tub2RlTmFtZV0oZWwpXG4gICAgcmV0dXJuIGNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IGpzeCgndGV4dCcsIGF0dHJzLCBjaGlsZCkpXG4gIH1cblxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuY29uc3Qgd2l0aEhUTUwgPSAoaW5jb21pbmdFZGl0b3IpID0+IHtcbiAgY29uc3QgeyBpbnNlcnREYXRhIH0gPSBpbmNvbWluZ0VkaXRvclxuXG4gIGNvbnN0IGVkaXRvciA9IGluY29taW5nRWRpdG9yXG5cbiAgZWRpdG9yLmluc2VydERhdGEgPSAoZGF0YSkgPT4ge1xuICAgIGlmICghZGF0YS50eXBlcy5pbmNsdWRlcygnYXBwbGljYXRpb24veC1zbGF0ZS1mcmFnbWVudCcpKSB7XG4gICAgICBjb25zdCBodG1sID0gZGF0YS5nZXREYXRhKCd0ZXh0L2h0bWwnKVxuXG4gICAgICBpZiAoaHRtbCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKVxuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGRlc2VyaWFsaXplKHBhcnNlZC5ib2R5KVxuICAgICAgICBUcmFuc2Zvcm1zLmluc2VydEZyYWdtZW50KGVkaXRvciwgZnJhZ21lbnQpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGluc2VydERhdGEoZGF0YSlcbiAgfVxuXG4gIHJldHVybiBlZGl0b3Jcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aEhUTUxcbiJdLCJuYW1lcyI6WyJFTEVNRU5UX1RBR1MiLCJBIiwiZWwiLCJuZXdUYWIiLCJnZXRBdHRyaWJ1dGUiLCJ0eXBlIiwidXJsIiwiQkxPQ0tRVU9URSIsIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiIsIkxJIiwiT0wiLCJQIiwiUFJFIiwiVUwiLCJURVhUX1RBR1MiLCJDT0RFIiwiY29kZSIsIkRFTCIsInN0cmlrZXRocm91Z2giLCJFTSIsIml0YWxpYyIsIkkiLCJTIiwiU1RST05HIiwiYm9sZCIsIlUiLCJ1bmRlcmxpbmUiLCJkZXNlcmlhbGl6ZSIsIm5vZGVUeXBlIiwidGV4dENvbnRlbnQiLCJub2RlTmFtZSIsInBhcmVudCIsImNoaWxkTm9kZXMiLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsIm1hcCIsImZsYXQiLCJsZW5ndGgiLCJ0ZXh0IiwianN4IiwiYXR0cnMiLCJjaGlsZCIsIndpdGhIVE1MIiwiaW5jb21pbmdFZGl0b3IiLCJpbnNlcnREYXRhIiwiZWRpdG9yIiwiZGF0YSIsInR5cGVzIiwiaW5jbHVkZXMiLCJodG1sIiwiZ2V0RGF0YSIsInBhcnNlZCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImZyYWdtZW50IiwiYm9keSIsIlRyYW5zZm9ybXMiLCJpbnNlcnRGcmFnbWVudCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFpR0E7OztlQUFBOzs7dUJBakcyQjtrQ0FDUDtBQUVwQixNQUFNQSxlQUFlO0lBQ25CQyxHQUFHLENBQUNDLEtBQVEsQ0FBQTtZQUNWQyxRQUFRRCxHQUFHRSxZQUFZLENBQUMsY0FBYztZQUN0Q0MsTUFBTTtZQUNOQyxLQUFLSixHQUFHRSxZQUFZLENBQUM7UUFDdkIsQ0FBQTtJQUNBRyxZQUFZLElBQU8sQ0FBQTtZQUFFRixNQUFNO1FBQWEsQ0FBQTtJQUN4Q0csSUFBSSxJQUFPLENBQUE7WUFBRUgsTUFBTTtRQUFLLENBQUE7SUFDeEJJLElBQUksSUFBTyxDQUFBO1lBQUVKLE1BQU07UUFBSyxDQUFBO0lBQ3hCSyxJQUFJLElBQU8sQ0FBQTtZQUFFTCxNQUFNO1FBQUssQ0FBQTtJQUN4Qk0sSUFBSSxJQUFPLENBQUE7WUFBRU4sTUFBTTtRQUFLLENBQUE7SUFDeEJPLElBQUksSUFBTyxDQUFBO1lBQUVQLE1BQU07UUFBSyxDQUFBO0lBQ3hCUSxJQUFJLElBQU8sQ0FBQTtZQUFFUixNQUFNO1FBQUssQ0FBQTtJQUN4QlMsSUFBSSxJQUFPLENBQUE7WUFBRVQsTUFBTTtRQUFLLENBQUE7SUFDeEJVLElBQUksSUFBTyxDQUFBO1lBQUVWLE1BQU07UUFBSyxDQUFBO0lBQ3hCVyxHQUFHLElBQU8sQ0FB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