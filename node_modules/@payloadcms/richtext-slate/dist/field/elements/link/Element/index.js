'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LinkElement", {
    enumerable: true,
    get: function() {
        return LinkElement;
    }
});
const _modal = require("@faceless-ui/modal");
const _components = require("payload/components");
const _elements = require("payload/components/elements");
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _config = require("payload/config");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
const _LinkDrawer = require("../LinkDrawer");
const _utilities2 = require("../utilities");
require("./index.scss");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'rich-text-link';
/**
 * This function is called when an existing link is edited.
 * When a link is first created, another function is called: {@link ../Button/index.tsx#insertLink}
 */ const insertChange = (editor, fields, customFieldSchema)=>{
    const data = (0, _forms.reduceFieldsToValues)(fields, true);
    const [, parentPath] = _slate.Editor.above(editor);
    const newNode = {
        doc: data.doc,
        linkType: data.linkType,
        newTab: data.newTab,
        url: data.url
    };
    if (customFieldSchema) {
        newNode.fields = data.fields;
    }
    _slate.Transforms.setNodes(editor, newNode, {
        at: parentPath
    });
    _slate.Transforms.delete(editor, {
        at: editor.selection.focus.path,
        unit: 'block'
    });
    _slate.Transforms.move(editor, {
        distance: 1,
        unit: 'offset'
    });
    _slate.Transforms.insertText(editor, String(data.text), {
        at: editor.selection.focus.path
    });
    _slatereact.ReactEditor.focus(editor);
};
const LinkElement = (props)=>{
    const { attributes, children, editorRef, element, fieldProps } = props;
    const customFieldSchema = fieldProps?.admin?.link?.fields;
    const editor = (0, _slatereact.useSlate)();
    const config = (0, _utilities.useConfig)();
    const { user } = (0, _utilities.useAuth)();
    const { code: locale } = (0, _utilities.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const { closeModal, openModal, toggleModal } = (0, _modal.useModal)();
    const [renderModal, setRenderModal] = (0, _react.useState)(false);
    const [renderPopup, setRenderPopup] = (0, _react.useState)(false);
    const [initialState, setInitialState] = (0, _react.useState)({});
    const { getDocPreferences } = (0, _utilities.useDocumentInfo)();
    const [fieldSchema] = (0, _react.useState)(()=>{
        const fieldsUnsanitized = (0, _utilities2.transformExtraFields)(customFieldSchema, config, i18n);
        // Sanitize custom fields here
        const validRelationships = config.collections.map((c)=>c.slug) || [];
        const fields = (0, _config.sanitizeFields)({
            config: config,
            fields: fieldsUnsanitized,
            validRelationships
        });
        return fields;
    });
    const drawerSlug = (0, _elements.useDrawerSlug)('rich-text-link');
    const handleTogglePopup = (0, _react.useCallback)((render)=>{
        if (!render) {
            setRenderPopup(render);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        const awaitInitialState = async ()=>{
            const data = {
                doc: element.doc,
                fields: (0, _utilities1.deepCopyObject)(element.fields),
                linkType: element.linkType,
                newTab: element.newTab,
                text: _slate.Node.string(element),
                url: element.url
            };
            const preferences = await getDocPreferences();
            const state = await (0, _utilities.buildStateFromSchema)({
                config,
                data,
                fieldSchema,
                locale,
                operation: 'update',
                preferences,
                t,
                user
            });
            setInitialState(state);
        };
        awaitInitialState();
    }, [
        renderModal,
        element,
        fieldSchema,
        user,
        locale,
        t,
        getDocPreferences,
        config
    ]);
    return /*#__PURE__*/ _react.default.createElement("span", {
        className: baseClass,
        ...attributes
    }, /*#__PURE__*/ _react.default.createElement("span", {
        contentEditable: false,
        style: {
            userSelect: 'none'
        }
    }, renderModal && /*#__PURE__*/ _react.default.createElement(_LinkDrawer.LinkDrawer, {
        drawerSlug: drawerSlug,
        fieldSchema: fieldSchema,
        handleClose: ()=>{
            toggleModal(drawerSlug);
            setRenderModal(false);
        },
        handleModalSubmit: (fields)=>{
            insertChange(editor, fields, customFieldSchema);
            closeModal(drawerSlug);
        },
        initialState: initialState
    }), /*#__PURE__*/ _react.default.createElement(_components.Popup, {
        boundingRef: editorRef,
        buttonType: "none",
        forceOpen: renderPopup,
        horizontalAlign: "left",
        onToggleOpen: handleTogglePopup,
        render: ()=>/*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__popup`
            }, element.linkType === 'internal' && element.doc?.relationTo && element.doc?.value && /*#__PURE__*/ _react.default.createElement(_reacti18next.Trans, {
                i18nKey: "fields:linkedTo",
                values: {
                    label: (0, _utilities1.getTranslation)(config.collections.find(({ slug })=>slug === element.doc.relationTo)?.labels?.singular, i18n)
                }
            }, /*#__PURE__*/ _react.default.createElement("a", {
                className: `${baseClass}__link-label`,
                href: `${config.routes.admin}/collections/${element.doc.relationTo}/${element.doc.value}`,
                rel: "noreferrer",
                target: "_blank",
                title: `${config.routes.admin}/collections/${element.doc.relationTo}/${element.doc.value}`
            }, "label")), (element.linkType === 'custom' || !element.linkType) && /*#__PURE__*/ _react.default.createElement("a", {
                className: `${baseClass}__link-label`,
                href: element.url,
                rel: "noreferrer",
                target: "_blank",
                title: element.url
            }, element.url), /*#__PURE__*/ _react.default.createElement(_components.Button, {
                buttonStyle: "icon-label",
                className: `${baseClass}__link-edit`,
                icon: "edit",
                onClick: (e)=>{
                    e.preventDefault();
                    setRenderPopup(false);
                    openModal(drawerSlug);
                    setRenderModal(true);
                },
                round: true,
                tooltip: t('general:edit')
            }), /*#__PURE__*/ _react.default.createElement(_components.Button, {
                buttonStyle: "icon-label",
                className: `${baseClass}__link-close`,
                icon: "x",
                onClick: (e)=>{
                    e.preventDefault();
                    (0, _utilities2.unwrapLink)(editor);
                },
                round: true,
                tooltip: t('general:remove')
            })),
        size: "fit-content",
        verticalAlign: "bottom"
    })), /*#__PURE__*/ _react.default.createElement("span", {
        className: [
            `${baseClass}__popup-toggler`
        ].filter(Boolean).join(' '),
        onClick: ()=>setRenderPopup(true),
        onKeyDown: (e)=>{
            if (e.key === 'Enter') setRenderPopup(true);
        },
        role: "button",
        tabIndex: 0
    }, children));
};

//# sourceMappingURL=data:application/json;base64,