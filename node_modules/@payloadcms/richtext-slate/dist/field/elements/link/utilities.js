"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    unwrapLink: function() {
        return unwrapLink;
    },
    wrapLink: function() {
        return wrapLink;
    },
    withLinks: function() {
        return withLinks;
    },
    transformExtraFields: function() {
        return transformExtraFields;
    }
});
const _slate = require("slate");
const _baseFields = require("./LinkDrawer/baseFields");
const unwrapLink = (editor)=>{
    _slate.Transforms.unwrapNodes(editor, {
        match: (n)=>_slate.Element.isElement(n) && n.type === 'link'
    });
};
const wrapLink = (editor)=>{
    const { selection } = editor;
    const isCollapsed = selection && _slate.Range.isCollapsed(selection);
    const link = {
        children: isCollapsed ? [
            {
                text: ''
            }
        ] : [],
        newTab: false,
        type: 'link',
        url: undefined
    };
    if (isCollapsed) {
        _slate.Transforms.insertNodes(editor, link);
    } else {
        _slate.Transforms.wrapNodes(editor, link, {
            split: true
        });
        _slate.Transforms.collapse(editor, {
            edge: 'end'
        });
    }
};
const withLinks = (incomingEditor)=>{
    const editor = incomingEditor;
    const { isInline } = editor;
    editor.isInline = (element)=>{
        if (element.type === 'link') {
            return true;
        }
        return isInline(element);
    };
    return editor;
};
function transformExtraFields(customFieldSchema, config, i18n) {
    const baseFields = (0, _baseFields.getBaseFields)(config);
    const fields = typeof customFieldSchema === 'function' ? customFieldSchema({
        config,
        defaultFields: baseFields,
        i18n
    }) : baseFields;
    // Wrap fields which are not part of the base schema in a group named 'fields' - otherwise they will be rendered but not saved
    const extraFields = [];
    for(let i = fields.length - 1; i >= 0; i--){
        const field = fields[i];
        if ('name' in field) {
            if (!baseFields.find((baseField)=>!('name' in baseField) || baseField.name === field.name)) {
                if (field.name !== 'fields' && field.type !== 'group') {
                    extraFields.push(field);
                    // Remove from fields from now, as they need to be part of the fields group below
                    fields.splice(fields.indexOf(field), 1);
                }
            }
        }
    }
    if (Array.isArray(customFieldSchema) || fields.length > 0) {
        fields.push({
            name: 'fields',
            admin: {
                style: {
                    borderBottom: 0,
                    borderTop: 0,
                    margin: 0,
                    padding: 0
                }
            },
            fields: Array.isArray(customFieldSchema) ? customFieldSchema.concat(extraFields) : extraFields,
            type: 'group'
        });
    }
    return fields;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9maWVsZC9lbGVtZW50cy9saW5rL3V0aWxpdGllcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBpMThuIH0gZnJvbSAnaTE4bmV4dCdcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29uZmlnIH0gZnJvbSAncGF5bG9hZC9jb25maWcnXG5pbXBvcnQgdHlwZSB7IEZpZWxkIH0gZnJvbSAncGF5bG9hZC90eXBlcydcbmltcG9ydCB0eXBlIHsgRWRpdG9yIH0gZnJvbSAnc2xhdGUnXG5cbmltcG9ydCB7IEVsZW1lbnQsIFJhbmdlLCBUcmFuc2Zvcm1zIH0gZnJvbSAnc2xhdGUnXG5cbmltcG9ydCB7IGdldEJhc2VGaWVsZHMgfSBmcm9tICcuL0xpbmtEcmF3ZXIvYmFzZUZpZWxkcydcblxuZXhwb3J0IGNvbnN0IHVud3JhcExpbmsgPSAoZWRpdG9yOiBFZGl0b3IpOiB2b2lkID0+IHtcbiAgVHJhbnNmb3Jtcy51bndyYXBOb2RlcyhlZGl0b3IsIHsgbWF0Y2g6IChuKSA9PiBFbGVtZW50LmlzRWxlbWVudChuKSAmJiBuLnR5cGUgPT09ICdsaW5rJyB9KVxufVxuXG5leHBvcnQgY29uc3Qgd3JhcExpbmsgPSAoZWRpdG9yOiBFZGl0b3IpOiB2b2lkID0+IHtcbiAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IGVkaXRvclxuICBjb25zdCBpc0NvbGxhcHNlZCA9IHNlbGVjdGlvbiAmJiBSYW5nZS5pc0NvbGxhcHNlZChzZWxlY3Rpb24pXG5cbiAgY29uc3QgbGluayA9IHtcbiAgICBjaGlsZHJlbjogaXNDb2xsYXBzZWQgPyBbeyB0ZXh0OiAnJyB9XSA6IFtdLFxuICAgIG5ld1RhYjogZmFsc2UsXG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHVybDogdW5kZWZpbmVkLFxuICB9XG5cbiAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGxpbmspXG4gIH0gZWxzZSB7XG4gICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoZWRpdG9yLCBsaW5rLCB7IHNwbGl0OiB0cnVlIH0pXG4gICAgVHJhbnNmb3Jtcy5jb2xsYXBzZShlZGl0b3IsIHsgZWRnZTogJ2VuZCcgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2l0aExpbmtzID0gKGluY29taW5nRWRpdG9yOiBFZGl0b3IpOiBFZGl0b3IgPT4ge1xuICBjb25zdCBlZGl0b3IgPSBpbmNvbWluZ0VkaXRvclxuICBjb25zdCB7IGlzSW5saW5lIH0gPSBlZGl0b3JcblxuICBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdsaW5rJykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gaXNJbmxpbmUoZWxlbWVudClcbiAgfVxuXG4gIHJldHVybiBlZGl0b3Jcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHJ1biB0byBlbnJpY2ggdGhlIGJhc2VmaWVsZHMgd2hpY2ggZXZlcnkgbGluayBoYXMgd2l0aCBwb3RlbnRpYWwsIGN1c3RvbSB1c2VyLWFkZGVkIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUV4dHJhRmllbGRzKFxuICBjdXN0b21GaWVsZFNjaGVtYTpcbiAgICB8ICgoYXJnczogeyBjb25maWc6IFNhbml0aXplZENvbmZpZzsgZGVmYXVsdEZpZWxkczogRmllbGRbXTsgaTE4bjogaTE4biB9KSA9PiBGaWVsZFtdKVxuICAgIHwgRmllbGRbXSxcbiAgY29uZmlnOiBTYW5pdGl6ZWRDb25maWcsXG4gIGkxOG46IGkxOG4sXG4pOiBGaWVsZFtdIHtcbiAgY29uc3QgYmFzZUZpZWxkczogRmllbGRbXSA9IGdldEJhc2VGaWVsZHMoY29uZmlnKVxuXG4gIGNvbnN0IGZpZWxkcyA9XG4gICAgdHlwZW9mIGN1c3RvbUZpZWxkU2NoZW1hID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGN1c3RvbUZpZWxkU2NoZW1hKHsgY29uZmlnLCBkZWZhdWx0RmllbGRzOiBiYXNlRmllbGRzLCBpMThuIH0pXG4gICAgICA6IGJhc2VGaWVsZHNcblxuICAvLyBXcmFwIGZpZWxkcyB3aGljaCBhcmUgbm90IHBhcnQgb2YgdGhlIGJhc2Ugc2NoZW1hIGluIGEgZ3JvdXAgbmFtZWQgJ2ZpZWxkcycgLSBvdGhlcndpc2UgdGhleSB3aWxsIGJlIHJlbmRlcmVkIGJ1dCBub3Qgc2F2ZWRcbiAgY29uc3QgZXh0cmFGaWVsZHMgPSBbXVxuICBmb3IgKGxldCBpID0gZmllbGRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaV1cblxuICAgIGlmICgnbmFtZScgaW4gZmllbGQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWJhc2VGaWVsZHMuZmluZCgoYmFzZUZpZWxkKSA9PiAhKCduYW1lJyBpbiBiYXNlRmllbGQpIHx8IGJhc2VGaWVsZC5uYW1lID09PSBmaWVsZC5uYW1lKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChmaWVsZC5uYW1lICE9PSAnZmllbGRzJyAmJiBmaWVsZC50eXBlICE9PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgZXh0cmFGaWVsZHMucHVzaChmaWVsZClcbiAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBmaWVsZHMgZnJvbSBub3csIGFzIHRoZXkgbmVlZCB0byBiZSBwYXJ0IG9mIHRoZSBmaWVsZHMgZ3JvdXAgYmVsb3dcbiAgICAgICAgICBmaWVsZHMuc3BsaWNlKGZpZWxkcy5pbmRleE9mKGZpZWxkKSwgMSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGN1c3RvbUZpZWxkU2NoZW1hKSB8fCBmaWVsZHMubGVuZ3RoID4gMCkge1xuICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgIG5hbWU6ICdmaWVsZHMnLFxuICAgICAgYWRtaW46IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IDAsXG4gICAgICAgICAgYm9yZGVyVG9wOiAwLFxuICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGZpZWxkczogQXJyYXkuaXNBcnJheShjdXN0b21GaWVsZFNjaGVtYSlcbiAgICAgICAgPyBjdXN0b21GaWVsZFNjaGVtYS5jb25jYXQoZXh0cmFGaWVsZHMpXG4gICAgICAgIDogZXh0cmFGaWVsZHMsXG4gICAgICB0eXBlOiAnZ3JvdXAnLFxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGZpZWxkc1xufVxuIl0sIm5hbWVzIjpbInVud3JhcExpbmsiLCJ3cmFwTGluayIsIndpdGhMaW5rcyIsInRyYW5zZm9ybUV4dHJhRmllbGRzIiwiZWRpdG9yIiwiVHJhbnNmb3JtcyIsInVud3JhcE5vZGVzIiwibWF0Y2giLCJuIiwiRWxlbWVudCIsImlzRWxlbWVudCIsInR5cGUiLCJzZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsIlJhbmdlIiwibGluayIsImNoaWxkcmVuIiwidGV4dCIsIm5ld1RhYiIsInVybCIsInVuZGVmaW5lZCIsImluc2VydE5vZGVzIiwid3JhcE5vZGVzIiwic3BsaXQiLCJjb2xsYXBzZSIsImVkZ2UiLCJpbmNvbWluZ0VkaXRvciIsImlzSW5saW5lIiwiZWxlbWVudCIsImN1c3RvbUZpZWxkU2NoZW1hIiwiY29uZmlnIiwiaTE4biIsImJhc2VGaWVsZHMiLCJnZXRCYXNlRmllbGRzIiwiZmllbGRzIiwiZGVmYXVsdEZpZWxkcyIsImV4dHJhRmllbGRzIiwiaSIsImxlbmd0aCIsImZpZWxkIiwiZmluZCIsImJhc2VGaWVsZCIsIm5hbWUiLCJwdXNoIiwic3BsaWNlIiwiaW5kZXhPZiIsIkFycmF5IiwiaXNBcnJheSIsImFkbWluIiwic3R5bGUiLCJib3JkZXJCb3R0b20iLCJib3JkZXJUb3AiLCJtYXJnaW4iLCJwYWRkaW5nIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQVNhQSxVQUFVO2VBQVZB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