'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "EnabledRelationshipsCondition", {
    enumerable: true,
    get: function() {
        return EnabledRelationshipsCondition;
    }
});
const _utilities = require("payload/components/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const filterRichTextCollections = (collections, options)=>{
    return collections.filter(({ admin: { enableRichTextRelationship }, upload })=>{
        if (options?.uploads) {
            return enableRichTextRelationship && Boolean(upload) === true;
        }
        return upload ? false : enableRichTextRelationship;
    });
};
const EnabledRelationshipsCondition = (props)=>{
    const { children, uploads = false, ...rest } = props;
    const { collections } = (0, _utilities.useConfig)();
    const [enabledCollectionSlugs] = _react.useState(()=>filterRichTextCollections(collections, {
            uploads
        }).map(({ slug })=>slug));
    if (!enabledCollectionSlugs.length) {
        return null;
    }
    return /*#__PURE__*/ _react.cloneElement(children, {
        ...rest,
        enabledCollectionSlugs
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWVsZC9lbGVtZW50cy9FbmFibGVkUmVsYXRpb25zaGlwc0NvbmRpdGlvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHVzZUNvbmZpZyB9IGZyb20gJ3BheWxvYWQvY29tcG9uZW50cy91dGlsaXRpZXMnXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcblxudHlwZSBvcHRpb25zID0geyB1cGxvYWRzOiBib29sZWFuIH1cblxudHlwZSBGaWx0ZXJlZENvbGxlY3Rpb25zVCA9IChcbiAgY29sbGVjdGlvbnM6IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdbXSxcbiAgb3B0aW9ucz86IG9wdGlvbnMsXG4pID0+IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdbXVxuY29uc3QgZmlsdGVyUmljaFRleHRDb2xsZWN0aW9uczogRmlsdGVyZWRDb2xsZWN0aW9uc1QgPSAoY29sbGVjdGlvbnMsIG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIGNvbGxlY3Rpb25zLmZpbHRlcigoeyBhZG1pbjogeyBlbmFibGVSaWNoVGV4dFJlbGF0aW9uc2hpcCB9LCB1cGxvYWQgfSkgPT4ge1xuICAgIGlmIChvcHRpb25zPy51cGxvYWRzKSB7XG4gICAgICByZXR1cm4gZW5hYmxlUmljaFRleHRSZWxhdGlvbnNoaXAgJiYgQm9vbGVhbih1cGxvYWQpID09PSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHVwbG9hZCA/IGZhbHNlIDogZW5hYmxlUmljaFRleHRSZWxhdGlvbnNoaXBcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IEVuYWJsZWRSZWxhdGlvbnNoaXBzQ29uZGl0aW9uOiBSZWFjdC5GQzxhbnk+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIHVwbG9hZHMgPSBmYWxzZSwgLi4ucmVzdCB9ID0gcHJvcHNcbiAgY29uc3QgeyBjb2xsZWN0aW9ucyB9ID0gdXNlQ29uZmlnKClcbiAgY29uc3QgW2VuYWJsZWRDb2xsZWN0aW9uU2x1Z3NdID0gUmVhY3QudXNlU3RhdGUoKCkgPT5cbiAgICBmaWx0ZXJSaWNoVGV4dENvbGxlY3Rpb25zKGNvbGxlY3Rpb25zLCB7IHVwbG9hZHMgfSkubWFwKCh7IHNsdWcgfSkgPT4gc2x1ZyksXG4gIClcblxuICBpZiAoIWVuYWJsZWRDb2xsZWN0aW9uU2x1Z3MubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHsgLi4ucmVzdCwgZW5hYmxlZENvbGxlY3Rpb25TbHVncyB9KVxufVxuIl0sIm5hbWVzIjpbIkVuYWJsZWRSZWxhdGlvbnNoaXBzQ29uZGl0aW9uIiwiZmlsdGVyUmljaFRleHRDb2xsZWN0aW9ucyIsImNvbGxlY3Rpb25zIiwib3B0aW9ucyIsImZpbHRlciIsImFkbWluIiwiZW5hYmxlUmljaFRleHRSZWxhdGlvbnNoaXAiLCJ1cGxvYWQiLCJ1cGxvYWRzIiwiQm9vbGVhbiIsInByb3BzIiwiY2hpbGRyZW4iLCJyZXN0IiwidXNlQ29uZmlnIiwiZW5hYmxlZENvbGxlY3Rpb25TbHVncyIsIlJlYWN0IiwidXNlU3RhdGUiLCJtYXAiLCJzbHVnIiwibGVuZ3RoIiwiY2xvbmVFbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7K0JBdUJhQTs7O2VBQUFBOzs7MkJBbkJhOytEQUNIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUXZCLE1BQU1DLDRCQUFrRCxDQUFDQyxhQUFhQztJQUNwRSxPQUFPRCxZQUFZRSxNQUFNLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUVDLDBCQUEwQixFQUFFLEVBQUVDLE1BQU0sRUFBRTtRQUMxRSxJQUFJSixTQUFTSyxTQUFTO1lBQ3BCLE9BQU9GLDhCQUE4QkcsUUFBUUYsWUFBWTtRQUMzRDtRQUVBLE9BQU9BLFNBQVMsUUFBUUQ7SUFDMUI7QUFDRjtBQUVPLE1BQU1OLGdDQUErQyxDQUFDVTtJQUMzRCxNQUFNLEVBQUVDLFFBQVEsRUFBRUgsVUFBVSxLQUFLLEVBQUUsR0FBR0ksTUFBTSxHQUFHRjtJQUMvQyxNQUFNLEVBQUVSLFdBQVcsRUFBRSxHQUFHVyxJQUFBQSxvQkFBUztJQUNqQyxNQUFNLENBQUNDLHVCQUF1QixHQUFHQyxPQUFNQyxRQUFRLENBQUMsSUFDOUNmLDBCQUEwQkMsYUFBYTtZQUFFTTtRQUFRLEdBQUdTLEdBQUcsQ0FBQyxDQUFDLEVBQUVDLElBQUksRUFBRSxHQUFLQTtJQUd4RSxJQUFJLENBQUNKLHVCQUF1QkssTUFBTSxFQUFFO1FBQ2xDLE9BQU87SUFDVDtJQUVBLHFCQUFPSixPQUFNSyxZQUFZLENBQUNULFVBQVU7UUFBRSxHQUFHQyxJQUFJO1FBQUVFO0lBQXVCO0FBQ3hFIn0=