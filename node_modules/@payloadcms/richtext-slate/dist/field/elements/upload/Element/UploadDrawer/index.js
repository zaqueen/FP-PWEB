'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UploadDrawer", {
    enumerable: true,
    get: function() {
        return UploadDrawer;
    }
});
const _modal = require("@faceless-ui/modal");
const _elements = require("payload/components/elements");
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _config = require("payload/config");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const UploadDrawer = (props)=>{
    const editor = (0, _slatereact.useSlateStatic)();
    const { drawerSlug, element, fieldProps, relatedCollection } = props;
    const { i18n, t } = (0, _reacti18next.useTranslation)();
    const { code: locale } = (0, _utilities.useLocale)();
    const { user } = (0, _utilities.useAuth)();
    const { closeModal } = (0, _modal.useModal)();
    const { getDocPreferences } = (0, _utilities.useDocumentInfo)();
    const [initialState, setInitialState] = (0, _react.useState)({});
    const fieldSchemaUnsanitized = fieldProps?.admin?.upload?.collections?.[relatedCollection.slug]?.fields;
    const config = (0, _utilities.useConfig)();
    // Sanitize custom fields here
    const validRelationships = config.collections.map((c)=>c.slug) || [];
    const fieldSchema = (0, _config.sanitizeFields)({
        config: config,
        fields: fieldSchemaUnsanitized,
        validRelationships
    });
    const handleUpdateEditData = (0, _react.useCallback)((_, data)=>{
        const newNode = {
            fields: data
        };
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.setNodes(editor, newNode, {
            at: elementPath
        });
        closeModal(drawerSlug);
    }, [
        closeModal,
        editor,
        element,
        drawerSlug
    ]);
    (0, _react.useEffect)(()=>{
        // Sanitize custom fields here
        const validRelationships = config.collections.map((c)=>c.slug) || [];
        const fieldSchema = (0, _config.sanitizeFields)({
            config: config,
            fields: fieldSchemaUnsanitized,
            validRelationships
        });
        const awaitInitialState = async ()=>{
            const preferences = await getDocPreferences();
            const state = await (0, _utilities.buildStateFromSchema)({
                config,
                data: (0, _utilities1.deepCopyObject)(element?.fields || {}),
                fieldSchema,
                locale,
                operation: 'update',
                preferences,
                t,
                user
            });
            setInitialState(state);
        };
        awaitInitialState();
    }, [
        fieldSchemaUnsanitized,
        config,
        element.fields,
        user,
        locale,
        t,
        getDocPreferences
    ]);
    return /*#__PURE__*/ _react.default.createElement(_elements.Drawer, {
        slug: drawerSlug,
        title: t('general:editLabel', {
            label: (0, _utilities1.getTranslation)(relatedCollection.labels.singular, i18n)
        })
    }, /*#__PURE__*/ _react.default.createElement(_forms.Form, {
        initialState: initialState,
        onSubmit: handleUpdateEditData
    }, /*#__PURE__*/ _react.default.createElement(_forms.RenderFields, {
        fieldSchema: fieldSchema,
        fieldTypes: _forms.fieldTypes,
        readOnly: false
    }), /*#__PURE__*/ _react.default.createElement(_forms.FormSubmit, null, t('fields:saveChanges'))));
};

//# sourceMappingURL=data:application/json;base64,