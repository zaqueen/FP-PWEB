'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _components = require("payload/components");
const _elements = require("payload/components/elements");
const _graphics = require("payload/components/graphics");
const _hooks = require("payload/components/hooks");
const _utilities = require("payload/components/utilities");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
const _EnabledRelationshipsCondition = require("../../EnabledRelationshipsCondition");
const _UploadDrawer = require("./UploadDrawer");
require("./index.scss");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'rich-text-upload';
const initialParams = {
    depth: 0
};
const Element = (props)=>{
    const { attributes, children, element: { relationTo, value }, element, enabledCollectionSlugs, fieldProps } = props;
    const { collections, routes: { api }, serverURL } = (0, _utilities.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const [cacheBust, dispatchCacheBust] = (0, _react.useReducer)((state)=>state + 1, 0);
    const [relatedCollection, setRelatedCollection] = (0, _react.useState)(()=>collections.find((coll)=>coll.slug === relationTo));
    const drawerSlug = (0, _elements.useDrawerSlug)('upload-drawer');
    const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = (0, _elements.useListDrawer)({
        collectionSlugs: enabledCollectionSlugs,
        selectedCollection: relatedCollection.slug
    });
    const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = (0, _elements.useDocumentDrawer)({
        id: value?.id,
        collectionSlug: relatedCollection.slug
    });
    const editor = (0, _slatereact.useSlateStatic)();
    const selected = (0, _slatereact.useSelected)();
    const focused = (0, _slatereact.useFocused)();
    // Get the referenced document
    const [{ data }, { setParams }] = (0, _hooks.usePayloadAPI)(`${serverURL}${api}/${relatedCollection.slug}/${value?.id}`, {
        initialParams
    });
    const thumbnailSRC = (0, _hooks.useThumbnail)(relatedCollection, data);
    const removeUpload = (0, _react.useCallback)(()=>{
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.removeNodes(editor, {
            at: elementPath
        });
    }, [
        editor,
        element
    ]);
    const updateUpload = (0, _react.useCallback)((json)=>{
        const { doc } = json;
        const newNode = {
            fields: doc
        };
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.setNodes(editor, newNode, {
            at: elementPath
        });
        // setRelatedCollection(collections.find((coll) => coll.slug === collectionConfig.slug));
        setParams({
            ...initialParams,
            cacheBust
        });
        dispatchCacheBust();
        closeDrawer();
    }, [
        editor,
        element,
        setParams,
        cacheBust,
        closeDrawer
    ]);
    const swapUpload = _react.default.useCallback(({ collectionConfig, docID })=>{
        const newNode = {
            children: [
                {
                    text: ' '
                }
            ],
            relationTo: collectionConfig.slug,
            type: 'upload',
            value: {
                id: docID
            }
        };
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        setRelatedCollection(collections.find((coll)=>coll.slug === collectionConfig.slug));
        _slate.Transforms.setNodes(editor, newNode, {
            at: elementPath
        });
        dispatchCacheBust();
        closeListDrawer();
    }, [
        closeListDrawer,
        editor,
        element,
        collections
    ]);
    const customFields = fieldProps?.admin?.upload?.collections?.[relatedCollection.slug]?.fields;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            selected && focused && `${baseClass}--selected`
        ].filter(Boolean).join(' '),
        contentEditable: false,
        ...attributes
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__card`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__topRow`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__thumbnail`
    }, thumbnailSRC ? /*#__PURE__*/ _react.default.createElement("img", {
        alt: data?.filename,
        src: thumbnailSRC
    }) : /*#__PURE__*/ _react.default.createElement(_graphics.FileGraphic, null)), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__topRowRightPanel`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__collectionLabel`
    }, (0, _utilities1.getTranslation)(relatedCollection.labels.singular, i18n)), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions`
    }, customFields?.length > 0 && /*#__PURE__*/ _react.default.createElement(_elements.DrawerToggler, {
        className: `${baseClass}__upload-drawer-toggler`,
        disabled: fieldProps?.admin?.readOnly,
        slug: drawerSlug
    }, /*#__PURE__*/ _react.default.createElement(_components.Button, {
        buttonStyle: "icon-label",
        el: "div",
        icon: "edit",
        onClick: (e)=>{
            e.preventDefault();
        },
        round: true,
        tooltip: t('fields:editRelationship')
    })), /*#__PURE__*/ _react.default.createElement(ListDrawerToggler, {
        className: `${baseClass}__list-drawer-toggler`,
        disabled: fieldProps?.admin?.readOnly
    }, /*#__PURE__*/ _react.default.createElement(_components.Button, {
        buttonStyle: "icon-label",
        disabled: fieldProps?.admin?.readOnly,
        el: "div",
        icon: "swap",
        onClick: ()=>{
        // do nothing
        },
        round: true,
        tooltip: t('swapUpload')
    })), /*#__PURE__*/ _react.default.createElement(_components.Button, {
        buttonStyle: "icon-label",
        className: `${baseClass}__removeButton`,
        disabled: fieldProps?.admin?.readOnly,
        icon: "x",
        onClick: (e)=>{
            e.preventDefault();
            removeUpload();
        },
        round: true,
        tooltip: t('removeUpload')
    })))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bottomRow`
    }, /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
        className: `${baseClass}__doc-drawer-toggler`
    }, /*#__PURE__*/ _react.default.createElement("strong", null, data?.filename)))), children, value?.id && /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
        onSave: updateUpload
    }), /*#__PURE__*/ _react.default.createElement(ListDrawer, {
        onSelect: swapUpload
    }), /*#__PURE__*/ _react.default.createElement(_UploadDrawer.UploadDrawer, {
        drawerSlug: drawerSlug,
        relatedCollection: relatedCollection,
        ...props
    }));
};
const _default = (props)=>{
    return /*#__PURE__*/ _react.default.createElement(_EnabledRelationshipsCondition.EnabledRelationshipsCondition, {
        ...props,
        uploads: true
    }, /*#__PURE__*/ _react.default.createElement(Element, props));
};

//# sourceMappingURL=data:application/json;base64,