'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _ishotkey = /*#__PURE__*/ _interop_require_default(require("is-hotkey"));
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatehistory = require("slate-history");
const _slatereact = require("slate-react");
const _defaultValue = require("../data/defaultValue");
const _validation = require("../data/validation");
const _elements = /*#__PURE__*/ _interop_require_default(require("./elements"));
const _listTypes = /*#__PURE__*/ _interop_require_default(require("./elements/listTypes"));
const _enablePlugins = /*#__PURE__*/ _interop_require_default(require("./enablePlugins"));
const _hotkeys = /*#__PURE__*/ _interop_require_default(require("./hotkeys"));
require("./index.scss");
const _leaves = /*#__PURE__*/ _interop_require_default(require("./leaves"));
const _toggle = /*#__PURE__*/ _interop_require_default(require("./leaves/toggle"));
const _mergeCustomFunctions = /*#__PURE__*/ _interop_require_default(require("./mergeCustomFunctions"));
const _withEnterBreakOut = /*#__PURE__*/ _interop_require_default(require("./plugins/withEnterBreakOut"));
const _withHTML = /*#__PURE__*/ _interop_require_default(require("./plugins/withHTML"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const defaultElements = [
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'ul',
    'ol',
    'indent',
    'link',
    'relationship',
    'upload'
];
const defaultLeaves = [
    'bold',
    'italic',
    'underline',
    'strikethrough',
    'code'
];
const baseClass = 'rich-text';
const RichText = (props)=>{
    const { name, admin: { className, condition, description, hideGutter, placeholder, readOnly, style, width } = {
        className: undefined,
        condition: undefined,
        description: undefined,
        hideGutter: undefined,
        placeholder: undefined,
        readOnly: undefined,
        style: undefined,
        width: undefined
    }, admin, defaultValue: defaultValueFromProps, label, path: pathFromProps, required, validate = _validation.richTextValidate } = props;
    const elements = admin?.elements || defaultElements;
    const leaves = admin?.leaves || defaultLeaves;
    const path = pathFromProps || name;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const [loaded, setLoaded] = (0, _react.useState)(false);
    const [enabledElements, setEnabledElements] = (0, _react.useState)({});
    const [enabledLeaves, setEnabledLeaves] = (0, _react.useState)({});
    const editorRef = (0, _react.useRef)(null);
    const toolbarRef = (0, _react.useRef)(null);
    const drawerDepth = (0, _utilities.useEditDepth)();
    const drawerIsOpen = drawerDepth > 1;
    const renderElement = (0, _react.useCallback)(({ attributes, children, element })=>{
        const matchedElement = enabledElements[element.type];
        const Element = matchedElement?.Element;
        let attr = {
            ...attributes
        };
        // this converts text alignment to margin when dealing with void elements
        if (element.textAlign) {
            if (element.type === 'relationship' || element.type === 'upload') {
                switch(element.textAlign){
                    case 'left':
                        attr = {
                            ...attr,
                            style: {
                                marginRight: 'auto'
                            }
                        };
                        break;
                    case 'right':
                        attr = {
                            ...attr,
                            style: {
                                marginLeft: 'auto'
                            }
                        };
                        break;
                    case 'center':
                        attr = {
                            ...attr,
                            style: {
                                marginLeft: 'auto',
                                marginRight: 'auto'
                            }
                        };
                        break;
                    default:
                        attr = {
                            ...attr,
                            style: {
                                textAlign: element.textAlign
                            }
                        };
                        break;
                }
            } else if (element.type === 'li') {
                switch(element.textAlign){
                    case 'right':
                        attr = {
                            ...attr,
                            style: {
                                listStylePosition: 'inside',
                                textAlign: 'right'
                            }
                        };
                        break;
                    case 'center':
                        attr = {
                            ...attr,
                            style: {
                                listStylePosition: 'inside',
                                textAlign: 'center'
                            }
                        };
                        break;
                    case 'left':
                    default:
                        attr = {
                            ...attr,
                            style: {
                                listStylePosition: 'outside',
                                textAlign: 'left'
                            }
                        };
                        break;
                }
            } else {
                attr = {
                    ...attr,
                    style: {
                        textAlign: element.textAlign
                    }
                };
            }
        }
        if (Element) {
            const el = /*#__PURE__*/ _react.default.createElement(Element, {
                attributes: attr,
                editorRef: editorRef,
                element: element,
                fieldProps: props,
                path: path
            }, children);
            return el;
        }
        return /*#__PURE__*/ _react.default.createElement("div", attr, children);
    }, [
        enabledElements,
        path,
        props
    ]);
    const renderLeaf = (0, _react.useCallback)(({ attributes, children, leaf })=>{
        const matchedLeaves = Object.entries(enabledLeaves).filter(([leafName])=>leaf[leafName]);
        if (matchedLeaves.length > 0) {
            return matchedLeaves.reduce((result, [leafName], i)=>{
                if (enabledLeaves[leafName]?.Leaf) {
                    const Leaf = enabledLeaves[leafName]?.Leaf;
                    return /*#__PURE__*/ _react.default.createElement(Leaf, {
                        editorRef: editorRef,
                        fieldProps: props,
                        key: i,
                        leaf: leaf,
                        path: path
                    }, result);
                }
                return result;
            }, /*#__PURE__*/ _react.default.createElement("span", attributes, children));
        }
        return /*#__PURE__*/ _react.default.createElement("span", attributes, children);
    }, [
        enabledLeaves,
        path,
        props
    ]);
    const memoizedValidate = (0, _react.useCallback)((value, validationOptions)=>{
        return validate(value, {
            ...validationOptions,
            required
        });
    }, [
        validate,
        required
    ]);
    const fieldType = (0, _forms.useField)({
        condition,
        path,
        validate: memoizedValidate
    });
    const { errorMessage, initialValue, setValue, showError, value } = fieldType;
    const classes = [
        baseClass,
        'field-type',
        className,
        showError && 'error',
        readOnly && `${baseClass}--read-only`,
        !hideGutter && `${baseClass}--gutter`
    ].filter(Boolean).join(' ');
    const editor = (0, _react.useMemo)(()=>{
        let CreatedEditor = (0, _withEnterBreakOut.default)((0, _slatehistory.withHistory)((0, _slatereact.withReact)((0, _slate.createEditor)())));
        CreatedEditor = (0, _withHTML.default)(CreatedEditor);
        CreatedEditor = (0, _enablePlugins.default)(CreatedEditor, elements);
        CreatedEditor = (0, _enablePlugins.default)(CreatedEditor, leaves);
        return CreatedEditor;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        elements,
        leaves,
        path
    ]);
    // All slate changes fire the onChange event
    // including selection changes
    // so we will filter the set_selection operations out
    // and only fire setValue when onChange is because of value
    const handleChange = (0, _react.useCallback)((val)=>{
        const ops = editor.operations.filter((o)=>{
            if (o) {
                return o.type !== 'set_selection';
            }
            return false;
        });
        if (ops && Array.isArray(ops) && ops.length > 0) {
            if (!readOnly && val !== _defaultValue.defaultRichTextValue && val !== value) {
                setValue(val);
            }
        }
    }, [
        editor.operations,
        readOnly,
        setValue,
        value
    ]);
    (0, _react.useEffect)(()=>{
        if (!loaded) {
            const mergedElements = (0, _mergeCustomFunctions.default)(elements, _elements.default);
            const mergedLeaves = (0, _mergeCustomFunctions.default)(leaves, _leaves.default);
            setEnabledElements(mergedElements);
            setEnabledLeaves(mergedLeaves);
            setLoaded(true);
        }
    }, [
        loaded,
        elements,
        leaves
    ]);
    (0, _react.useEffect)(()=>{
        function setClickableState(clickState) {
            const selectors = 'button, a, [role="button"]';
            const toolbarButtons = toolbarRef.current?.querySelectorAll(selectors);
            (toolbarButtons || []).forEach((child)=>{
                const isButton = child.tagName === 'BUTTON';
                const isDisabling = clickState === 'disabled';
                child.setAttribute('tabIndex', isDisabling ? '-1' : '0');
                if (isButton) child.setAttribute('disabled', isDisabling ? 'disabled' : null);
            });
        }
        if (loaded && readOnly) {
            setClickableState('disabled');
        }
        return ()=>{
            if (loaded && readOnly) {
                setClickableState('enabled');
            }
        };
    }, [
        loaded,
        readOnly
    ]);
    // useEffect(() => {
    //   // If there is a change to the initial value, we need to reset Slate history
    //   // and clear selection because the old selection may no longer be valid
    //   // as returned JSON may be modified in hooks and have a different shape
    //   if (editor.selection) {
    //     console.log('deselecting');
    //     ReactEditor.deselect(editor);
    //   }
    // }, [path, editor]);
    if (!loaded) {
        return null;
    }
    let valueToRender = value;
    if (typeof valueToRender === 'string') {
        try {
            const parsedJSON = JSON.parse(valueToRender);
            valueToRender = parsedJSON;
        } catch (err) {
            valueToRender = null;
        }
    }
    if (!valueToRender) valueToRender = defaultValueFromProps || _defaultValue.defaultRichTextValue;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: classes,
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement(_forms.Error, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(_forms.Label, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement(_slatereact.Slate, {
        editor: editor,
        key: JSON.stringify({
            initialValue,
            path
        }),
        onChange: handleChange,
        value: valueToRender
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrapper`
    }, elements?.length + leaves?.length > 0 && /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__toolbar`,
            drawerIsOpen && `${baseClass}__drawerIsOpen`
        ].filter(Boolean).join(' '),
        ref: toolbarRef
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__toolbar-wrap`
    }, elements.map((element, i)=>{
        let elementName;
        if (typeof element === 'object' && element?.name) elementName = element.name;
        if (typeof element === 'string') elementName = element;
        const elementType = enabledElements[elementName];
        const Button = elementType?.Button;
        if (Button) {
            return /*#__PURE__*/ _react.default.createElement(Button, {
                fieldProps: props,
                key: i,
                path: path
            });
        }
        return null;
    }), leaves.map((leaf, i)=>{
        let leafName;
        if (typeof leaf === 'object' && leaf?.name) leafName = leaf.name;
        if (typeof leaf === 'string') leafName = leaf;
        const leafType = enabledLeaves[leafName];
        const Button = leafType?.Button;
        if (Button) {
            return /*#__PURE__*/ _react.default.createElement(Button, {
                fieldProps: props,
                key: i,
                path: path
            });
        }
        return null;
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__editor`,
        ref: editorRef
    }, /*#__PURE__*/ _react.default.createElement(_slatereact.Editable, {
        className: `${baseClass}__input`,
        id: `field-${path.replace(/\./g, '__')}`,
        onKeyDown: (event)=>{
            if (event.key === 'Enter') {
                if (event.shiftKey) {
                    event.preventDefault();
                    editor.insertText('\n');
                } else {
                    const selectedElement = _slate.Node.descendant(editor, editor.selection.anchor.path.slice(0, -1));
                    if (_slate.Element.isElement(selectedElement)) {
                        // Allow hard enter to "break out" of certain elements
                        if (editor.shouldBreakOutOnEnter(selectedElement)) {
                            event.preventDefault();
                            const selectedLeaf = _slate.Node.descendant(editor, editor.selection.anchor.path);
                            if (_slate.Text.isText(selectedLeaf) && String(selectedLeaf.text).length === editor.selection.anchor.offset) {
                                _slate.Transforms.insertNodes(editor, {
                                    children: [
                                        {
                                            text: ''
                                        }
                                    ]
                                });
                            } else {
                                _slate.Transforms.splitNodes(editor);
                                _slate.Transforms.setNodes(editor, {});
                            }
                        }
                    }
                }
            }
            if (event.key === 'Backspace') {
                const selectedElement = _slate.Node.descendant(editor, editor.selection.anchor.path.slice(0, -1));
                if (_slate.Element.isElement(selectedElement) && selectedElement.type === 'li') {
                    const selectedLeaf = _slate.Node.descendant(editor, editor.selection.anchor.path);
                    if (_slate.Text.isText(selectedLeaf) && String(selectedLeaf.text).length === 0) {
                        event.preventDefault();
                        _slate.Transforms.unwrapNodes(editor, {
                            match: (n)=>_slate.Element.isElement(n) && _listTypes.default.includes(n.type),
                            mode: 'lowest',
                            split: true
                        });
                        _slate.Transforms.setNodes(editor, {
                            type: undefined
                        });
                    }
                } else if (editor.isVoid(selectedElement)) {
                    _slate.Transforms.removeNodes(editor);
                }
            }
            Object.keys(_hotkeys.default).forEach((hotkey)=>{
                if ((0, _ishotkey.default)(hotkey, event)) {
                    event.preventDefault();
                    const mark = _hotkeys.default[hotkey];
                    (0, _toggle.default)(editor, mark);
                }
            });
        },
        placeholder: (0, _utilities1.getTranslation)(placeholder, i18n),
        readOnly: readOnly,
        renderElement: renderElement,
        renderLeaf: renderLeaf,
        spellCheck: true
    })))), /*#__PURE__*/ _react.default.createElement(_forms.FieldDescription, {
        description: description,
        value: value
    })));
};
const _default = (0, _forms.withCondition)(RichText);

//# sourceMappingURL=data:application/json;base64,