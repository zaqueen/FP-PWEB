"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getProdConfig", {
    enumerable: true,
    get: function() {
        return getProdConfig;
    }
});
const _minicssextractplugin = /*#__PURE__*/ _interop_require_default(require("mini-css-extract-plugin"));
const _swcminifywebpackplugin = require("swc-minify-webpack-plugin");
const _webpackbundleanalyzer = require("webpack-bundle-analyzer");
const _base = require("./base");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getProdConfig = (payloadConfig)=>{
    const baseConfig = (0, _base.getBaseConfig)(payloadConfig);
    let webpackConfig = {
        ...baseConfig,
        mode: 'production',
        module: {
            ...baseConfig.module,
            rules: [
                ...baseConfig.module.rules,
                {
                    sideEffects: true,
                    test: /\.(scss|css)$/,
                    use: [
                        _minicssextractplugin.default.loader,
                        {
                            loader: require.resolve('css-loader'),
                            options: {
                                url: (url)=>!url.startsWith('/')
                            }
                        },
                        {
                            loader: require.resolve('postcss-loader'),
                            options: {
                                postcssOptions: {
                                    plugins: [
                                        require.resolve('postcss-preset-env')
                                    ]
                                }
                            }
                        },
                        require.resolve('sass-loader')
                    ]
                }
            ]
        },
        optimization: {
            minimizer: [
                new _swcminifywebpackplugin.SwcMinifyWebpackPlugin()
            ],
            splitChunks: {
                cacheGroups: {
                    styles: {
                        name: 'styles',
                        chunks: 'all',
                        enforce: true,
                        test: /\.(sa|sc|c)ss$/
                    }
                }
            }
        },
        output: {
            chunkFilename: '[name].[chunkhash].js',
            filename: '[name].[chunkhash].js',
            path: payloadConfig.admin.buildPath,
            publicPath: `${payloadConfig.routes.admin}/`
        },
        plugins: [
            ...baseConfig.plugins,
            new _minicssextractplugin.default({
                filename: '[name].[contenthash].css',
                ignoreOrder: true
            }),
            ...process.env.PAYLOAD_ANALYZE_BUNDLE ? [
                new _webpackbundleanalyzer.BundleAnalyzerPlugin()
            ] : []
        ],
        stats: 'errors-only'
    };
    if (payloadConfig.admin.webpack && typeof payloadConfig.admin.webpack === 'function') {
        webpackConfig = payloadConfig.admin.webpack(webpackConfig);
    }
    return webpackConfig;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWdzL3Byb2QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb25maWcgfSBmcm9tICdwYXlsb2FkL2NvbmZpZydcbmltcG9ydCB0eXBlIHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJ3dlYnBhY2snXG5cbmltcG9ydCBNaW5pQ1NTRXh0cmFjdFBsdWdpbiBmcm9tICdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbidcbmltcG9ydCB7IFN3Y01pbmlmeVdlYnBhY2tQbHVnaW4gfSBmcm9tICdzd2MtbWluaWZ5LXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IHsgV2VicGFja1BsdWdpbkluc3RhbmNlIH0gZnJvbSAnd2VicGFjaydcbmltcG9ydCB7IEJ1bmRsZUFuYWx5emVyUGx1Z2luIH0gZnJvbSAnd2VicGFjay1idW5kbGUtYW5hbHl6ZXInXG5cbmltcG9ydCB7IGdldEJhc2VDb25maWcgfSBmcm9tICcuL2Jhc2UnXG5cbmV4cG9ydCBjb25zdCBnZXRQcm9kQ29uZmlnID0gKHBheWxvYWRDb25maWc6IFNhbml0aXplZENvbmZpZyk6IENvbmZpZ3VyYXRpb24gPT4ge1xuICBjb25zdCBiYXNlQ29uZmlnID0gZ2V0QmFzZUNvbmZpZyhwYXlsb2FkQ29uZmlnKSBhcyBhbnlcblxuICBsZXQgd2VicGFja0NvbmZpZzogQ29uZmlndXJhdGlvbiA9IHtcbiAgICAuLi5iYXNlQ29uZmlnLFxuICAgIG1vZGU6ICdwcm9kdWN0aW9uJyxcbiAgICBtb2R1bGU6IHtcbiAgICAgIC4uLmJhc2VDb25maWcubW9kdWxlLFxuICAgICAgcnVsZXM6IFtcbiAgICAgICAgLi4uYmFzZUNvbmZpZy5tb2R1bGUucnVsZXMsXG4gICAgICAgIHtcbiAgICAgICAgICBzaWRlRWZmZWN0czogdHJ1ZSxcbiAgICAgICAgICB0ZXN0OiAvXFwuKHNjc3N8Y3NzKSQvLFxuICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgTWluaUNTU0V4dHJhY3RQbHVnaW4ubG9hZGVyLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsb2FkZXI6IHJlcXVpcmUucmVzb2x2ZSgnY3NzLWxvYWRlcicpLFxuICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdXJsOiAodXJsKSA9PiAhdXJsLnN0YXJ0c1dpdGgoJy8nKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxvYWRlcjogcmVxdWlyZS5yZXNvbHZlKCdwb3N0Y3NzLWxvYWRlcicpLFxuICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcG9zdGNzc09wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IFtyZXF1aXJlLnJlc29sdmUoJ3Bvc3Rjc3MtcHJlc2V0LWVudicpXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVpcmUucmVzb2x2ZSgnc2Fzcy1sb2FkZXInKSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIG9wdGltaXphdGlvbjoge1xuICAgICAgbWluaW1pemVyOiBbbmV3IFN3Y01pbmlmeVdlYnBhY2tQbHVnaW4oKV0sXG4gICAgICBzcGxpdENodW5rczoge1xuICAgICAgICBjYWNoZUdyb3Vwczoge1xuICAgICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgbmFtZTogJ3N0eWxlcycsXG4gICAgICAgICAgICBjaHVua3M6ICdhbGwnLFxuICAgICAgICAgICAgZW5mb3JjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC4oc2F8c2N8YylzcyQvLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgb3V0cHV0OiB7XG4gICAgICBjaHVua0ZpbGVuYW1lOiAnW25hbWVdLltjaHVua2hhc2hdLmpzJyxcbiAgICAgIGZpbGVuYW1lOiAnW25hbWVdLltjaHVua2hhc2hdLmpzJyxcbiAgICAgIHBhdGg6IHBheWxvYWRDb25maWcuYWRtaW4uYnVpbGRQYXRoLFxuICAgICAgcHVibGljUGF0aDogYCR7cGF5bG9hZENvbmZpZy5yb3V0ZXMuYWRtaW59L2AsXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbXG4gICAgICAuLi5iYXNlQ29uZmlnLnBsdWdpbnMsXG4gICAgICBuZXcgTWluaUNTU0V4dHJhY3RQbHVnaW4oe1xuICAgICAgICBmaWxlbmFtZTogJ1tuYW1lXS5bY29udGVudGhhc2hdLmNzcycsXG4gICAgICAgIGlnbm9yZU9yZGVyOiB0cnVlLFxuICAgICAgfSksXG4gICAgICAuLi4ocHJvY2Vzcy5lbnYuUEFZTE9BRF9BTkFMWVpFX0JVTkRMRSA/IFtuZXcgQnVuZGxlQW5hbHl6ZXJQbHVnaW4oKV0gOiBbXSksXG4gICAgXSxcbiAgICBzdGF0czogJ2Vycm9ycy1vbmx5JyxcbiAgfVxuXG4gIGlmIChwYXlsb2FkQ29uZmlnLmFkbWluLndlYnBhY2sgJiYgdHlwZW9mIHBheWxvYWRDb25maWcuYWRtaW4ud2VicGFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHdlYnBhY2tDb25maWcgPSBwYXlsb2FkQ29uZmlnLmFkbWluLndlYnBhY2sod2VicGFja0NvbmZpZylcbiAgfVxuXG4gIHJldHVybiB3ZWJwYWNrQ29uZmlnXG59XG4iXSwibmFtZXMiOlsiZ2V0UHJvZENvbmZpZyIsInBheWxvYWRDb25maWciLCJiYXNlQ29uZmlnIiwiZ2V0QmFzZUNvbmZpZyIsIndlYnBhY2tDb25maWciLCJtb2RlIiwibW9kdWxlIiwicnVsZXMiLCJzaWRlRWZmZWN0cyIsInRlc3QiLCJ1c2UiLCJNaW5pQ1NTRXh0cmFjdFBsdWdpbiIsImxvYWRlciIsInJlcXVpcmUiLCJyZXNvbHZlIiwib3B0aW9ucyIsInVybCIsInN0YXJ0c1dpdGgiLCJwb3N0Y3NzT3B0aW9ucyIsInBsdWdpbnMiLCJvcHRpbWl6YXRpb24iLCJtaW5pbWl6ZXIiLCJTd2NNaW5pZnlXZWJwYWNrUGx1Z2luIiwic3BsaXRDaHVua3MiLCJjYWNoZUdyb3VwcyIsInN0eWxlcyIsIm5hbWUiLCJjaHVua3MiLCJlbmZvcmNlIiwib3V0cHV0IiwiY2h1bmtGaWxlbmFtZSIsImZpbGVuYW1lIiwicGF0aCIsImFkbWluIiwiYnVpbGRQYXRoIiwicHVibGljUGF0aCIsInJvdXRlcyIsImlnbm9yZU9yZGVyIiwicHJvY2VzcyIsImVudiIsIlBBWUxPQURfQU5BTFlaRV9CVU5ETEUiLCJCdW5kbGVBbmFseXplclBsdWdpbiIsInN0YXRzIiwid2VicGFjayJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFVYUE7OztlQUFBQTs7OzZFQVBvQjt3Q0FDTTt1Q0FFRjtzQkFFUDs7Ozs7O0FBRXZCLE1BQU1BLGdCQUFnQixDQUFDQztJQUM1QixNQUFNQyxhQUFhQyxJQUFBQSxtQkFBYSxFQUFDRjtJQUVqQyxJQUFJRyxnQkFBK0I7UUFDakMsR0FBR0YsVUFBVTtRQUNiRyxNQUFNO1FBQ05DLFFBQVE7WUFDTixHQUFHSixXQUFXSSxNQUFNO1lBQ3BCQyxPQUFPO21CQUNGTCxXQUFXSSxNQUFNLENBQUNDLEtBQUs7Z0JBQzFCO29CQUNFQyxhQUFhO29CQUNiQyxNQUFNO29CQUNOQyxLQUFLO3dCQUNIQyw2QkFBb0IsQ0FBQ0MsTUFBTTt3QkFDM0I7NEJBQ0VBLFFBQVFDLFFBQVFDLE9BQU8sQ0FBQzs0QkFDeEJDLFNBQVM7Z0NBQ1BDLEtBQUssQ0FBQ0EsTUFBUSxDQUFDQSxJQUFJQyxVQUFVLENBQUM7NEJBQ2hDO3dCQUNGO3dCQUNBOzRCQUNFTCxRQUFRQyxRQUFRQyxPQUFPLENBQUM7NEJBQ3hCQyxTQUFTO2dDQUNQRyxnQkFBZ0I7b0NBQ2RDLFNBQVM7d0NBQUNOLFFBQVFDLE9BQU8sQ0FBQztxQ0FBc0I7Z0NBQ2xEOzRCQUNGO3dCQUNGO3dCQUNBRCxRQUFRQyxPQUFPLENBQUM7cUJBQ2pCO2dCQUNIO2FBQ0Q7UUFDSDtRQUNBTSxjQUFjO1lBQ1pDLFdBQVc7Z0JBQUMsSUFBSUMsOENBQXNCO2FBQUc7WUFDekNDLGFBQWE7Z0JBQ1hDLGFBQWE7b0JBQ1hDLFFBQVE7d0JBQ05DLE1BQU07d0JBQ05DLFFBQVE7d0JBQ1JDLFNBQVM7d0JBQ1RuQixNQUFNO29CQUNSO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBb0IsUUFBUTtZQUNOQyxlQUFlO1lBQ2ZDLFVBQVU7WUFDVkMsTUFBTS9CLGNBQWNnQyxLQUFLLENBQUNDLFNBQVM7WUFDbkNDLFlBQVksQ0FBQyxFQUFFbEMsY0FBY21DLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QztRQUNBZCxTQUFTO2VBQ0pqQixXQUFXaUIsT0FBTztZQUNyQixJQUFJUiw2QkFBb0IsQ0FBQztnQkFDdkJvQixVQUFVO2dCQUNWTSxhQUFhO1lBQ2Y7ZUFDSUMsUUFBUUMsR0FBRyxDQUFDQyxzQkFBc0IsR0FBRztnQkFBQyxJQUFJQywyQ0FBb0I7YUFBRyxHQUFHLEVBQUU7U0FDM0U7UUFDREMsT0FBTztJQUNUO0lBRUEsSUFBSXpDLGNBQWNnQyxLQUFLLENBQUNVLE9BQU8sSUFBSSxPQUFPMUMsY0FBY2dDLEtBQUssQ0FBQ1UsT0FBTyxLQUFLLFlBQVk7UUFDcEZ2QyxnQkFBZ0JILGNBQWNnQyxLQUFLLENBQUNVLE9BQU8sQ0FBQ3ZDO0lBQzlDO0lBRUEsT0FBT0E7QUFDVCJ9