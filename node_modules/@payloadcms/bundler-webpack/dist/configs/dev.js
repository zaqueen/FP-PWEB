"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getDevConfig", {
    enumerable: true,
    get: function() {
        return getDevConfig;
    }
});
const _md5 = /*#__PURE__*/ _interop_require_default(require("md5"));
const _webpack = /*#__PURE__*/ _interop_require_default(require("webpack"));
const _base = require("./base");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getDevConfig = (payloadConfig)=>{
    const baseConfig = (0, _base.getBaseConfig)(payloadConfig);
    let webpackConfig = {
        ...baseConfig,
        cache: {
            type: 'filesystem',
            // version cache when there are changes to aliases
            buildDependencies: {
                config: [
                    __filename
                ]
            },
            version: (0, _md5.default)(Object.entries(baseConfig.resolve.alias).join())
        },
        devtool: 'inline-source-map',
        entry: {
            ...baseConfig.entry,
            main: [
                `${require.resolve('webpack-hot-middleware/client')}?path=${payloadConfig.routes.admin}/__webpack_hmr`,
                ...baseConfig.entry.main
            ]
        },
        mode: 'development',
        module: {
            ...baseConfig.module,
            rules: [
                ...baseConfig.module.rules,
                {
                    sideEffects: true,
                    test: /\.(scss|css)$/,
                    /*
           * The loaders here are run in reverse order. Here is how your loaders are being processed:
           * 1. sass-loader: This loader compiles your SCSS into CSS.
           * 2. postcss-loader: This loader applies postcss transformations (with preset-env plugin in your case).
           * 3. css-loader: This loader interprets @import and url() like import/require() and will resolve them.
           * 4. style-loader: This loader injects CSS into the DOM.
           */ use: [
                        require.resolve('style-loader'),
                        {
                            loader: require.resolve('css-loader'),
                            options: {
                                url: (url)=>!url.startsWith('/')
                            }
                        },
                        {
                            loader: require.resolve('postcss-loader'),
                            options: {
                                postcssOptions: {
                                    plugins: [
                                        require.resolve('postcss-preset-env')
                                    ]
                                }
                            }
                        },
                        require.resolve('sass-loader')
                    ]
                }
            ]
        },
        output: {
            filename: '[name].js',
            path: '/',
            publicPath: `${payloadConfig.routes.admin}/`
        },
        plugins: [
            ...baseConfig.plugins,
            new _webpack.default.HotModuleReplacementPlugin()
        ],
        stats: 'errors-warnings'
    };
    if (payloadConfig.admin.webpack && typeof payloadConfig.admin.webpack === 'function') {
        webpackConfig = payloadConfig.admin.webpack(webpackConfig);
    }
    return webpackConfig;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWdzL2Rldi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFNhbml0aXplZENvbmZpZyB9IGZyb20gJ3BheWxvYWQvY29uZmlnJ1xuaW1wb3J0IHR5cGUgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnd2VicGFjaydcblxuaW1wb3J0IG1kNSBmcm9tICdtZDUnXG5pbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJ1xuXG5pbXBvcnQgeyBnZXRCYXNlQ29uZmlnIH0gZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgY29uc3QgZ2V0RGV2Q29uZmlnID0gKHBheWxvYWRDb25maWc6IFNhbml0aXplZENvbmZpZyk6IENvbmZpZ3VyYXRpb24gPT4ge1xuICBjb25zdCBiYXNlQ29uZmlnID0gZ2V0QmFzZUNvbmZpZyhwYXlsb2FkQ29uZmlnKSBhcyBhbnlcblxuICBsZXQgd2VicGFja0NvbmZpZzogQ29uZmlndXJhdGlvbiA9IHtcbiAgICAuLi5iYXNlQ29uZmlnLFxuICAgIGNhY2hlOiB7XG4gICAgICB0eXBlOiAnZmlsZXN5c3RlbScsXG4gICAgICAvLyB2ZXJzaW9uIGNhY2hlIHdoZW4gdGhlcmUgYXJlIGNoYW5nZXMgdG8gYWxpYXNlc1xuICAgICAgYnVpbGREZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgY29uZmlnOiBbX19maWxlbmFtZV0sXG4gICAgICB9LFxuICAgICAgdmVyc2lvbjogbWQ1KE9iamVjdC5lbnRyaWVzKGJhc2VDb25maWcucmVzb2x2ZS5hbGlhcykuam9pbigpKSxcbiAgICB9LFxuICAgIGRldnRvb2w6ICdpbmxpbmUtc291cmNlLW1hcCcsXG4gICAgZW50cnk6IHtcbiAgICAgIC4uLmJhc2VDb25maWcuZW50cnksXG4gICAgICBtYWluOiBbXG4gICAgICAgIGAke3JlcXVpcmUucmVzb2x2ZSgnd2VicGFjay1ob3QtbWlkZGxld2FyZS9jbGllbnQnKX0/cGF0aD0ke1xuICAgICAgICAgIHBheWxvYWRDb25maWcucm91dGVzLmFkbWluXG4gICAgICAgIH0vX193ZWJwYWNrX2htcmAsXG4gICAgICAgIC4uLihiYXNlQ29uZmlnLmVudHJ5Lm1haW4gYXMgc3RyaW5nW10pLFxuICAgICAgXSxcbiAgICB9LFxuICAgIG1vZGU6ICdkZXZlbG9wbWVudCcsXG4gICAgbW9kdWxlOiB7XG4gICAgICAuLi5iYXNlQ29uZmlnLm1vZHVsZSxcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgIC4uLmJhc2VDb25maWcubW9kdWxlLnJ1bGVzLFxuICAgICAgICB7XG4gICAgICAgICAgc2lkZUVmZmVjdHM6IHRydWUsXG4gICAgICAgICAgdGVzdDogL1xcLihzY3NzfGNzcykkLyxcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIFRoZSBsb2FkZXJzIGhlcmUgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBIZXJlIGlzIGhvdyB5b3VyIGxvYWRlcnMgYXJlIGJlaW5nIHByb2Nlc3NlZDpcbiAgICAgICAgICAgKiAxLiBzYXNzLWxvYWRlcjogVGhpcyBsb2FkZXIgY29tcGlsZXMgeW91ciBTQ1NTIGludG8gQ1NTLlxuICAgICAgICAgICAqIDIuIHBvc3Rjc3MtbG9hZGVyOiBUaGlzIGxvYWRlciBhcHBsaWVzIHBvc3Rjc3MgdHJhbnNmb3JtYXRpb25zICh3aXRoIHByZXNldC1lbnYgcGx1Z2luIGluIHlvdXIgY2FzZSkuXG4gICAgICAgICAgICogMy4gY3NzLWxvYWRlcjogVGhpcyBsb2FkZXIgaW50ZXJwcmV0cyBAaW1wb3J0IGFuZCB1cmwoKSBsaWtlIGltcG9ydC9yZXF1aXJlKCkgYW5kIHdpbGwgcmVzb2x2ZSB0aGVtLlxuICAgICAgICAgICAqIDQuIHN0eWxlLWxvYWRlcjogVGhpcyBsb2FkZXIgaW5qZWN0cyBDU1MgaW50byB0aGUgRE9NLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgcmVxdWlyZS5yZXNvbHZlKCdzdHlsZS1sb2FkZXInKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbG9hZGVyOiByZXF1aXJlLnJlc29sdmUoJ2Nzcy1sb2FkZXInKSxcbiAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHVybDogKHVybCkgPT4gIXVybC5zdGFydHNXaXRoKCcvJyksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsb2FkZXI6IHJlcXVpcmUucmVzb2x2ZSgncG9zdGNzcy1sb2FkZXInKSxcbiAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHBvc3Rjc3NPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICBwbHVnaW5zOiBbcmVxdWlyZS5yZXNvbHZlKCdwb3N0Y3NzLXByZXNldC1lbnYnKV0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1aXJlLnJlc29sdmUoJ3Nhc3MtbG9hZGVyJyksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBvdXRwdXQ6IHtcbiAgICAgIGZpbGVuYW1lOiAnW25hbWVdLmpzJyxcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHB1YmxpY1BhdGg6IGAke3BheWxvYWRDb25maWcucm91dGVzLmFkbWlufS9gLFxuICAgIH0sXG4gICAgcGx1Z2luczogWy4uLmJhc2VDb25maWcucGx1Z2lucywgbmV3IHdlYnBhY2suSG90TW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4oKV0sXG4gICAgc3RhdHM6ICdlcnJvcnMtd2FybmluZ3MnLFxuICB9XG5cbiAgaWYgKHBheWxvYWRDb25maWcuYWRtaW4ud2VicGFjayAmJiB0eXBlb2YgcGF5bG9hZENvbmZpZy5hZG1pbi53ZWJwYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgd2VicGFja0NvbmZpZyA9IHBheWxvYWRDb25maWcuYWRtaW4ud2VicGFjayh3ZWJwYWNrQ29uZmlnKVxuICB9XG5cbiAgcmV0dXJuIHdlYnBhY2tDb25maWdcbn1cbiJdLCJuYW1lcyI6WyJnZXREZXZDb25maWciLCJwYXlsb2FkQ29uZmlnIiwiYmFzZUNvbmZpZyIsImdldEJhc2VDb25maWciLCJ3ZWJwYWNrQ29uZmlnIiwiY2FjaGUiLCJ0eXBlIiwiYnVpbGREZXBlbmRlbmNpZXMiLCJjb25maWciLCJfX2ZpbGVuYW1lIiwidmVyc2lvbiIsIm1kNSIsIk9iamVjdCIsImVudHJpZXMiLCJyZXNvbHZlIiwiYWxpYXMiLCJqb2luIiwiZGV2dG9vbCIsImVudHJ5IiwibWFpbiIsInJlcXVpcmUiLCJyb3V0ZXMiLCJhZG1pbiIsIm1vZGUiLCJtb2R1bGUiLCJydWxlcyIsInNpZGVFZmZlY3RzIiwidGVzdCIsInVzZSIsImxvYWRlciIsIm9wdGlvbnMiLCJ1cmwiLCJzdGFydHNXaXRoIiwicG9zdGNzc09wdGlvbnMiLCJwbHVnaW5zIiwib3V0cHV0IiwiZmlsZW5hbWUiLCJwYXRoIiwicHVibGljUGF0aCIsIndlYnBhY2siLCJIb3RNb2R1bGVSZXBsYWNlbWVudFBsdWdpbiIsInN0YXRzIl0sIm1hcHBpbmdzIjoiOzs7OytCQVFhQTs7O2VBQUFBOzs7NERBTEc7Z0VBQ0k7c0JBRVU7Ozs7OztBQUV2QixNQUFNQSxlQUFlLENBQUNDO0lBQzNCLE1BQU1DLGFBQWFDLElBQUFBLG1CQUFhLEVBQUNGO0lBRWpDLElBQUlHLGdCQUErQjtRQUNqQyxHQUFHRixVQUFVO1FBQ2JHLE9BQU87WUFDTEMsTUFBTTtZQUNOLGtEQUFrRDtZQUNsREMsbUJBQW1CO2dCQUNqQkMsUUFBUTtvQkFBQ0M7aUJBQVc7WUFDdEI7WUFDQUMsU0FBU0MsSUFBQUEsWUFBRyxFQUFDQyxPQUFPQyxPQUFPLENBQUNYLFdBQVdZLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFQyxJQUFJO1FBQzVEO1FBQ0FDLFNBQVM7UUFDVEMsT0FBTztZQUNMLEdBQUdoQixXQUFXZ0IsS0FBSztZQUNuQkMsTUFBTTtnQkFDSixDQUFDLEVBQUVDLFFBQVFOLE9BQU8sQ0FBQyxpQ0FBaUMsTUFBTSxFQUN4RGIsY0FBY29CLE1BQU0sQ0FBQ0MsS0FBSyxDQUMzQixjQUFjLENBQUM7bUJBQ1pwQixXQUFXZ0IsS0FBSyxDQUFDQyxJQUFJO2FBQzFCO1FBQ0g7UUFDQUksTUFBTTtRQUNOQyxRQUFRO1lBQ04sR0FBR3RCLFdBQVdzQixNQUFNO1lBQ3BCQyxPQUFPO21CQUNGdkIsV0FBV3NCLE1BQU0sQ0FBQ0MsS0FBSztnQkFDMUI7b0JBQ0VDLGFBQWE7b0JBQ2JDLE1BQU07b0JBQ047Ozs7OztXQU1DLEdBQ0RDLEtBQUs7d0JBQ0hSLFFBQVFOLE9BQU8sQ0FBQzt3QkFDaEI7NEJBQ0VlLFFBQVFULFFBQVFOLE9BQU8sQ0FBQzs0QkFDeEJnQixTQUFTO2dDQUNQQyxLQUFLLENBQUNBLE1BQVEsQ0FBQ0EsSUFBSUMsVUFBVSxDQUFDOzRCQUNoQzt3QkFDRjt3QkFDQTs0QkFDRUgsUUFBUVQsUUFBUU4sT0FBTyxDQUFDOzRCQUN4QmdCLFNBQVM7Z0NBQ1BHLGdCQUFnQjtvQ0FDZEMsU0FBUzt3Q0FBQ2QsUUFBUU4sT0FBTyxDQUFDO3FDQUFzQjtnQ0FDbEQ7NEJBQ0Y7d0JBQ0Y7d0JBQ0FNLFFBQVFOLE9BQU8sQ0FBQztxQkFDakI7Z0JBQ0g7YUFDRDtRQUNIO1FBQ0FxQixRQUFRO1lBQ05DLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxZQUFZLENBQUMsRUFBRXJDLGNBQWNvQixNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUM7UUFDQVksU0FBUztlQUFJaEMsV0FBV2dDLE9BQU87WUFBRSxJQUFJSyxnQkFBTyxDQUFDQywwQkFBMEI7U0FBRztRQUMxRUMsT0FBTztJQUNUO0lBRUEsSUFBSXhDLGNBQWNxQixLQUFLLENBQUNpQixPQUFPLElBQUksT0FBT3RDLGNBQWNxQixLQUFLLENBQUNpQixPQUFPLEtBQUssWUFBWTtRQUNwRm5DLGdCQUFnQkgsY0FBY3FCLEtBQUssQ0FBQ2lCLE9BQU8sQ0FBQ25DO0lBQzlDO0lBRUEsT0FBT0E7QUFDVCJ9