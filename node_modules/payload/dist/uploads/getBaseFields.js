"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _extractTranslations = require("../translations/extractTranslations");
const _mimeTypeValidator = require("./mimeTypeValidator");
const labels = (0, _extractTranslations.extractTranslations)([
    'upload:width',
    'upload:height',
    'upload:fileSize',
    'upload:fileName',
    'upload:sizes'
]);
const getBaseUploadFields = ({ collection, config })=>{
    const uploadOptions = typeof collection.upload === 'object' ? collection.upload : {};
    const mimeType = {
        name: 'mimeType',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: 'MIME Type',
        type: 'text'
    };
    const url = {
        name: 'url',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: 'URL',
        type: 'text'
    };
    const width = {
        name: 'width',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:width'],
        type: 'number'
    };
    const height = {
        name: 'height',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:height'],
        type: 'number'
    };
    const filesize = {
        name: 'filesize',
        admin: {
            hidden: true,
            readOnly: true
        },
        label: labels['upload:fileSize'],
        type: 'number'
    };
    const filename = {
        name: 'filename',
        admin: {
            disableBulkEdit: true,
            hidden: true,
            readOnly: true
        },
        index: true,
        label: labels['upload:fileName'],
        type: 'text',
        unique: true
    };
    let uploadFields = [
        {
            ...url,
            hooks: {
                afterRead: [
                    ({ data })=>{
                        if (data?.filename) {
                            if (uploadOptions.staticURL.startsWith('/')) {
                                return `${config.serverURL}${uploadOptions.staticURL}/${data.filename}`;
                            }
                            return `${uploadOptions.staticURL}/${data.filename}`;
                        }
                        return undefined;
                    }
                ]
            }
        },
        filename,
        mimeType,
        filesize,
        width,
        height
    ];
    if (uploadOptions.mimeTypes) {
        mimeType.validate = (0, _mimeTypeValidator.mimeTypeValidator)(uploadOptions.mimeTypes);
    }
    if (uploadOptions.imageSizes) {
        uploadFields = uploadFields.concat([
            {
                name: 'sizes',
                admin: {
                    hidden: true
                },
                fields: uploadOptions.imageSizes.map((size)=>({
                        name: size.name,
                        admin: {
                            hidden: true
                        },
                        fields: [
                            {
                                ...url,
                                hooks: {
                                    afterRead: [
                                        ({ data })=>{
                                            const sizeFilename = data?.sizes?.[size.name]?.filename;
                                            if (sizeFilename) {
                                                if (uploadOptions.staticURL.startsWith('/')) {
                                                    return `${config.serverURL}${uploadOptions.staticURL}/${sizeFilename}`;
                                                }
                                                return `${uploadOptions.staticURL}/${sizeFilename}`;
                                            }
                                            return undefined;
                                        }
                                    ]
                                }
                            },
                            width,
                            height,
                            mimeType,
                            filesize,
                            {
                                ...filename,
                                unique: false
                            }
                        ],
                        label: size.name,
                        type: 'group'
                    })),
                label: labels['upload:Sizes'],
                type: 'group'
            }
        ]);
    }
    return uploadFields;
};
const _default = getBaseUploadFields;

//# sourceMappingURL=data:application/json;base64,