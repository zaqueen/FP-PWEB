"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    componentSchema: function() {
        return componentSchema;
    },
    documentTabSchema: function() {
        return documentTabSchema;
    },
    customViewSchema: function() {
        return customViewSchema;
    },
    livePreviewSchema: function() {
        return livePreviewSchema;
    }
});
const _joi = /*#__PURE__*/ _interop_require_default(require("joi"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const componentSchema = _joi.default.alternatives().try(_joi.default.object().unknown(), _joi.default.func());
const documentTabSchema = {
    condition: _joi.default.func(),
    href: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()).required(),
    isActive: _joi.default.alternatives().try(_joi.default.func(), _joi.default.boolean()),
    label: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()).required(),
    newTab: _joi.default.boolean(),
    pillLabel: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func())
};
const customViewSchema = _joi.default.object({
    Component: componentSchema,
    Tab: _joi.default.alternatives().try(documentTabSchema, componentSchema),
    path: _joi.default.string()
});
const livePreviewSchema = {
    breakpoints: _joi.default.array().items(_joi.default.object({
        name: _joi.default.string(),
        height: _joi.default.alternatives().try(_joi.default.number(), _joi.default.string()),
        label: _joi.default.string(),
        width: _joi.default.alternatives().try(_joi.default.number(), _joi.default.string())
    })),
    url: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func())
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvc2hhcmVkL2NvbXBvbmVudFNjaGVtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgam9pIGZyb20gJ2pvaSdcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudFNjaGVtYSA9IGpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoam9pLm9iamVjdCgpLnVua25vd24oKSwgam9pLmZ1bmMoKSlcblxuZXhwb3J0IGNvbnN0IGRvY3VtZW50VGFiU2NoZW1hID0ge1xuICBjb25kaXRpb246IGpvaS5mdW5jKCksXG4gIGhyZWY6IGpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoam9pLnN0cmluZygpLCBqb2kuZnVuYygpKS5yZXF1aXJlZCgpLFxuICBpc0FjdGl2ZTogam9pLmFsdGVybmF0aXZlcygpLnRyeShqb2kuZnVuYygpLCBqb2kuYm9vbGVhbigpKSxcbiAgbGFiZWw6IGpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoam9pLnN0cmluZygpLCBqb2kuZnVuYygpKS5yZXF1aXJlZCgpLFxuICBuZXdUYWI6IGpvaS5ib29sZWFuKCksXG4gIHBpbGxMYWJlbDogam9pLmFsdGVybmF0aXZlcygpLnRyeShqb2kuc3RyaW5nKCksIGpvaS5mdW5jKCkpLFxufVxuXG5leHBvcnQgY29uc3QgY3VzdG9tVmlld1NjaGVtYSA9IGpvaS5vYmplY3Qoe1xuICBDb21wb25lbnQ6IGNvbXBvbmVudFNjaGVtYSxcbiAgVGFiOiBqb2kuYWx0ZXJuYXRpdmVzKCkudHJ5KGRvY3VtZW50VGFiU2NoZW1hLCBjb21wb25lbnRTY2hlbWEpLFxuICBwYXRoOiBqb2kuc3RyaW5nKCksXG59KVxuXG5leHBvcnQgY29uc3QgbGl2ZVByZXZpZXdTY2hlbWEgPSB7XG4gIGJyZWFrcG9pbnRzOiBqb2kuYXJyYXkoKS5pdGVtcyhcbiAgICBqb2kub2JqZWN0KHtcbiAgICAgIG5hbWU6IGpvaS5zdHJpbmcoKSxcbiAgICAgIGhlaWdodDogam9pLmFsdGVybmF0aXZlcygpLnRyeShqb2kubnVtYmVyKCksIGpvaS5zdHJpbmcoKSksXG4gICAgICBsYWJlbDogam9pLnN0cmluZygpLFxuICAgICAgd2lkdGg6IGpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoam9pLm51bWJlcigpLCBqb2kuc3RyaW5nKCkpLFxuICAgIH0pLFxuICApLFxuICB1cmw6IGpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoam9pLnN0cmluZygpLCBqb2kuZnVuYygpKSxcbn1cbiJdLCJuYW1lcyI6WyJjb21wb25lbnRTY2hlbWEiLCJkb2N1bWVudFRhYlNjaGVtYSIsImN1c3RvbVZpZXdTY2hlbWEiLCJsaXZlUHJldmlld1NjaGVtYSIsImpvaSIsImFsdGVybmF0aXZlcyIsInRyeSIsIm9iamVjdCIsInVua25vd24iLCJmdW5jIiwiY29uZGl0aW9uIiwiaHJlZiIsInN0cmluZyIsInJlcXVpcmVkIiwiaXNBY3RpdmUiLCJib29sZWFuIiwibGFiZWwiLCJuZXdUYWIiLCJwaWxsTGFiZWwiLCJDb21wb25lbnQiLCJUYWIiLCJwYXRoIiwiYnJlYWtwb2ludHMiLCJhcnJheSIsIml0ZW1zIiwibmFtZSIsImhlaWdodCIsIm51bWJlciIsIndpZHRoIiwidXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUVhQSxlQUFlO2VBQWZBOztJQUVBQyxpQkFBaUI7ZUFBakJBOztJQVNBQyxnQkFBZ0I7ZUFBaEJBOztJQU1BQyxpQkFBaUI7ZUFBakJBOzs7NERBbkJHOzs7Ozs7QUFFVCxNQUFNSCxrQkFBa0JJLFlBQUcsQ0FBQ0MsWUFBWSxHQUFHQyxHQUFHLENBQUNGLFlBQUcsQ0FBQ0csTUFBTSxHQUFHQyxPQUFPLElBQUlKLFlBQUcsQ0FBQ0ssSUFBSTtBQUUvRSxNQUFNUixvQkFBb0I7SUFDL0JTLFdBQVdOLFlBQUcsQ0FBQ0ssSUFBSTtJQUNuQkUsTUFBTVAsWUFBRyxDQUFDQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBRyxDQUFDUSxNQUFNLElBQUlSLFlBQUcsQ0FBQ0ssSUFBSSxJQUFJSSxRQUFRO0lBQy9EQyxVQUFVVixZQUFHLENBQUNDLFlBQVksR0FBR0MsR0FBRyxDQUFDRixZQUFHLENBQUNLLElBQUksSUFBSUwsWUFBRyxDQUFDVyxPQUFPO0lBQ3hEQyxPQUFPWixZQUFHLENBQUNDLFlBQVksR0FBR0MsR0FBRyxDQUFDRixZQUFHLENBQUNRLE1BQU0sSUFBSVIsWUFBRyxDQUFDSyxJQUFJLElBQUlJLFFBQVE7SUFDaEVJLFFBQVFiLFlBQUcsQ0FBQ1csT0FBTztJQUNuQkcsV0FBV2QsWUFBRyxDQUFDQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBRyxDQUFDUSxNQUFNLElBQUlSLFlBQUcsQ0FBQ0ssSUFBSTtBQUMxRDtBQUVPLE1BQU1QLG1CQUFtQkUsWUFBRyxDQUFDRyxNQUFNLENBQUM7SUFDekNZLFdBQVduQjtJQUNYb0IsS0FBS2hCLFlBQUcsQ0FBQ0MsWUFBWSxHQUFHQyxHQUFHLENBQUNMLG1CQUFtQkQ7SUFDL0NxQixNQUFNakIsWUFBRyxDQUFDUSxNQUFNO0FBQ2xCO0FBRU8sTUFBTVQsb0JBQW9CO0lBQy9CbUIsYUFBYWxCLFlBQUcsQ0FBQ21CLEtBQUssR0FBR0MsS0FBSyxDQUM1QnBCLFlBQUcsQ0FBQ0csTUFBTSxDQUFDO1FBQ1RrQixNQUFNckIsWUFBRyxDQUFDUSxNQUFNO1FBQ2hCYyxRQUFRdEIsWUFBRyxDQUFDQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBRyxDQUFDdUIsTUFBTSxJQUFJdkIsWUFBRyxDQUFDUSxNQUFNO1FBQ3ZESSxPQUFPWixZQUFHLENBQUNRLE1BQU07UUFDakJnQixPQUFPeEIsWUFBRyxDQUFDQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBRyxDQUFDdUIsTUFBTSxJQUFJdkIsWUFBRyxDQUFDUSxNQUFNO0lBQ3hEO0lBRUZpQixLQUFLekIsWUFBRyxDQUFDQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBRyxDQUFDUSxNQUFNLElBQUlSLFlBQUcsQ0FBQ0ssSUFBSTtBQUNwRCJ9