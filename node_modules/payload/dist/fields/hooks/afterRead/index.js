"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "afterRead", {
    enumerable: true,
    get: function() {
        return afterRead;
    }
});
const _deepCopyObject = require("../../../utilities/deepCopyObject");
const _traverseFields = require("./traverseFields");
async function afterRead(args) {
    const { collection, context, currentDepth: incomingCurrentDepth, depth: incomingDepth, doc: incomingDoc, findMany, flattenLocales = true, global, overrideAccess, req, showHiddenFields } = args;
    const doc = (0, _deepCopyObject.deepCopyObject)(incomingDoc);
    const fieldPromises = [];
    const populationPromises = [];
    let depth = incomingDepth || incomingDepth === 0 ? parseInt(String(incomingDepth), 10) : req.payload.config.defaultDepth;
    if (depth > req.payload.config.maxDepth) depth = req.payload.config.maxDepth;
    const currentDepth = incomingCurrentDepth || 1;
    (0, _traverseFields.traverseFields)({
        collection,
        context,
        currentDepth,
        depth,
        doc,
        fieldPromises,
        fields: collection?.fields || global?.fields,
        findMany,
        flattenLocales,
        global,
        overrideAccess,
        populationPromises,
        req,
        showHiddenFields,
        siblingDoc: doc
    });
    await Promise.all(fieldPromises);
    await Promise.all(populationPromises);
    return doc;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9maWVsZHMvaG9va3MvYWZ0ZXJSZWFkL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5cbmltcG9ydCB7IGRlZXBDb3B5T2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2RlZXBDb3B5T2JqZWN0J1xuaW1wb3J0IHsgdHJhdmVyc2VGaWVsZHMgfSBmcm9tICcuL3RyYXZlcnNlRmllbGRzJ1xuXG50eXBlIEFyZ3MgPSB7XG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWcgfCBudWxsXG4gIGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aDogbnVtYmVyXG4gIGRvYzogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgZmluZE1hbnk/OiBib29sZWFuXG4gIGZsYXR0ZW5Mb2NhbGVzPzogYm9vbGVhblxuICBnbG9iYWw6IFNhbml0aXplZEdsb2JhbENvbmZpZyB8IG51bGxcbiAgb3ZlcnJpZGVBY2Nlc3M6IGJvb2xlYW5cbiAgcmVxOiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzOiBib29sZWFuXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZnRlclJlYWQ8VCA9IGFueT4oYXJnczogQXJncyk6IFByb21pc2U8VD4ge1xuICBjb25zdCB7XG4gICAgY29sbGVjdGlvbixcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aDogaW5jb21pbmdDdXJyZW50RGVwdGgsXG4gICAgZGVwdGg6IGluY29taW5nRGVwdGgsXG4gICAgZG9jOiBpbmNvbWluZ0RvYyxcbiAgICBmaW5kTWFueSxcbiAgICBmbGF0dGVuTG9jYWxlcyA9IHRydWUsXG4gICAgZ2xvYmFsLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9ID0gYXJnc1xuXG4gIGNvbnN0IGRvYyA9IGRlZXBDb3B5T2JqZWN0KGluY29taW5nRG9jKVxuICBjb25zdCBmaWVsZFByb21pc2VzID0gW11cbiAgY29uc3QgcG9wdWxhdGlvblByb21pc2VzID0gW11cblxuICBsZXQgZGVwdGggPVxuICAgIGluY29taW5nRGVwdGggfHwgaW5jb21pbmdEZXB0aCA9PT0gMFxuICAgICAgPyBwYXJzZUludChTdHJpbmcoaW5jb21pbmdEZXB0aCksIDEwKVxuICAgICAgOiByZXEucGF5bG9hZC5jb25maWcuZGVmYXVsdERlcHRoXG4gIGlmIChkZXB0aCA+IHJlcS5wYXlsb2FkLmNvbmZpZy5tYXhEZXB0aCkgZGVwdGggPSByZXEucGF5bG9hZC5jb25maWcubWF4RGVwdGhcblxuICBjb25zdCBjdXJyZW50RGVwdGggPSBpbmNvbWluZ0N1cnJlbnREZXB0aCB8fCAxXG5cbiAgdHJhdmVyc2VGaWVsZHMoe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgY29udGV4dCxcbiAgICBjdXJyZW50RGVwdGgsXG4gICAgZGVwdGgsXG4gICAgZG9jLFxuICAgIGZpZWxkUHJvbWlzZXMsXG4gICAgZmllbGRzOiBjb2xsZWN0aW9uPy5maWVsZHMgfHwgZ2xvYmFsPy5maWVsZHMsXG4gICAgZmluZE1hbnksXG4gICAgZmxhdHRlbkxvY2FsZXMsXG4gICAgZ2xvYmFsLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHBvcHVsYXRpb25Qcm9taXNlcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzaWJsaW5nRG9jOiBkb2MsXG4gIH0pXG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwoZmllbGRQcm9taXNlcylcbiAgYXdhaXQgUHJvbWlzZS5hbGwocG9wdWxhdGlvblByb21pc2VzKVxuXG4gIHJldHVybiBkb2Ncbn1cbiJdLCJuYW1lcyI6WyJhZnRlclJlYWQiLCJhcmdzIiwiY29sbGVjdGlvbiIsImNvbnRleHQiLCJjdXJyZW50RGVwdGgiLCJpbmNvbWluZ0N1cnJlbnREZXB0aCIsImRlcHRoIiwiaW5jb21pbmdEZXB0aCIsImRvYyIsImluY29taW5nRG9jIiwiZmluZE1hbnkiLCJmbGF0dGVuTG9jYWxlcyIsImdsb2JhbCIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsImRlZXBDb3B5T2JqZWN0IiwiZmllbGRQcm9taXNlcyIsInBvcHVsYXRpb25Qcm9taXNlcyIsInBhcnNlSW50IiwiU3RyaW5nIiwicGF5bG9hZCIsImNvbmZpZyIsImRlZmF1bHREZXB0aCIsIm1heERlcHRoIiwidHJhdmVyc2VGaWVsZHMiLCJmaWVsZHMiLCJzaWJsaW5nRG9jIiwiUHJvbWlzZSIsImFsbCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFxQnNCQTs7O2VBQUFBOzs7Z0NBakJTO2dDQUNBO0FBZ0J4QixlQUFlQSxVQUFtQkMsSUFBVTtJQUNqRCxNQUFNLEVBQ0pDLFVBQVUsRUFDVkMsT0FBTyxFQUNQQyxjQUFjQyxvQkFBb0IsRUFDbENDLE9BQU9DLGFBQWEsRUFDcEJDLEtBQUtDLFdBQVcsRUFDaEJDLFFBQVEsRUFDUkMsaUJBQWlCLElBQUksRUFDckJDLE1BQU0sRUFDTkMsY0FBYyxFQUNkQyxHQUFHLEVBQ0hDLGdCQUFnQixFQUNqQixHQUFHZDtJQUVKLE1BQU1PLE1BQU1RLElBQUFBLDhCQUFjLEVBQUNQO0lBQzNCLE1BQU1RLGdCQUFnQixFQUFFO0lBQ3hCLE1BQU1DLHFCQUFxQixFQUFFO0lBRTdCLElBQUlaLFFBQ0ZDLGlCQUFpQkEsa0JBQWtCLElBQy9CWSxTQUFTQyxPQUFPYixnQkFBZ0IsTUFDaENPLElBQUlPLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxZQUFZO0lBQ3JDLElBQUlqQixRQUFRUSxJQUFJTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsUUFBUSxFQUFFbEIsUUFBUVEsSUFBSU8sT0FBTyxDQUFDQyxNQUFNLENBQUNFLFFBQVE7SUFFNUUsTUFBTXBCLGVBQWVDLHdCQUF3QjtJQUU3Q29CLElBQUFBLDhCQUFjLEVBQUM7UUFDYnZCO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FFO1FBQ0FTO1FBQ0FTLFFBQVF4QixZQUFZd0IsVUFBVWQsUUFBUWM7UUFDdENoQjtRQUNBQztRQUNBQztRQUNBQztRQUNBSztRQUNBSjtRQUNBQztRQUNBWSxZQUFZbkI7SUFDZDtJQUVBLE1BQU1vQixRQUFRQyxHQUFHLENBQUNaO0lBQ2xCLE1BQU1XLFFBQVFDLEdBQUcsQ0FBQ1g7SUFFbEIsT0FBT1Y7QUFDVCJ9