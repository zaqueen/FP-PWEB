/* eslint-disable no-use-before-define */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCollectionIDType: function() {
        return getCollectionIDType;
    },
    default: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _graphqltypejson = require("graphql-type-json");
const _types = require("../../fields/config/types");
const _formatLabels = require("../../utilities/formatLabels");
const _groupOrTabHasRequiredSubfield = require("../../utilities/groupOrTabHasRequiredSubfield");
const _combineParentName = /*#__PURE__*/ _interop_require_default(require("../utilities/combineParentName"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
const _withNullableType = /*#__PURE__*/ _interop_require_default(require("./withNullableType"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const idFieldTypes = {
    number: _graphql.GraphQLInt,
    text: _graphql.GraphQLString
};
const getCollectionIDType = (payload, collection)=>{
    const idField = collection.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
    if (!idField) {
        return idFieldTypes[payload.db.defaultIDType];
    }
    return idFieldTypes[idField.type];
};
function buildMutationInputType(payload, name, fields, parentName, forceNullable = false) {
    const fieldToSchemaMap = {
        array: (inputObjectTypeConfig, field)=>{
            const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            let type = buildMutationInputType(payload, fullName, field.fields, fullName);
            type = new _graphql.GraphQLList((0, _withNullableType.default)(field, type, forceNullable));
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        blocks: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: _graphqltypejson.GraphQLJSON
                }
            }),
        checkbox: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: _graphql.GraphQLBoolean
                }
            }),
        code: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        collapsible: (inputObjectTypeConfig, field)=>field.fields.reduce((acc, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(acc, subField);
                return acc;
            }, inputObjectTypeConfig),
        date: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        email: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        group: (inputObjectTypeConfig, field)=>{
            const requiresAtLeastOneField = (0, _groupOrTabHasRequiredSubfield.groupOrTabHasRequiredSubfield)(field);
            const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            let type = buildMutationInputType(payload, fullName, field.fields, fullName);
            if (requiresAtLeastOneField) type = new _graphql.GraphQLNonNull(type);
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        json: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable)
                }
            }),
        number: (inputObjectTypeConfig, field)=>{
            const type = field.name === 'id' ? _graphql.GraphQLInt : _graphql.GraphQLFloat;
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, field.hasMany === true ? new _graphql.GraphQLList(type) : type, forceNullable)
                }
            };
        },
        point: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, new _graphql.GraphQLList(_graphql.GraphQLFloat), forceNullable)
                }
            }),
        radio: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        relationship: (inputObjectTypeConfig, field)=>{
            const { relationTo } = field;
            let type;
            if (Array.isArray(relationTo)) {
                const fullName = `${(0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true))}RelationshipInput`;
                type = new _graphql.GraphQLInputObjectType({
                    name: fullName,
                    fields: {
                        relationTo: {
                            type: new _graphql.GraphQLEnumType({
                                name: `${fullName}RelationTo`,
                                values: relationTo.reduce((values, option)=>({
                                        ...values,
                                        [(0, _formatName.default)(option)]: {
                                            value: option
                                        }
                                    }), {})
                            })
                        },
                        value: {
                            type: _graphqltypejson.GraphQLJSON
                        }
                    }
                });
            } else {
                type = getCollectionIDType(payload, payload.collections[relationTo].config);
            }
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: field.hasMany ? new _graphql.GraphQLList(type) : type
                }
            };
        },
        richText: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable)
                }
            }),
        row: (inputObjectTypeConfig, field)=>field.fields.reduce((acc, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(acc, subField);
                return acc;
            }, inputObjectTypeConfig),
        select: (inputObjectTypeConfig, field)=>{
            const formattedName = `${(0, _combineParentName.default)(parentName, field.name)}_MutationInput`;
            let type = new _graphql.GraphQLEnumType({
                name: formattedName,
                values: field.options.reduce((values, option)=>{
                    if ((0, _types.optionIsObject)(option)) {
                        return {
                            ...values,
                            [(0, _formatName.default)(option.value)]: {
                                value: option.value
                            }
                        };
                    }
                    return {
                        ...values,
                        [(0, _formatName.default)(option)]: {
                            value: option
                        }
                    };
                }, {})
            });
            type = field.hasMany ? new _graphql.GraphQLList(type) : type;
            type = (0, _withNullableType.default)(field, type, forceNullable);
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        tabs: (inputObjectTypeConfig, field)=>{
            return field.tabs.reduce((acc, tab)=>{
                if ((0, _types.tabHasName)(tab)) {
                    const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(tab.name, true));
                    const requiresAtLeastOneField = (0, _groupOrTabHasRequiredSubfield.groupOrTabHasRequiredSubfield)(field);
                    let type = buildMutationInputType(payload, fullName, tab.fields, fullName);
                    if (requiresAtLeastOneField) type = new _graphql.GraphQLNonNull(type);
                    return {
                        ...acc,
                        [tab.name]: {
                            type
                        }
                    };
                }
                return {
                    ...acc,
                    ...tab.fields.reduce((subFieldSchema, subField)=>{
                        const addSubField = fieldToSchemaMap[subField.type];
                        if (addSubField) return addSubField(subFieldSchema, subField);
                        return subFieldSchema;
                    }, acc)
                };
            }, inputObjectTypeConfig);
        },
        text: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        textarea: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        upload: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            })
    };
    const fieldName = (0, _formatName.default)(name);
    return new _graphql.GraphQLInputObjectType({
        name: `mutation${fieldName}Input`,
        fields: fields.reduce((inputObjectTypeConfig, field)=>{
            const fieldSchema = fieldToSchemaMap[field.type];
            if (typeof fieldSchema !== 'function') {
                return inputObjectTypeConfig;
            }
            return {
                ...inputObjectTypeConfig,
                ...fieldSchema(inputObjectTypeConfig, field)
            };
        }, {})
    });
}
const _default = buildMutationInputType;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3NjaGVtYS9idWlsZE11dGF0aW9uSW5wdXRUeXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgdHlwZSB7IEdyYXBoUUxJbnB1dEZpZWxkQ29uZmlnLCBHcmFwaFFMU2NhbGFyVHlwZSwgR3JhcGhRTFR5cGUgfSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQge1xuICBHcmFwaFFMQm9vbGVhbixcbiAgR3JhcGhRTEVudW1UeXBlLFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsXG4gIEdyYXBoUUxJbnQsXG4gIEdyYXBoUUxMaXN0LFxuICBHcmFwaFFMTm9uTnVsbCxcbiAgR3JhcGhRTFN0cmluZyxcbn0gZnJvbSAnZ3JhcGhxbCdcbmltcG9ydCB7IEdyYXBoUUxKU09OIH0gZnJvbSAnZ3JhcGhxbC10eXBlLWpzb24nXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHtcbiAgQXJyYXlGaWVsZCxcbiAgQmxvY2tGaWVsZCxcbiAgQ2hlY2tib3hGaWVsZCxcbiAgQ29kZUZpZWxkLFxuICBDb2xsYXBzaWJsZUZpZWxkLFxuICBEYXRlRmllbGQsXG4gIEVtYWlsRmllbGQsXG4gIEZpZWxkLFxuICBHcm91cEZpZWxkLFxuICBKU09ORmllbGQsXG4gIE51bWJlckZpZWxkLFxuICBQb2ludEZpZWxkLFxuICBSYWRpb0ZpZWxkLFxuICBSZWxhdGlvbnNoaXBGaWVsZCxcbiAgUmljaFRleHRGaWVsZCxcbiAgUm93RmllbGQsXG4gIFNlbGVjdEZpZWxkLFxuICBUYWJzRmllbGQsXG4gIFRleHRGaWVsZCxcbiAgVGV4dGFyZWFGaWVsZCxcbiAgVXBsb2FkRmllbGQsXG59IGZyb20gJy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi9wYXlsb2FkJ1xuXG5pbXBvcnQgeyBmaWVsZEFmZmVjdHNEYXRhLCBvcHRpb25Jc09iamVjdCwgdGFiSGFzTmFtZSB9IGZyb20gJy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgeyB0b1dvcmRzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2Zvcm1hdExhYmVscydcbmltcG9ydCB7IGdyb3VwT3JUYWJIYXNSZXF1aXJlZFN1YmZpZWxkIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2dyb3VwT3JUYWJIYXNSZXF1aXJlZFN1YmZpZWxkJ1xuaW1wb3J0IGNvbWJpbmVQYXJlbnROYW1lIGZyb20gJy4uL3V0aWxpdGllcy9jb21iaW5lUGFyZW50TmFtZSdcbmltcG9ydCBmb3JtYXROYW1lIGZyb20gJy4uL3V0aWxpdGllcy9mb3JtYXROYW1lJ1xuaW1wb3J0IHdpdGhOdWxsYWJsZVR5cGUgZnJvbSAnLi93aXRoTnVsbGFibGVUeXBlJ1xuXG5jb25zdCBpZEZpZWxkVHlwZXMgPSB7XG4gIG51bWJlcjogR3JhcGhRTEludCxcbiAgdGV4dDogR3JhcGhRTFN0cmluZyxcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbGxlY3Rpb25JRFR5cGUgPSAoXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWcsXG4pOiBHcmFwaFFMU2NhbGFyVHlwZSA9PiB7XG4gIGNvbnN0IGlkRmllbGQgPSBjb2xsZWN0aW9uLmZpZWxkcy5maW5kKChmaWVsZCkgPT4gZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgZmllbGQubmFtZSA9PT0gJ2lkJylcblxuICBpZiAoIWlkRmllbGQpIHtcbiAgICByZXR1cm4gaWRGaWVsZFR5cGVzW3BheWxvYWQuZGIuZGVmYXVsdElEVHlwZV1cbiAgfVxuXG4gIHJldHVybiBpZEZpZWxkVHlwZXNbaWRGaWVsZC50eXBlXVxufVxuXG5leHBvcnQgdHlwZSBJbnB1dE9iamVjdFR5cGVDb25maWcgPSB7XG4gIFtwYXRoOiBzdHJpbmddOiBHcmFwaFFMSW5wdXRGaWVsZENvbmZpZ1xufVxuXG5mdW5jdGlvbiBidWlsZE11dGF0aW9uSW5wdXRUeXBlKFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBuYW1lOiBzdHJpbmcsXG4gIGZpZWxkczogRmllbGRbXSxcbiAgcGFyZW50TmFtZTogc3RyaW5nLFxuICBmb3JjZU51bGxhYmxlID0gZmFsc2UsXG4pOiBHcmFwaFFMSW5wdXRPYmplY3RUeXBlIHtcbiAgY29uc3QgZmllbGRUb1NjaGVtYU1hcCA9IHtcbiAgICBhcnJheTogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogQXJyYXlGaWVsZCkgPT4ge1xuICAgICAgY29uc3QgZnVsbE5hbWUgPSBjb21iaW5lUGFyZW50TmFtZShwYXJlbnROYW1lLCB0b1dvcmRzKGZpZWxkLm5hbWUsIHRydWUpKVxuICAgICAgbGV0IHR5cGU6IEdyYXBoUUxMaXN0PEdyYXBoUUxUeXBlPiB8IEdyYXBoUUxUeXBlID0gYnVpbGRNdXRhdGlvbklucHV0VHlwZShcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgZnVsbE5hbWUsXG4gICAgICAgIGZpZWxkLmZpZWxkcyxcbiAgICAgICAgZnVsbE5hbWUsXG4gICAgICApXG4gICAgICB0eXBlID0gbmV3IEdyYXBoUUxMaXN0KHdpdGhOdWxsYWJsZVR5cGUoZmllbGQsIHR5cGUsIGZvcmNlTnVsbGFibGUpKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgICBbZmllbGQubmFtZV06IHsgdHlwZSB9LFxuICAgICAgfVxuICAgIH0sXG4gICAgYmxvY2tzOiAoaW5wdXRPYmplY3RUeXBlQ29uZmlnOiBJbnB1dE9iamVjdFR5cGVDb25maWcsIGZpZWxkOiBCbG9ja0ZpZWxkKSA9PiAoe1xuICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgW2ZpZWxkLm5hbWVdOiB7IHR5cGU6IEdyYXBoUUxKU09OIH0sXG4gICAgfSksXG4gICAgY2hlY2tib3g6IChpbnB1dE9iamVjdFR5cGVDb25maWc6IElucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQ6IENoZWNrYm94RmllbGQpID0+ICh7XG4gICAgICAuLi5pbnB1dE9iamVjdFR5cGVDb25maWcsXG4gICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogR3JhcGhRTEJvb2xlYW4gfSxcbiAgICB9KSxcbiAgICBjb2RlOiAoaW5wdXRPYmplY3RUeXBlQ29uZmlnOiBJbnB1dE9iamVjdFR5cGVDb25maWcsIGZpZWxkOiBDb2RlRmllbGQpID0+ICh7XG4gICAgICAuLi5pbnB1dE9iamVjdFR5cGVDb25maWcsXG4gICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogd2l0aE51bGxhYmxlVHlwZShmaWVsZCwgR3JhcGhRTFN0cmluZywgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgICBjb2xsYXBzaWJsZTogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogQ29sbGFwc2libGVGaWVsZCkgPT5cbiAgICAgIGZpZWxkLmZpZWxkcy5yZWR1Y2UoKGFjYywgc3ViRmllbGQ6IENvbGxhcHNpYmxlRmllbGQpID0+IHtcbiAgICAgICAgY29uc3QgYWRkU3ViRmllbGQgPSBmaWVsZFRvU2NoZW1hTWFwW3N1YkZpZWxkLnR5cGVdXG4gICAgICAgIGlmIChhZGRTdWJGaWVsZCkgcmV0dXJuIGFkZFN1YkZpZWxkKGFjYywgc3ViRmllbGQpXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIGlucHV0T2JqZWN0VHlwZUNvbmZpZyksXG4gICAgZGF0ZTogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogRGF0ZUZpZWxkKSA9PiAoe1xuICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgW2ZpZWxkLm5hbWVdOiB7IHR5cGU6IHdpdGhOdWxsYWJsZVR5cGUoZmllbGQsIEdyYXBoUUxTdHJpbmcsIGZvcmNlTnVsbGFibGUpIH0sXG4gICAgfSksXG4gICAgZW1haWw6IChpbnB1dE9iamVjdFR5cGVDb25maWc6IElucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQ6IEVtYWlsRmllbGQpID0+ICh7XG4gICAgICAuLi5pbnB1dE9iamVjdFR5cGVDb25maWcsXG4gICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogd2l0aE51bGxhYmxlVHlwZShmaWVsZCwgR3JhcGhRTFN0cmluZywgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgICBncm91cDogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogR3JvdXBGaWVsZCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWlyZXNBdExlYXN0T25lRmllbGQgPSBncm91cE9yVGFiSGFzUmVxdWlyZWRTdWJmaWVsZChmaWVsZClcbiAgICAgIGNvbnN0IGZ1bGxOYW1lID0gY29tYmluZVBhcmVudE5hbWUocGFyZW50TmFtZSwgdG9Xb3JkcyhmaWVsZC5uYW1lLCB0cnVlKSlcbiAgICAgIGxldCB0eXBlOiBHcmFwaFFMVHlwZSA9IGJ1aWxkTXV0YXRpb25JbnB1dFR5cGUocGF5bG9hZCwgZnVsbE5hbWUsIGZpZWxkLmZpZWxkcywgZnVsbE5hbWUpXG4gICAgICBpZiAocmVxdWlyZXNBdExlYXN0T25lRmllbGQpIHR5cGUgPSBuZXcgR3JhcGhRTE5vbk51bGwodHlwZSlcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgICAgW2ZpZWxkLm5hbWVdOiB7IHR5cGUgfSxcbiAgICAgIH1cbiAgICB9LFxuICAgIGpzb246IChpbnB1dE9iamVjdFR5cGVDb25maWc6IElucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQ6IEpTT05GaWVsZCkgPT4gKHtcbiAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgIFtmaWVsZC5uYW1lXTogeyB0eXBlOiB3aXRoTnVsbGFibGVUeXBlKGZpZWxkLCBHcmFwaFFMSlNPTiwgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgICBudW1iZXI6IChpbnB1dE9iamVjdFR5cGVDb25maWc6IElucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQ6IE51bWJlckZpZWxkKSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gZmllbGQubmFtZSA9PT0gJ2lkJyA/IEdyYXBoUUxJbnQgOiBHcmFwaFFMRmxvYXRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgICAgW2ZpZWxkLm5hbWVdOiB7XG4gICAgICAgICAgdHlwZTogd2l0aE51bGxhYmxlVHlwZShcbiAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgZmllbGQuaGFzTWFueSA9PT0gdHJ1ZSA/IG5ldyBHcmFwaFFMTGlzdCh0eXBlKSA6IHR5cGUsXG4gICAgICAgICAgICBmb3JjZU51bGxhYmxlLFxuICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSxcbiAgICBwb2ludDogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogUG9pbnRGaWVsZCkgPT4gKHtcbiAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgIFtmaWVsZC5uYW1lXTogeyB0eXBlOiB3aXRoTnVsbGFibGVUeXBlKGZpZWxkLCBuZXcgR3JhcGhRTExpc3QoR3JhcGhRTEZsb2F0KSwgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgICByYWRpbzogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogUmFkaW9GaWVsZCkgPT4gKHtcbiAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgIFtmaWVsZC5uYW1lXTogeyB0eXBlOiB3aXRoTnVsbGFibGVUeXBlKGZpZWxkLCBHcmFwaFFMU3RyaW5nLCBmb3JjZU51bGxhYmxlKSB9LFxuICAgIH0pLFxuICAgIHJlbGF0aW9uc2hpcDogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogUmVsYXRpb25zaGlwRmllbGQpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVsYXRpb25UbyB9ID0gZmllbGRcbiAgICAgIHR5cGUgUGF5bG9hZEdyYXBoUUxSZWxhdGlvbnNoaXBUeXBlID1cbiAgICAgICAgfCBHcmFwaFFMSW5wdXRPYmplY3RUeXBlXG4gICAgICAgIHwgR3JhcGhRTExpc3Q8R3JhcGhRTFNjYWxhclR5cGU+XG4gICAgICAgIHwgR3JhcGhRTFNjYWxhclR5cGVcbiAgICAgIGxldCB0eXBlOiBQYXlsb2FkR3JhcGhRTFJlbGF0aW9uc2hpcFR5cGVcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVsYXRpb25UbykpIHtcbiAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBgJHtjb21iaW5lUGFyZW50TmFtZShcbiAgICAgICAgICBwYXJlbnROYW1lLFxuICAgICAgICAgIHRvV29yZHMoZmllbGQubmFtZSwgdHJ1ZSksXG4gICAgICAgICl9UmVsYXRpb25zaGlwSW5wdXRgXG4gICAgICAgIHR5cGUgPSBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gICAgICAgICAgbmFtZTogZnVsbE5hbWUsXG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICByZWxhdGlvblRvOiB7XG4gICAgICAgICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMRW51bVR5cGUoe1xuICAgICAgICAgICAgICAgIG5hbWU6IGAke2Z1bGxOYW1lfVJlbGF0aW9uVG9gLFxuICAgICAgICAgICAgICAgIHZhbHVlczogcmVsYXRpb25Uby5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAodmFsdWVzLCBvcHRpb24pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbHVlcyxcbiAgICAgICAgICAgICAgICAgICAgW2Zvcm1hdE5hbWUob3B0aW9uKV06IHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9uLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZTogeyB0eXBlOiBHcmFwaFFMSlNPTiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gZ2V0Q29sbGVjdGlvbklEVHlwZShwYXlsb2FkLCBwYXlsb2FkLmNvbGxlY3Rpb25zW3JlbGF0aW9uVG9dLmNvbmZpZylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogZmllbGQuaGFzTWFueSA/IG5ldyBHcmFwaFFMTGlzdCh0eXBlKSA6IHR5cGUgfSxcbiAgICAgIH1cbiAgICB9LFxuICAgIHJpY2hUZXh0OiAoaW5wdXRPYmplY3RUeXBlQ29uZmlnOiBJbnB1dE9iamVjdFR5cGVDb25maWcsIGZpZWxkOiBSaWNoVGV4dEZpZWxkKSA9PiAoe1xuICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgW2ZpZWxkLm5hbWVdOiB7IHR5cGU6IHdpdGhOdWxsYWJsZVR5cGUoZmllbGQsIEdyYXBoUUxKU09OLCBmb3JjZU51bGxhYmxlKSB9LFxuICAgIH0pLFxuICAgIHJvdzogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogUm93RmllbGQpID0+XG4gICAgICBmaWVsZC5maWVsZHMucmVkdWNlKChhY2MsIHN1YkZpZWxkOiBGaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBhZGRTdWJGaWVsZCA9IGZpZWxkVG9TY2hlbWFNYXBbc3ViRmllbGQudHlwZV1cbiAgICAgICAgaWYgKGFkZFN1YkZpZWxkKSByZXR1cm4gYWRkU3ViRmllbGQoYWNjLCBzdWJGaWVsZClcbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgaW5wdXRPYmplY3RUeXBlQ29uZmlnKSxcbiAgICBzZWxlY3Q6IChpbnB1dE9iamVjdFR5cGVDb25maWc6IElucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQ6IFNlbGVjdEZpZWxkKSA9PiB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWROYW1lID0gYCR7Y29tYmluZVBhcmVudE5hbWUocGFyZW50TmFtZSwgZmllbGQubmFtZSl9X011dGF0aW9uSW5wdXRgXG4gICAgICBsZXQgdHlwZTogR3JhcGhRTFR5cGUgPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgICAgICAgbmFtZTogZm9ybWF0dGVkTmFtZSxcbiAgICAgICAgdmFsdWVzOiBmaWVsZC5vcHRpb25zLnJlZHVjZSgodmFsdWVzLCBvcHRpb24pID0+IHtcbiAgICAgICAgICBpZiAob3B0aW9uSXNPYmplY3Qob3B0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4udmFsdWVzLFxuICAgICAgICAgICAgICBbZm9ybWF0TmFtZShvcHRpb24udmFsdWUpXToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnZhbHVlcyxcbiAgICAgICAgICAgIFtmb3JtYXROYW1lKG9wdGlvbildOiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBvcHRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH1cbiAgICAgICAgfSwge30pLFxuICAgICAgfSlcblxuICAgICAgdHlwZSA9IGZpZWxkLmhhc01hbnkgPyBuZXcgR3JhcGhRTExpc3QodHlwZSkgOiB0eXBlXG4gICAgICB0eXBlID0gd2l0aE51bGxhYmxlVHlwZShmaWVsZCwgdHlwZSwgZm9yY2VOdWxsYWJsZSlcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgICBbZmllbGQubmFtZV06IHsgdHlwZSB9LFxuICAgICAgfVxuICAgIH0sXG4gICAgdGFiczogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogVGFic0ZpZWxkKSA9PiB7XG4gICAgICByZXR1cm4gZmllbGQudGFicy5yZWR1Y2UoKGFjYywgdGFiKSA9PiB7XG4gICAgICAgIGlmICh0YWJIYXNOYW1lKHRhYikpIHtcbiAgICAgICAgICBjb25zdCBmdWxsTmFtZSA9IGNvbWJpbmVQYXJlbnROYW1lKHBhcmVudE5hbWUsIHRvV29yZHModGFiLm5hbWUsIHRydWUpKVxuICAgICAgICAgIGNvbnN0IHJlcXVpcmVzQXRMZWFzdE9uZUZpZWxkID0gZ3JvdXBPclRhYkhhc1JlcXVpcmVkU3ViZmllbGQoZmllbGQpXG4gICAgICAgICAgbGV0IHR5cGU6IEdyYXBoUUxUeXBlID0gYnVpbGRNdXRhdGlvbklucHV0VHlwZShwYXlsb2FkLCBmdWxsTmFtZSwgdGFiLmZpZWxkcywgZnVsbE5hbWUpXG4gICAgICAgICAgaWYgKHJlcXVpcmVzQXRMZWFzdE9uZUZpZWxkKSB0eXBlID0gbmV3IEdyYXBoUUxOb25OdWxsKHR5cGUpXG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgW3RhYi5uYW1lXTogeyB0eXBlIH0sXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgLi4udGFiLmZpZWxkcy5yZWR1Y2UoKHN1YkZpZWxkU2NoZW1hLCBzdWJGaWVsZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkU3ViRmllbGQgPSBmaWVsZFRvU2NoZW1hTWFwW3N1YkZpZWxkLnR5cGVdXG4gICAgICAgICAgICBpZiAoYWRkU3ViRmllbGQpIHJldHVybiBhZGRTdWJGaWVsZChzdWJGaWVsZFNjaGVtYSwgc3ViRmllbGQpXG4gICAgICAgICAgICByZXR1cm4gc3ViRmllbGRTY2hlbWFcbiAgICAgICAgICB9LCBhY2MpLFxuICAgICAgICB9XG4gICAgICB9LCBpbnB1dE9iamVjdFR5cGVDb25maWcpXG4gICAgfSxcbiAgICB0ZXh0OiAoaW5wdXRPYmplY3RUeXBlQ29uZmlnOiBJbnB1dE9iamVjdFR5cGVDb25maWcsIGZpZWxkOiBUZXh0RmllbGQpID0+ICh7XG4gICAgICAuLi5pbnB1dE9iamVjdFR5cGVDb25maWcsXG4gICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogd2l0aE51bGxhYmxlVHlwZShmaWVsZCwgR3JhcGhRTFN0cmluZywgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgICB0ZXh0YXJlYTogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogVGV4dGFyZWFGaWVsZCkgPT4gKHtcbiAgICAgIC4uLmlucHV0T2JqZWN0VHlwZUNvbmZpZyxcbiAgICAgIFtmaWVsZC5uYW1lXTogeyB0eXBlOiB3aXRoTnVsbGFibGVUeXBlKGZpZWxkLCBHcmFwaFFMU3RyaW5nLCBmb3JjZU51bGxhYmxlKSB9LFxuICAgIH0pLFxuICAgIHVwbG9hZDogKGlucHV0T2JqZWN0VHlwZUNvbmZpZzogSW5wdXRPYmplY3RUeXBlQ29uZmlnLCBmaWVsZDogVXBsb2FkRmllbGQpID0+ICh7XG4gICAgICAuLi5pbnB1dE9iamVjdFR5cGVDb25maWcsXG4gICAgICBbZmllbGQubmFtZV06IHsgdHlwZTogd2l0aE51bGxhYmxlVHlwZShmaWVsZCwgR3JhcGhRTFN0cmluZywgZm9yY2VOdWxsYWJsZSkgfSxcbiAgICB9KSxcbiAgfVxuXG4gIGNvbnN0IGZpZWxkTmFtZSA9IGZvcm1hdE5hbWUobmFtZSlcblxuICByZXR1cm4gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgIG5hbWU6IGBtdXRhdGlvbiR7ZmllbGROYW1lfUlucHV0YCxcbiAgICBmaWVsZHM6IGZpZWxkcy5yZWR1Y2UoKGlucHV0T2JqZWN0VHlwZUNvbmZpZywgZmllbGQpID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gZmllbGRUb1NjaGVtYU1hcFtmaWVsZC50eXBlXVxuXG4gICAgICBpZiAodHlwZW9mIGZpZWxkU2NoZW1hICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpbnB1dE9iamVjdFR5cGVDb25maWdcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXRPYmplY3RUeXBlQ29uZmlnLFxuICAgICAgICAuLi5maWVsZFNjaGVtYShpbnB1dE9iamVjdFR5cGVDb25maWcsIGZpZWxkKSxcbiAgICAgIH1cbiAgICB9LCB7fSksXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkTXV0YXRpb25JbnB1dFR5cGVcbiJdLCJuYW1lcyI6WyJnZXRDb2xsZWN0aW9uSURUeXBlIiwiaWRGaWVsZFR5cGVzIiwibnVtYmVyIiwiR3JhcGhRTEludCIsInRleHQiLCJHcmFwaFFMU3RyaW5nIiwicGF5bG9hZCIsImNvbGxlY3Rpb24iLCJpZEZpZWxkIiwiZmllbGRzIiwiZmluZCIsImZpZWxkIiwiZmllbGRBZmZlY3RzRGF0YSIsIm5hbWUiLCJkYiIsImRlZmF1bHRJRFR5cGUiLCJ0eXBlIiwiYnVpbGRNdXRhdGlvbklucHV0VHlwZSIsInBhcmVudE5hbWUiLCJmb3JjZU51bGxhYmxlIiwiZmllbGRUb1NjaGVtYU1hcCIsImFycmF5IiwiaW5wdXRPYmplY3RUeXBlQ29uZmlnIiwiZnVsbE5hbWUiLCJjb21iaW5lUGFyZW50TmFtZSIsInRvV29yZHMiLCJHcmFwaFFMTGlzdCIsIndpdGhOdWxsYWJsZVR5cGUiLCJibG9ja3MiLCJHcmFwaFFMSlNPTiIsImNoZWNrYm94IiwiR3JhcGhRTEJvb2xlYW4iLCJjb2RlIiwiY29sbGFwc2libGUiLCJyZWR1Y2UiLCJhY2MiLCJzdWJGaWVsZCIsImFkZFN1YkZpZWxkIiwiZGF0ZSIsImVtYWlsIiwiZ3JvdXAiLCJyZXF1aXJlc0F0TGVhc3RPbmVGaWVsZCIsImdyb3VwT3JUYWJIYXNSZXF1aXJlZFN1YmZpZWxkIiwiR3JhcGhRTE5vbk51bGwiLCJqc29uIiwiR3JhcGhRTEZsb2F0IiwiaGFzTWFueSIsInBvaW50IiwicmFkaW8iLCJyZWxhdGlvbnNoaXAiLCJyZWxhdGlvblRvIiwiQXJyYXkiLCJpc0FycmF5IiwiR3JhcGhRTElucHV0T2JqZWN0VHlwZSIsIkdyYXBoUUxFbnVtVHlwZSIsInZhbHVlcyIsIm9wdGlvbiIsImZvcm1hdE5hbWUiLCJ2YWx1ZSIsImNvbGxlY3Rpb25zIiwiY29uZmlnIiwicmljaFRleHQiLCJyb3ciLCJzZWxlY3QiLCJmb3JtYXR0ZWROYW1lIiwib3B0aW9ucyIsIm9wdGlvbklzT2JqZWN0IiwidGFicyIsInRhYiIsInRhYkhhc05hbWUiLCJzdWJGaWVsZFNjaGVtYSIsInRleHRhcmVhIiwidXBsb2FkIiwiZmllbGROYW1lIiwiZmllbGRTY2hlbWEiXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1Qzs7Ozs7Ozs7Ozs7SUFxRDFCQSxtQkFBbUI7ZUFBbkJBOztJQWdQYixPQUFxQztlQUFyQzs7O3lCQXpSTztpQ0FDcUI7dUJBNEJpQzs4QkFDckM7K0NBQ3NCOzBFQUNoQjttRUFDUDt5RUFDTTs7Ozs7O0FBRTdCLE1BQU1DLGVBQWU7SUFDbkJDLFFBQVFDLG1CQUFVO0lBQ2xCQyxNQUFNQyxzQkFBYTtBQUNyQjtBQUVPLE1BQU1MLHNCQUFzQixDQUNqQ00sU0FDQUM7SUFFQSxNQUFNQyxVQUFVRCxXQUFXRSxNQUFNLENBQUNDLElBQUksQ0FBQyxDQUFDQyxRQUFVQyxJQUFBQSx1QkFBZ0IsRUFBQ0QsVUFBVUEsTUFB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