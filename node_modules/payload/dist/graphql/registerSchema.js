/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return registerGraphQLSchema;
    }
});
const _graphql = /*#__PURE__*/ _interop_require_wildcard(require("graphql"));
const _graphqlquerycomplexity = /*#__PURE__*/ _interop_require_wildcard(require("graphql-query-complexity"));
const _access = /*#__PURE__*/ _interop_require_default(require("../auth/graphql/resolvers/access"));
const _init = /*#__PURE__*/ _interop_require_default(require("../collections/graphql/init"));
const _init1 = /*#__PURE__*/ _interop_require_default(require("../globals/graphql/init"));
const _buildFallbackLocaleInputType = /*#__PURE__*/ _interop_require_default(require("./schema/buildFallbackLocaleInputType"));
const _buildLocaleInputType = /*#__PURE__*/ _interop_require_default(require("./schema/buildLocaleInputType"));
const _buildPoliciesType = /*#__PURE__*/ _interop_require_default(require("./schema/buildPoliciesType"));
const _wrapCustomResolver = require("./utilities/wrapCustomResolver");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function registerGraphQLSchema(payload) {
    payload.types = {
        arrayTypes: {},
        blockInputTypes: {},
        blockTypes: {},
        groupTypes: {},
        tabTypes: {}
    };
    if (payload.config.localization) {
        payload.types.localeInputType = (0, _buildLocaleInputType.default)(payload.config.localization);
        payload.types.fallbackLocaleInputType = (0, _buildFallbackLocaleInputType.default)(payload.config.localization);
    }
    payload.Query = {
        name: 'Query',
        fields: {}
    };
    payload.Mutation = {
        name: 'Mutation',
        fields: {}
    };
    (0, _init.default)(payload);
    (0, _init1.default)(payload);
    payload.Query.fields.Access = {
        resolve: (0, _access.default)(payload),
        type: (0, _buildPoliciesType.default)(payload)
    };
    if (typeof payload.config.graphQL.queries === 'function') {
        const customQueries = payload.config.graphQL.queries(_graphql, payload);
        payload.Query = {
            ...payload.Query,
            fields: {
                ...payload.Query.fields,
                ...(0, _wrapCustomResolver.wrapCustomFields)(customQueries || {})
            }
        };
    }
    if (typeof payload.config.graphQL.mutations === 'function') {
        const customMutations = payload.config.graphQL.mutations(_graphql, payload);
        payload.Mutation = {
            ...payload.Mutation,
            fields: {
                ...payload.Mutation.fields,
                ...(0, _wrapCustomResolver.wrapCustomFields)(customMutations || {})
            }
        };
    }
    const query = new _graphql.GraphQLObjectType(payload.Query);
    const mutation = new _graphql.GraphQLObjectType(payload.Mutation);
    const schema = {
        mutation,
        query
    };
    payload.schema = new _graphql.GraphQLSchema(schema);
    payload.validationRules = ({ variableValues })=>[
            (0, _graphqlquerycomplexity.default)({
                estimators: [
                    (0, _graphqlquerycomplexity.fieldExtensionsEstimator)(),
                    (0, _graphqlquerycomplexity.simpleEstimator)({
                        defaultComplexity: 1
                    })
                ],
                maximumComplexity: payload.config.graphQL.maxComplexity,
                variables: variableValues
            })
        ];
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaHFsL3JlZ2lzdGVyU2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5pbXBvcnQgKiBhcyBHcmFwaFFMIGZyb20gJ2dyYXBocWwnXG5pbXBvcnQgeyBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFNjaGVtYSB9IGZyb20gJ2dyYXBocWwnXG5pbXBvcnQgcXVlcnlDb21wbGV4aXR5LCB7XG4gIGZpZWxkRXh0ZW5zaW9uc0VzdGltYXRvcixcbiAgc2ltcGxlRXN0aW1hdG9yLFxufSBmcm9tICdncmFwaHFsLXF1ZXJ5LWNvbXBsZXhpdHknXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uL3BheWxvYWQnXG5cbmltcG9ydCBhY2Nlc3NSZXNvbHZlciBmcm9tICcuLi9hdXRoL2dyYXBocWwvcmVzb2x2ZXJzL2FjY2VzcydcbmltcG9ydCBpbml0Q29sbGVjdGlvbnMgZnJvbSAnLi4vY29sbGVjdGlvbnMvZ3JhcGhxbC9pbml0J1xuaW1wb3J0IGluaXRHbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMvZ3JhcGhxbC9pbml0J1xuaW1wb3J0IGJ1aWxkRmFsbGJhY2tMb2NhbGVJbnB1dFR5cGUgZnJvbSAnLi9zY2hlbWEvYnVpbGRGYWxsYmFja0xvY2FsZUlucHV0VHlwZSdcbmltcG9ydCBidWlsZExvY2FsZUlucHV0VHlwZSBmcm9tICcuL3NjaGVtYS9idWlsZExvY2FsZUlucHV0VHlwZSdcbmltcG9ydCBidWlsZFBvbGljaWVzVHlwZSBmcm9tICcuL3NjaGVtYS9idWlsZFBvbGljaWVzVHlwZSdcbmltcG9ydCB7IHdyYXBDdXN0b21GaWVsZHMgfSBmcm9tICcuL3V0aWxpdGllcy93cmFwQ3VzdG9tUmVzb2x2ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlZ2lzdGVyR3JhcGhRTFNjaGVtYShwYXlsb2FkOiBQYXlsb2FkKTogdm9pZCB7XG4gIHBheWxvYWQudHlwZXMgPSB7XG4gICAgYXJyYXlUeXBlczoge30sXG4gICAgYmxvY2tJbnB1dFR5cGVzOiB7fSxcbiAgICBibG9ja1R5cGVzOiB7fSxcbiAgICBncm91cFR5cGVzOiB7fSxcbiAgICB0YWJUeXBlczoge30sXG4gIH1cblxuICBpZiAocGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uKSB7XG4gICAgcGF5bG9hZC50eXBlcy5sb2NhbGVJbnB1dFR5cGUgPSBidWlsZExvY2FsZUlucHV0VHlwZShwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24pXG4gICAgcGF5bG9hZC50eXBlcy5mYWxsYmFja0xvY2FsZUlucHV0VHlwZSA9IGJ1aWxkRmFsbGJhY2tMb2NhbGVJbnB1dFR5cGUoXG4gICAgICBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24sXG4gICAgKVxuICB9XG5cbiAgcGF5bG9hZC5RdWVyeSA9IHtcbiAgICBuYW1lOiAnUXVlcnknLFxuICAgIGZpZWxkczoge30sXG4gIH1cblxuICBwYXlsb2FkLk11dGF0aW9uID0ge1xuICAgIG5hbWU6ICdNdXRhdGlvbicsXG4gICAgZmllbGRzOiB7fSxcbiAgfVxuXG4gIGluaXRDb2xsZWN0aW9ucyhwYXlsb2FkKVxuICBpbml0R2xvYmFscyhwYXlsb2FkKVxuXG4gIHBheWxvYWQuUXVlcnkuZmllbGRzLkFjY2VzcyA9IHtcbiAgICByZXNvbHZlOiBhY2Nlc3NSZXNvbHZlcihwYXlsb2FkKSxcbiAgICB0eXBlOiBidWlsZFBvbGljaWVzVHlwZShwYXlsb2FkKSxcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZC5jb25maWcuZ3JhcGhRTC5xdWVyaWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY3VzdG9tUXVlcmllcyA9IHBheWxvYWQuY29uZmlnLmdyYXBoUUwucXVlcmllcyhHcmFwaFFMLCBwYXlsb2FkKVxuICAgIHBheWxvYWQuUXVlcnkgPSB7XG4gICAgICAuLi5wYXlsb2FkLlF1ZXJ5LFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIC4uLnBheWxvYWQuUXVlcnkuZmllbGRzLFxuICAgICAgICAuLi53cmFwQ3VzdG9tRmllbGRzKChjdXN0b21RdWVyaWVzIHx8IHt9KSBhcyBuZXZlciksXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZC5jb25maWcuZ3JhcGhRTC5tdXRhdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBjdXN0b21NdXRhdGlvbnMgPSBwYXlsb2FkLmNvbmZpZy5ncmFwaFFMLm11dGF0aW9ucyhHcmFwaFFMLCBwYXlsb2FkKVxuICAgIHBheWxvYWQuTXV0YXRpb24gPSB7XG4gICAgICAuLi5wYXlsb2FkLk11dGF0aW9uLFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIC4uLnBheWxvYWQuTXV0YXRpb24uZmllbGRzLFxuICAgICAgICAuLi53cmFwQ3VzdG9tRmllbGRzKChjdXN0b21NdXRhdGlvbnMgfHwge30pIGFzIG5ldmVyKSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgY29uc3QgcXVlcnkgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUocGF5bG9hZC5RdWVyeSlcbiAgY29uc3QgbXV0YXRpb24gPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUocGF5bG9hZC5NdXRhdGlvbilcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgbXV0YXRpb24sXG4gICAgcXVlcnksXG4gIH1cblxuICBwYXlsb2FkLnNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHNjaGVtYSlcblxuICBwYXlsb2FkLnZhbGlkYXRpb25SdWxlcyA9ICh7IHZhcmlhYmxlVmFsdWVzIH0pID0+IFtcbiAgICBxdWVyeUNvbXBsZXhpdHkoe1xuICAgICAgZXN0aW1hdG9yczogW1xuICAgICAgICBmaWVsZEV4dGVuc2lvbnNFc3RpbWF0b3IoKSxcbiAgICAgICAgc2ltcGxlRXN0aW1hdG9yKHsgZGVmYXVsdENvbXBsZXhpdHk6IDEgfSksIC8vIEZhbGxiYWNrIGlmIGNvbXBsZXhpdHkgbm90IHNldFxuICAgICAgXSxcbiAgICAgIG1heGltdW1Db21wbGV4aXR5OiBwYXlsb2FkLmNvbmZpZy5ncmFwaFFMLm1heENvbXBsZXhpdHksXG4gICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgICAgLy8gb25Db21wbGV0ZTogKGNvbXBsZXhpdHkpID0+IHsgY29uc29sZS5sb2coJ1F1ZXJ5IENvbXBsZXhpdHk6JywgY29tcGxleGl0eSk7IH0sXG4gICAgfSksXG4gIF1cbn1cbiJdLCJuYW1lcyI6WyJyZWdpc3RlckdyYXBoUUxTY2hlbWEiLCJwYXlsb2FkIiwidHlwZXMiLCJhcnJheVR5cGVzIiwiYmxvY2tJbnB1dFR5cGVzIiwiYmxvY2tUeXBlcyIsImdyb3VwVHlwZXMiLCJ0YWJUeXBlcyIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImxvY2FsZUlucHV0VHlwZSIsImJ1aWxkTG9jYWxlSW5wdXRUeXBlIiwiZmFsbGJhY2tMb2NhbGVJbnB1dFR5cGUiLCJidWlsZEZhbGxiYWNrTG9jYWxlSW5wdXRUeXBlIiwiUXVlcnkiLCJuYW1lIiwiZmllbGRzIiwiTXV0YXRpb24iLCJpbml0Q29sbGVjdGlvbnMiLCJpbml0R2xvYmFscyIsIkFjY2VzcyIsInJlc29sdmUiLCJhY2Nlc3NSZXNvbHZlciIsInR5cGUiLCJidWlsZFBvbGljaWVzVHlwZSIsImdyYXBoUUwiLCJxdWVyaWVzIiwiY3VzdG9tUXVlcmllcyIsIkdyYXBoUUwiLCJ3cmFwQ3VzdG9tRmllbGRzIiwibXV0YXRpb25zIiwiY3VzdG9tTXV0YXRpb25zIiwicXVlcnkiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm11dGF0aW9uIiwic2NoZW1hIiwiR3JhcGhRTFNjaGVtYSIsInZhbGlkYXRpb25SdWxlcyIsInZhcmlhYmxlVmFsdWVzIiwicXVlcnlDb21wbGV4aXR5IiwiZXN0aW1hdG9ycyIsImZpZWxkRXh0ZW5zaW9uc0VzdGltYXRvciIsInNpbXBsZUVzdGltYXRvciIsImRlZmF1bHRDb21wbGV4aXR5IiwibWF4aW11bUNvbXBsZXhpdHkiLCJt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