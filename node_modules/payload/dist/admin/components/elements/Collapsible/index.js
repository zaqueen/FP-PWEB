"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Collapsible", {
    enumerable: true,
    get: function() {
        return Collapsible;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactanimateheight = /*#__PURE__*/ _interop_require_default(require("react-animate-height"));
const _reacti18next = require("react-i18next");
const _Chevron = /*#__PURE__*/ _interop_require_default(require("../../icons/Chevron"));
const _Drag = /*#__PURE__*/ _interop_require_default(require("../../icons/Drag"));
require("./index.scss");
const _provider = require("./provider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'collapsible';
const Collapsible = ({ actions, children, className, collapsed: collapsedFromProps, collapsibleStyle = 'default', dragHandleProps, header, initCollapsed, onToggle })=>{
    const [collapsedLocal, setCollapsedLocal] = (0, _react.useState)(Boolean(initCollapsed));
    const [hoveringToggle, setHoveringToggle] = (0, _react.useState)(false);
    const isNested = (0, _provider.useCollapsible)();
    const { t } = (0, _reacti18next.useTranslation)('fields');
    const collapsed = typeof collapsedFromProps === 'boolean' ? collapsedFromProps : collapsedLocal;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            className,
            dragHandleProps && `${baseClass}--has-drag-handle`,
            collapsed && `${baseClass}--collapsed`,
            isNested && `${baseClass}--nested`,
            hoveringToggle && `${baseClass}--hovered`,
            `${baseClass}--style-${collapsibleStyle}`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_provider.CollapsibleProvider, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__toggle-wrap`,
        onMouseEnter: ()=>setHoveringToggle(true),
        onMouseLeave: ()=>setHoveringToggle(false)
    }, dragHandleProps && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__drag`,
        ...dragHandleProps.attributes,
        ...dragHandleProps.listeners
    }, /*#__PURE__*/ _react.default.createElement(_Drag.default, null)), /*#__PURE__*/ _react.default.createElement("button", {
        className: [
            `${baseClass}__toggle`,
            `${baseClass}__toggle--${collapsed ? 'collapsed' : 'open'}`
        ].filter(Boolean).join(' '),
        onClick: ()=>{
            if (typeof onToggle === 'function') onToggle(!collapsed);
            setCollapsedLocal(!collapsed);
        },
        type: "button"
    }, /*#__PURE__*/ _react.default.createElement("span", null, t('toggleBlock'))), header && /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__header-wrap`,
            dragHandleProps && `${baseClass}__header-wrap--has-drag-handle`
        ].filter(Boolean).join(' ')
    }, header && header), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions-wrap`
    }, actions && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions`
    }, actions), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__indicator`
    }, /*#__PURE__*/ _react.default.createElement(_Chevron.default, {
        direction: !collapsed ? 'up' : undefined
    })))), /*#__PURE__*/ _react.default.createElement(_reactanimateheight.default, {
        duration: 200,
        height: collapsed ? 0 : 'auto'
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__content`
    }, children))));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0NvbGxhcHNpYmxlL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBBbmltYXRlSGVpZ2h0IGZyb20gJ3JlYWN0LWFuaW1hdGUtaGVpZ2h0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IENoZXZyb24gZnJvbSAnLi4vLi4vaWNvbnMvQ2hldnJvbidcbmltcG9ydCBEcmFnSGFuZGxlIGZyb20gJy4uLy4uL2ljb25zL0RyYWcnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcbmltcG9ydCB7IENvbGxhcHNpYmxlUHJvdmlkZXIsIHVzZUNvbGxhcHNpYmxlIH0gZnJvbSAnLi9wcm92aWRlcidcblxuY29uc3QgYmFzZUNsYXNzID0gJ2NvbGxhcHNpYmxlJ1xuXG5leHBvcnQgY29uc3QgQ29sbGFwc2libGU6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIGFjdGlvbnMsXG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGNvbGxhcHNlZDogY29sbGFwc2VkRnJvbVByb3BzLFxuICBjb2xsYXBzaWJsZVN0eWxlID0gJ2RlZmF1bHQnLFxuICBkcmFnSGFuZGxlUHJvcHMsXG4gIGhlYWRlcixcbiAgaW5pdENvbGxhcHNlZCxcbiAgb25Ub2dnbGUsXG59KSA9PiB7XG4gIGNvbnN0IFtjb2xsYXBzZWRMb2NhbCwgc2V0Q29sbGFwc2VkTG9jYWxdID0gdXNlU3RhdGUoQm9vbGVhbihpbml0Q29sbGFwc2VkKSlcbiAgY29uc3QgW2hvdmVyaW5nVG9nZ2xlLCBzZXRIb3ZlcmluZ1RvZ2dsZV0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgaXNOZXN0ZWQgPSB1c2VDb2xsYXBzaWJsZSgpXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oJ2ZpZWxkcycpXG5cbiAgY29uc3QgY29sbGFwc2VkID0gdHlwZW9mIGNvbGxhcHNlZEZyb21Qcm9wcyA9PT0gJ2Jvb2xlYW4nID8gY29sbGFwc2VkRnJvbVByb3BzIDogY29sbGFwc2VkTG9jYWxcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICBiYXNlQ2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgZHJhZ0hhbmRsZVByb3BzICYmIGAke2Jhc2VDbGFzc30tLWhhcy1kcmFnLWhhbmRsZWAsXG4gICAgICAgIGNvbGxhcHNlZCAmJiBgJHtiYXNlQ2xhc3N9LS1jb2xsYXBzZWRgLFxuICAgICAgICBpc05lc3RlZCAmJiBgJHtiYXNlQ2xhc3N9LS1uZXN0ZWRgLFxuICAgICAgICBob3ZlcmluZ1RvZ2dsZSAmJiBgJHtiYXNlQ2xhc3N9LS1ob3ZlcmVkYCxcbiAgICAgICAgYCR7YmFzZUNsYXNzfS0tc3R5bGUtJHtjb2xsYXBzaWJsZVN0eWxlfWAsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICA+XG4gICAgICA8Q29sbGFwc2libGVQcm92aWRlcj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fdG9nZ2xlLXdyYXBgfVxuICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2V0SG92ZXJpbmdUb2dnbGUodHJ1ZSl9XG4gICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBzZXRIb3ZlcmluZ1RvZ2dsZShmYWxzZSl9XG4gICAgICAgID5cbiAgICAgICAgICB7ZHJhZ0hhbmRsZVByb3BzICYmIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19kcmFnYH1cbiAgICAgICAgICAgICAgey4uLmRyYWdIYW5kbGVQcm9wcy5hdHRyaWJ1dGVzfVxuICAgICAgICAgICAgICB7Li4uZHJhZ0hhbmRsZVByb3BzLmxpc3RlbmVyc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPERyYWdIYW5kbGUgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgICAgICAgIGAke2Jhc2VDbGFzc31fX3RvZ2dsZWAsXG4gICAgICAgICAgICAgIGAke2Jhc2VDbGFzc31fX3RvZ2dsZS0tJHtjb2xsYXBzZWQgPyAnY29sbGFwc2VkJyA6ICdvcGVuJ31gLFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgIC5qb2luKCcgJyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25Ub2dnbGUgPT09ICdmdW5jdGlvbicpIG9uVG9nZ2xlKCFjb2xsYXBzZWQpXG4gICAgICAgICAgICAgIHNldENvbGxhcHNlZExvY2FsKCFjb2xsYXBzZWQpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4+e3QoJ3RvZ2dsZUJsb2NrJyl9PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIHtoZWFkZXIgJiYgKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgICAgICAgICBgJHtiYXNlQ2xhc3N9X19oZWFkZXItd3JhcGAsXG4gICAgICAgICAgICAgICAgZHJhZ0hhbmRsZVByb3BzICYmIGAke2Jhc2VDbGFzc31fX2hlYWRlci13cmFwLS1oYXMtZHJhZy1oYW5kbGVgLFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgIC5qb2luKCcgJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtoZWFkZXIgJiYgaGVhZGVyfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fYWN0aW9ucy13cmFwYH0+XG4gICAgICAgICAgICB7YWN0aW9ucyAmJiA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fYWN0aW9uc2B9PnthY3Rpb25zfTwvZGl2Pn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19pbmRpY2F0b3JgfT5cbiAgICAgICAgICAgICAgPENoZXZyb24gZGlyZWN0aW9uPXshY29sbGFwc2VkID8gJ3VwJyA6IHVuZGVmaW5lZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEFuaW1hdGVIZWlnaHQgZHVyYXRpb249ezIwMH0gaGVpZ2h0PXtjb2xsYXBzZWQgPyAwIDogJ2F1dG8nfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fY29udGVudGB9PntjaGlsZHJlbn08L2Rpdj5cbiAgICAgICAgPC9BbmltYXRlSGVpZ2h0PlxuICAgICAgPC9Db2xsYXBzaWJsZVByb3ZpZGVyPlxuICAgIDwvZGl2PlxuICApXG59XG4iXSwibmFtZXMiOlsiQ29sbGFwc2libGUiLCJiYXNlQ2xhc3MiLCJhY3Rpb25zIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJjb2xsYXBzZWQiLCJjb2xsYXBzZWRGcm9tUHJvcHMiLCJjb2xsYXBzaWJsZVN0eWxlIiwiZHJhZ0hhbmRsZVByb3BzIiwiaGVhZGVyIiwiaW5pdENvbGxhcHNlZCIsIm9uVG9nZ2xlIiwiY29sbGFwc2VkTG9jYWwiLCJzZXRDb2xsYXBzZWRMb2NhbCIsInVzZVN0YXRlIiwiQm9vbGVhbiIsImhvdmVyaW5nVG9nZ2xlIiwic2V0SG92ZXJpbmdUb2dnbGUiLCJpc05lc3RlZCIsInVzZUNvbGxhcHNpYmxlIiwidCIsInVzZVRyYW5zbGF0aW9uIiwiZGl2IiwiZmlsdGVyIiwiam9pbiIsIkNvbGxhcHNpYmxlUHJvdmlkZXIiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJhdHRyaWJ1dGVzIiwibGlzdGVuZXJzIiwiRHJhZ0hhbmRsZSIsImJ1dHRvbiIsIm9uQ2xpY2siLCJ0eXBlIiwic3BhbiIsIkNoZXZyb24iLCJkaXJlY3Rpb24iLCJ1bmRlZmluZWQiLCJBbmltYXRlSGVpZ2h0IiwiZHVyYXRpb24iLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBYWFBOzs7ZUFBQUE7OzsrREFibUI7MkVBQ047OEJBQ0s7Z0VBSVg7NkRBQ0c7UUFDaEI7MEJBQzZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFcEQsTUFBTUMsWUFBWTtBQUVYLE1BQU1ELGNBQStCLENBQUMsRUFDM0NFLE9BQU8sRUFDUEMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLFdBQVdDLGtCQUFrQixFQUM3QkMsbUJBQW1CLFNBQVMsRUFDNUJDLGVBQWUsRUFDZkMsTUFBTSxFQUNOQyxhQUFhLEVBQ2JDLFFBQVEsRUFDVDtJQUNDLE1BQU0sQ0FBQ0MsZ0JBQWdCQyxrQkFBa0IsR0FBR0MsSUFBQUEsZUFBUSxFQUFDQyxRQUFRTDtJQUM3RCxNQUFNLENBQUNNLGdCQUFnQkMsa0JBQWtCLEdBQUdILElBQUFBLGVBQVEsRUFBQztJQUNyRCxNQUFNSSxXQUFXQyxJQUFBQSx3QkFBYztJQUMvQixNQUFNLEVBQUVDLENBQUMsRUFBRSxHQUFHQyxJQUFBQSw0QkFBYyxFQUFDO0lBRTdCLE1BQU1oQixZQUFZLE9BQU9DLHVCQUF1QixZQUFZQSxxQkFBcUJNO0lBRWpGLHFCQUNFLDZCQUFDVTtRQUNDbEIsV0FBVztZQUNUSDtZQUNBRztZQUNBSSxtQkFBbUIsQ0FBQyxFQUFFUCxVQUFVLGlCQUFpQixDQUFDO1lBQ2xESSxhQUFhLENBQUMsRUFBRUosVUFBVSxXQUFXLENBQUM7WUFDdENpQixZQUFZLENBQUMsRUFBRWpCLFVBQVUsUUFBUSxDQUFDO1lBQ2xDZSxrQkFBa0IsQ0FBQyxFQUFFZixVQUFVLFNBQVMsQ0FBQztZQUN6QyxDQUFDLEVBQUVBLFVBQVUsUUFBUSxFQUFFTSxpQkFBaUIsQ0FBQztTQUMxQyxDQUNFZ0IsTUFBTSxDQUFDUixTQUNQUyxJQUFJLENBQUM7cUJBRVIsNkJBQUNDLDZCQUFtQixzQkFDbEIsNkJBQUNIO1FBQ0NsQixXQUFXLENBQUMsRUFBRUgsVUFBVSxhQUFhLENBQUM7UUFDdEN5QixjQUFjLElBQU1ULGtCQUFrQjtRQUN0Q1UsY0FBYyxJQUFNVixrQkFBa0I7T0FFckNULGlDQUNDLDZCQUFDYztRQUNDbEIsV0FBVyxDQUFDLEVBQUVILFVBQVUsTUFBTSxDQUFDO1FBQzlCLEdBQUdPLGdCQUFnQm9CLFVBQVU7UUFDN0IsR0FBR3BCLGdCQUFnQnFCLFNBQVM7cUJBRTdCLDZCQUFDQyxhQUFVLHdCQUdmLDZCQUFDQztRQUNDM0IsV0FBVztZQUNULENBQUMsRUFBRUgsVUFBVSxRQUFRLENBQUM7WUFDdEIsQ0FBQyxFQUFFQSxVQUFVLFVBQVUsRUFBRUksWUFBWSxjQUFjLE9BQU8sQ0FBQztTQUM1RCxDQUNFa0IsTUFBTSxDQUFDUixTQUNQUyxJQUFJLENBQUM7UUFDUlEsU0FBUztZQUNQLElBQUksT0FBT3JCLGFBQWEsWUFBWUEsU0FBUyxDQUFDTjtZQUM5Q1Esa0JBQWtCLENBQUNSO1FBQ3JCO1FBQ0E0QixNQUFLO3FCQUVMLDZCQUFDQyxjQUFNZCxFQUFFLGtCQUVWWCx3QkFDQyw2QkFBQ2E7UUFDQ2xCLFdBQVc7WUFDVCxDQUFDLEVBQUVILFVBQVUsYUFBYSxDQUFDO1lBQzNCTyxtQkFBbUIsQ0FBQyxFQUFFUCxVQUFVLDhCQUE4QixDQUFDO1NBQ2hFLENBQ0VzQixNQUFNLENBQUNSLFNBQ1BTLElBQUksQ0FBQztPQUVQZixVQUFVQSx1QkFHZiw2QkFBQ2E7UUFBSWxCLFdBQVcsQ0FBQyxFQUFFSCxVQUFVLGNBQWMsQ0FBQztPQUN6Q0MseUJBQVcsNkJBQUNvQjtRQUFJbEIsV0FBVyxDQUFDLEVBQUVILFVBQVUsU0FBUyxDQUFDO09BQUdDLHdCQUN0RCw2QkFBQ29CO1FBQUlsQixXQUFXLENBQUMsRUFBRUgsVUFBVSxXQUFXLENBQUM7cUJBQ3ZDLDZCQUFDa0MsZ0JBQU87UUFBQ0MsV0FBVyxDQUFDL0IsWUFBWSxPQUFPZ0M7eUJBSTlDLDZCQUFDQywyQkFBYTtRQUFDQyxVQUFVO1FBQUtDLFFBQVFuQyxZQUFZLElBQUk7cUJBQ3BELDZCQUFDaUI7UUFBSWxCLFdBQVcsQ0FBQyxFQUFFSCxVQUFVLFNBQVMsQ0FBQztPQUFHRTtBQUtwRCJ9