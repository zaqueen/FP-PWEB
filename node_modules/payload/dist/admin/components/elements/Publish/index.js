"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Publish", {
    enumerable: true,
    get: function() {
        return Publish;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _context = require("../../forms/Form/context");
const _Submit = /*#__PURE__*/ _interop_require_default(require("../../forms/Submit"));
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const DefaultPublishButton = ({ id, canPublish, disabled, label, publish })=>{
    if (!canPublish) return null;
    return /*#__PURE__*/ _react.default.createElement(_Submit.default, {
        buttonId: id,
        disabled: disabled,
        onClick: publish,
        size: "small",
        type: "button"
    }, label);
};
const Publish = ({ CustomComponent })=>{
    const { code } = (0, _Locale.useLocale)();
    const { id, collection, global, publishedDoc, unpublishedVersions } = (0, _DocumentInfo.useDocumentInfo)();
    const [hasPublishPermission, setHasPublishPermission] = _react.default.useState(false);
    const { getData, submit } = (0, _context.useForm)();
    const modified = (0, _context.useFormModified)();
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { t } = (0, _reacti18next.useTranslation)('version');
    const hasNewerVersions = unpublishedVersions?.totalDocs > 0;
    const canPublish = modified || hasNewerVersions || !publishedDoc;
    const publish = (0, _react.useCallback)(()=>{
        void submit({
            overrides: {
                _status: 'published'
            }
        });
    }, [
        submit
    ]);
    _react.default.useEffect(()=>{
        const fetchPublishAccess = async ()=>{
            let docAccessURL;
            let operation = 'update';
            const params = {
                locale: code || undefined
            };
            if (global) {
                docAccessURL = `/globals/${global.slug}/access`;
            } else if (collection) {
                if (!id) operation = 'create';
                docAccessURL = `/${collection.slug}/access${id ? `/${id}` : ''}`;
            }
            if (docAccessURL) {
                const data = getData();
                const res = await fetch(`${serverURL}${api}${docAccessURL}?${_qs.default.stringify(params)}`, {
                    body: JSON.stringify({
                        ...data,
                        _status: 'published'
                    }),
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: 'post'
                });
                const json = await res.json();
                const result = Boolean(json?.[operation]?.permission);
                setHasPublishPermission(result);
            } else {
                setHasPublishPermission(true);
            }
        };
        void fetchPublishAccess();
    }, [
        api,
        code,
        collection,
        getData,
        global,
        id,
        serverURL
    ]);
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomComponent,
        DefaultComponent: DefaultPublishButton,
        componentProps: {
            id: 'action-save',
            DefaultButton: DefaultPublishButton,
            canPublish: hasPublishPermission,
            disabled: !canPublish,
            label: t('publishChanges'),
            publish
        }
    });
};

//# sourceMappingURL=data:application/json;base64,