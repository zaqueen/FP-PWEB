"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const boolean = [
    {
        label: 'equals',
        value: 'equals'
    },
    {
        label: 'isNotEqualTo',
        value: 'not_equals'
    }
];
const base = [
    ...boolean,
    {
        label: 'isIn',
        value: 'in'
    },
    {
        label: 'isNotIn',
        value: 'not_in'
    },
    {
        label: 'exists',
        value: 'exists'
    }
];
const numeric = [
    ...base,
    {
        label: 'isGreaterThan',
        value: 'greater_than'
    },
    {
        label: 'isLessThan',
        value: 'less_than'
    },
    {
        label: 'isLessThanOrEqualTo',
        value: 'less_than_equal'
    },
    {
        label: 'isGreaterThanOrEqualTo',
        value: 'greater_than_equal'
    }
];
const geo = [
    ...boolean,
    {
        label: 'exists',
        value: 'exists'
    },
    {
        label: 'near',
        value: 'near'
    }
];
const within = {
    label: 'within',
    value: 'within'
};
const intersects = {
    label: 'intersects',
    value: 'intersects'
};
const like = {
    label: 'isLike',
    value: 'like'
};
const contains = {
    label: 'contains',
    value: 'contains'
};
const fieldTypeConditions = {
    checkbox: {
        component: 'Text',
        operators: boolean
    },
    code: {
        component: 'Text',
        operators: [
            ...base,
            like,
            contains
        ]
    },
    date: {
        component: 'Date',
        operators: [
            ...base,
            ...numeric
        ]
    },
    email: {
        component: 'Text',
        operators: [
            ...base,
            contains
        ]
    },
    json: {
        component: 'Text',
        operators: [
            ...base,
            like,
            contains,
            within,
            intersects
        ]
    },
    number: {
        component: 'Number',
        operators: [
            ...base,
            ...numeric
        ]
    },
    point: {
        component: 'Point',
        operators: [
            ...geo,
            within,
            intersects
        ]
    },
    radio: {
        component: 'Select',
        operators: [
            ...base
        ]
    },
    relationship: {
        component: 'Relationship',
        operators: [
            ...base
        ]
    },
    richText: {
        component: 'Text',
        operators: [
            ...base,
            like,
            contains
        ]
    },
    select: {
        component: 'Select',
        operators: [
            ...base
        ]
    },
    text: {
        component: 'Text',
        operators: [
            ...base,
            like,
            contains
        ]
    },
    textarea: {
        component: 'Text',
        operators: [
            ...base,
            like,
            contains
        ]
    },
    upload: {
        component: 'Text',
        operators: [
            ...base
        ]
    }
};
const _default = fieldTypeConditions;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL1doZXJlQnVpbGRlci9maWVsZC10eXBlcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYm9vbGVhbiA9IFtcbiAge1xuICAgIGxhYmVsOiAnZXF1YWxzJyxcbiAgICB2YWx1ZTogJ2VxdWFscycsXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogJ2lzTm90RXF1YWxUbycsXG4gICAgdmFsdWU6ICdub3RfZXF1YWxzJyxcbiAgfSxcbl1cblxuY29uc3QgYmFzZSA9IFtcbiAgLi4uYm9vbGVhbixcbiAge1xuICAgIGxhYmVsOiAnaXNJbicsXG4gICAgdmFsdWU6ICdpbicsXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogJ2lzTm90SW4nLFxuICAgIHZhbHVlOiAnbm90X2luJyxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiAnZXhpc3RzJyxcbiAgICB2YWx1ZTogJ2V4aXN0cycsXG4gIH0sXG5dXG5cbmNvbnN0IG51bWVyaWMgPSBbXG4gIC4uLmJhc2UsXG4gIHtcbiAgICBsYWJlbDogJ2lzR3JlYXRlclRoYW4nLFxuICAgIHZhbHVlOiAnZ3JlYXRlcl90aGFuJyxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiAnaXNMZXNzVGhhbicsXG4gICAgdmFsdWU6ICdsZXNzX3RoYW4nLFxuICB9LFxuICB7XG4gICAgbGFiZWw6ICdpc0xlc3NUaGFuT3JFcXVhbFRvJyxcbiAgICB2YWx1ZTogJ2xlc3NfdGhhbl9lcXVhbCcsXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogJ2lzR3JlYXRlclRoYW5PckVxdWFsVG8nLFxuICAgIHZhbHVlOiAnZ3JlYXRlcl90aGFuX2VxdWFsJyxcbiAgfSxcbl1cblxuY29uc3QgZ2VvID0gW1xuICAuLi5ib29sZWFuLFxuICB7XG4gICAgbGFiZWw6ICdleGlzdHMnLFxuICAgIHZhbHVlOiAnZXhpc3RzJyxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiAnbmVhcicsXG4gICAgdmFsdWU6ICduZWFyJyxcbiAgfSxcbl1cblxuY29uc3Qgd2l0aGluID0ge1xuICBsYWJlbDogJ3dpdGhpbicsXG4gIHZhbHVlOiAnd2l0aGluJyxcbn1cblxuY29uc3QgaW50ZXJzZWN0cyA9IHtcbiAgbGFiZWw6ICdpbnRlcnNlY3RzJyxcbiAgdmFsdWU6ICdpbnRlcnNlY3RzJyxcbn1cblxuY29uc3QgbGlrZSA9IHtcbiAgbGFiZWw6ICdpc0xpa2UnLFxuICB2YWx1ZTogJ2xpa2UnLFxufVxuXG5jb25zdCBjb250YWlucyA9IHtcbiAgbGFiZWw6ICdjb250YWlucycsXG4gIHZhbHVlOiAnY29udGFpbnMnLFxufVxuXG5jb25zdCBmaWVsZFR5cGVDb25kaXRpb25zID0ge1xuICBjaGVja2JveDoge1xuICAgIGNvbXBvbmVudDogJ1RleHQnLFxuICAgIG9wZXJhdG9yczogYm9vbGVhbixcbiAgfSxcbiAgY29kZToge1xuICAgIGNvbXBvbmVudDogJ1RleHQnLFxuICAgIG9wZXJhdG9yczogWy4uLmJhc2UsIGxpa2UsIGNvbnRhaW5zXSxcbiAgfSxcbiAgZGF0ZToge1xuICAgIGNvbXBvbmVudDogJ0RhdGUnLFxuICAgIG9wZXJhdG9yczogWy4uLmJhc2UsIC4uLm51bWVyaWNdLFxuICB9LFxuICBlbWFpbDoge1xuICAgIGNvbXBvbmVudDogJ1RleHQnLFxuICAgIG9wZXJhdG9yczogWy4uLmJhc2UsIGNvbnRhaW5zXSxcbiAgfSxcbiAganNvbjoge1xuICAgIGNvbXBvbmVudDogJ1RleHQnLFxuICAgIG9wZXJhdG9yczogWy4uLmJhc2UsIGxpa2UsIGNvbnRhaW5zLCB3aXRoaW4sIGludGVyc2VjdHNdLFxuICB9LFxuICBudW1iZXI6IHtcbiAgICBjb21wb25lbnQ6ICdOdW1iZXInLFxuICAgIG9wZXJhdG9yczogWy4uLmJhc2UsIC4uLm51bWVyaWNdLFxuICB9LFxuICBwb2ludDoge1xuICAgIGNvbXBvbmVudDogJ1BvaW50JyxcbiAgICBvcGVyYXRvcnM6IFsuLi5nZW8sIHdpdGhpbiwgaW50ZXJzZWN0c10sXG4gIH0sXG4gIHJhZGlvOiB7XG4gICAgY29tcG9uZW50OiAnU2VsZWN0JyxcbiAgICBvcGVyYXRvcnM6IFsuLi5iYXNlXSxcbiAgfSxcbiAgcmVsYXRpb25zaGlwOiB7XG4gICAgY29tcG9uZW50OiAnUmVsYXRpb25zaGlwJyxcbiAgICBvcGVyYXRvcnM6IFsuLi5iYXNlXSxcbiAgfSxcbiAgcmljaFRleHQ6IHtcbiAgICBjb21wb25lbnQ6ICdUZXh0JyxcbiAgICBvcGVyYXRvcnM6IFsuLi5iYXNlLCBsaWtlLCBjb250YWluc10sXG4gIH0sXG4gIHNlbGVjdDoge1xuICAgIGNvbXBvbmVudDogJ1NlbGVjdCcsXG4gICAgb3BlcmF0b3JzOiBbLi4uYmFzZV0sXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBjb21wb25lbnQ6ICdUZXh0JyxcbiAgICBvcGVyYXRvcnM6IFsuLi5iYXNlLCBsaWtlLCBjb250YWluc10sXG4gIH0sXG4gIHRleHRhcmVhOiB7XG4gICAgY29tcG9uZW50OiAnVGV4dCcsXG4gICAgb3BlcmF0b3JzOiBbLi4uYmFzZSwgbGlrZSwgY29udGFpbnNdLFxuICB9LFxuICB1cGxvYWQ6IHtcbiAgICBjb21wb25lbnQ6ICdUZXh0JyxcbiAgICBvcGVyYXRvcnM6IFsuLi5iYXNlXSxcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmllbGRUeXBlQ29uZGl0aW9uc1xuIl0sIm5hbWVzIjpbImJvb2xlYW4iLCJsYWJlbCIsInZhbHVlIiwiYmFzZSIsIm51bWVyaWMiLCJnZW8iLCJ3aXRoaW4iLCJpbnRlcnNlY3RzIiwibGlrZSIsImNvbnRhaW5zIiwiZmllbGRUeXBlQ29uZGl0aW9ucyIsImNoZWNrYm94IiwiY29tcG9uZW50Iiwib3BlcmF0b3JzIiwiY29kZSIsImRhdGUiLCJlbWFpbCIsImpzb24iLCJudW1iZXIiLCJwb2ludCIsInJhZGlvIiwicmVsYXRpb25zaGlwIiwicmljaFRleHQiLCJzZWxlY3QiLCJ0ZXh0IiwidGV4dGFyZWEiLCJ1cGxvYWQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBMElBOzs7ZUFBQTs7O0FBMUlBLE1BQU1BLFVBQVU7SUFDZDtRQUNFQyxPQUFPO1FBQ1BDLE9BQU87SUFDVDtJQUNBO1FBQ0VELE9BQU87UUFDUEMsT0FBTztJQUNUO0NBQ0Q7QUFFRCxNQUFNQyxPQUFPO09BQ1JIO0lBQ0g7UUFDRUMsT0FBTztRQUNQQyxPQUFPO0lBQ1Q7SUFDQTtRQUNFRCxPQUFPO1FBQ1BDLE9BQU87SUFDVDtJQUNBO1FBQ0VELE9BQU87UUFDUEMsT0FBTztJQUNUO0NBQ0Q7QUFFRCxNQUFNRSxVQUFVO09BQ1hEO0lBQ0g7UUFDRUYsT0FBTztRQUNQQyxPQUFPO0lBQ1Q7SUFDQTtRQUNFRCxPQUFPO1FBQ1BDLE9BQU87SUFDVDtJQUNBO1FBQ0VELE9BQU87UUFDUEMsT0FBTztJQUNUO0lBQ0E7UUFDRUQsT0FBTztRQUNQQyxPQUFPO0lBQ1Q7Q0FDRDtBQUVELE1BQU1HLE1BQU07T0FDUEw7SUFDSDtRQUNFQyxPQUFPO1FBQ1BDLE9BQU87SUFDVDtJQUNBO1FBQ0VELE9BQU87UUFDUEMsT0FBTztJQUNUO0NBQ0Q7QUFFRCxNQUFNSSxTQUFTO0lBQ2JMLE9BQU87SUFDUEMsT0FBTztBQUNUO0FBRUEsTUFBTUssYUFBYTtJQUNqQk4sT0FBTztJQUNQQyxPQUFPO0FBQ1Q7QUFFQSxNQUFNTSxPQUFPO0lBQ1hQLE9BQU87SUFDUEMsT0FBTztBQUNUO0FBRUEsTUFBTU8sV0FBVztJQUNmUixPQUFPO0lBQ1BDLE9BQU87QUFDVDtBQUVBLE1BQU1RLHNCQUFzQjtJQUMxQkMsVUFBVTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVdiO0lBQ2I7SUFDQWMsTUFBTTtRQUNKRixXQUFXO1FBQ1hDLFdBQVc7ZUFBSVY7WUFBTUs7WUFBTUM7U0FBUztJQUN0QztJQUNBTSxNQUFNO1FBQ0pILFdBQVc7UUFDWEMsV0FBVztlQUFJVjtlQUFTQztTQUFRO0lBQ2xDO0lBQ0FZLE9BQU87UUFDTEosV0FBVztRQUNYQyxXQUFXO2VBQUlWO1lBQU1NO1NBQVM7SUFDaEM7SUFDQVEsTUFBTTtRQUNKTCxXQUFXO1FBQ1hDLFdBQVc7ZUFBSVY7WUFBTUs7WUFBTUM7WUFBVUg7WUFBUUM7U0FBVztJQUMxRDtJQUNBVyxRQUFRO1FBQ05OLFdBQVc7UUFDWEMsV0FBVztlQUFJVjtlQUFTQztTQUFRO0lBQ2xDO0lBQ0FlLE9BQU87UUFDTFAsV0FBVztRQUNYQyxXQUFXO2VBQUlSO1lBQUtDO1lBQVFDO1NBQVc7SUFDekM7SUFDQWEsT0FBTztRQUNMUixXQUFXO1FBQ1hDLFdBQVc7ZUFBSVY7U0FBSztJQUN0QjtJQUNBa0IsY0FBYztRQUNaVCxXQUFXO1FBQ1hDLFdBQVc7ZUFBSVY7U0FBSztJQUN0QjtJQUNBbUIsVUFBVTtRQUNSVixXQUFXO1FBQ1hDLFdBQVc7ZUFBSVY7WUFBTUs7WUFBTUM7U0FBUztJQUN0QztJQUNBYyxRQUFRO1FBQ05YLFdBQVc7UUFDWEMsV0FBVztlQUFJVjtTQUFLO0lBQ3RCO0lBQ0FxQixNQUFNO1FBQ0paLFdBQVc7UUFDWEMsV0FBVztlQUFJVjtZQUFNSztZQUFNQztTQUFTO0lBQ3RDO0lBQ0FnQixVQUFVO1FBQ1JiLFdBQVc7UUFDWEMsV0FBVztlQUFJVjtZQUFNSztZQUFNQztTQUFTO0lBQ3RDO0lBQ0FpQixRQUFRO1FBQ05kLFdBQVc7UUFDWEMsV0FBVztlQUFJVjtTQUFLO0lBQ3RCO0FBQ0Y7TUFFQSxXQUFlTyJ9