"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _sortable = require("@dnd-kit/sortable");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactselect = /*#__PURE__*/ _interop_require_default(require("react-select"));
const _creatable = /*#__PURE__*/ _interop_require_default(require("react-select/creatable"));
const _getTranslation = require("../../../../utilities/getTranslation");
const _Chevron = /*#__PURE__*/ _interop_require_default(require("../../icons/Chevron"));
const _DraggableSortable = /*#__PURE__*/ _interop_require_default(require("../DraggableSortable"));
const _ClearIndicator = require("./ClearIndicator");
const _Control = require("./Control");
const _MultiValue = require("./MultiValue");
const _MultiValueLabel = require("./MultiValueLabel");
const _MultiValueRemove = require("./MultiValueRemove");
const _SingleValue = require("./SingleValue");
const _ValueContainer = require("./ValueContainer");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createOption = (label)=>({
        label,
        value: label
    });
const SelectAdapter = (props)=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)();
    const [inputValue, setInputValue] = _react.default.useState('') // for creatable select
    ;
    const { className, components, customProps, disabled = false, filterOption = undefined, isClearable = true, isCreatable, isLoading, isSearchable = true, noOptionsMessage, numberOnly = false, onChange, onMenuOpen, options, placeholder = t('general:selectValue'), showError, value } = props;
    const classes = [
        className,
        'react-select',
        showError && 'react-select--error'
    ].filter(Boolean).join(' ');
    if (!isCreatable) {
        return /*#__PURE__*/ _react.default.createElement(_reactselect.default, {
            captureMenuScroll: true,
            customProps: customProps,
            isLoading: isLoading,
            placeholder: (0, _getTranslation.getTranslation)(placeholder, i18n),
            ...props,
            className: classes,
            classNamePrefix: "rs",
            components: {
                ClearIndicator: _ClearIndicator.ClearIndicator,
                Control: _Control.Control,
                DropdownIndicator: _Chevron.default,
                MultiValue: _MultiValue.MultiValue,
                MultiValueLabel: _MultiValueLabel.MultiValueLabel,
                MultiValueRemove: _MultiValueRemove.MultiValueRemove,
                SingleValue: _SingleValue.SingleValue,
                ValueContainer: _ValueContainer.ValueContainer,
                ...components
            },
            filterOption: filterOption,
            isClearable: isClearable,
            isDisabled: disabled,
            isSearchable: isSearchable,
            menuPlacement: "auto",
            noOptionsMessage: noOptionsMessage,
            onChange: onChange,
            onMenuOpen: onMenuOpen,
            options: options,
            value: value
        });
    }
    const handleKeyDown = (event)=>{
        // eslint-disable-next-line no-restricted-globals
        if (numberOnly === true) {
            const acceptableKeys = [
                'Tab',
                'Escape',
                'Backspace',
                'Enter',
                'ArrowRight',
                'ArrowLeft',
                'ArrowUp',
                'ArrowDown'
            ];
            const isNumber = !/\D/.test(event.key);
            const isActionKey = acceptableKeys.includes(event.key);
            if (!isNumber && !isActionKey) {
                event.preventDefault();
                return;
            }
        }
        if (!value || !inputValue || inputValue.trim() === '') return;
        if (filterOption && !filterOption(null, inputValue)) {
            return;
        }
        switch(event.key){
            case 'Enter':
            case 'Tab':
                onChange([
                    ...value,
                    createOption(inputValue)
                ]);
                setInputValue('');
                event.preventDefault();
                break;
            default:
                break;
        }
    };
    return /*#__PURE__*/ _react.default.createElement(_creatable.default, {
        captureMenuScroll: true,
        isLoading: isLoading,
        placeholder: (0, _getTranslation.getTranslation)(placeholder, i18n),
        ...props,
        className: classes,
        classNamePrefix: "rs",
        components: {
            ClearIndicator: _ClearIndicator.ClearIndicator,
            Control: _Control.Control,
            DropdownIndicator: _Chevron.default,
            MultiValue: _MultiValue.MultiValue,
            MultiValueLabel: _MultiValueLabel.MultiValueLabel,
            MultiValueRemove: _MultiValueRemove.MultiValueRemove,
            SingleValue: _SingleValue.SingleValue,
            ValueContainer: _ValueContainer.ValueContainer,
            ...components
        },
        filterOption: filterOption,
        inputValue: inputValue,
        isClearable: isClearable,
        isDisabled: disabled,
        isSearchable: isSearchable,
        menuPlacement: "auto",
        noOptionsMessage: noOptionsMessage,
        onChange: onChange,
        onInputChange: (newValue)=>setInputValue(newValue),
        onKeyDown: handleKeyDown,
        onMenuOpen: onMenuOpen,
        options: options,
        value: value
    });
};
const SortableSelect = (props)=>{
    const { onChange, value } = props;
    let ids = [];
    if (value) ids = Array.isArray(value) ? value.map((item)=>item?.id ?? `${item?.value}`) : [
        value?.id || `${value?.value}`
    ];
    return /*#__PURE__*/ _react.default.createElement(_DraggableSortable.default, {
        className: "react-select-container",
        ids: ids,
        onDragEnd: ({ moveFromIndex, moveToIndex })=>{
            let sorted = value;
            if (value && Array.isArray(value)) {
                sorted = (0, _sortable.arrayMove)(value, moveFromIndex, moveToIndex);
            }
            onChange(sorted);
        }
    }, /*#__PURE__*/ _react.default.createElement(SelectAdapter, props));
};
const ReactSelect = (props)=>{
    const { isMulti, isSortable } = props;
    if (isMulti && isSortable) {
        return /*#__PURE__*/ _react.default.createElement(SortableSelect, props);
    }
    return /*#__PURE__*/ _react.default.createElement(SelectAdapter, props);
};
const _default = ReactSelect;

//# sourceMappingURL=data:application/json;base64,