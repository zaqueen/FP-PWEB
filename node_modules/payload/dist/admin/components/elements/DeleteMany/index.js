"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reacttoastify = require("react-toastify");
const _getTranslation = require("../../../../utilities/getTranslation");
const _api = require("../../../api");
const _Minimal = /*#__PURE__*/ _interop_require_default(require("../../templates/Minimal"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _SelectionProvider = require("../../views/collections/List/SelectionProvider");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
const _Pill = /*#__PURE__*/ _interop_require_default(require("../Pill"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'delete-documents';
const DeleteMany = (props)=>{
    const { collection: { labels: { plural }, slug } = {}, resetParams } = props;
    const { permissions } = (0, _Auth.useAuth)();
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { toggleModal } = (0, _modal.useModal)();
    const { count, getQueryParams, selectAll, toggleAll } = (0, _SelectionProvider.useSelection)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const [deleting, setDeleting] = (0, _react.useState)(false);
    const collectionPermissions = permissions?.collections?.[slug];
    const hasDeletePermission = collectionPermissions?.delete?.permission;
    const modalSlug = `delete-${slug}`;
    const addDefaultError = (0, _react.useCallback)(()=>{
        _reacttoastify.toast.error(t('error:unknown'));
    }, [
        t
    ]);
    const handleDelete = (0, _react.useCallback)(()=>{
        setDeleting(true);
        _api.requests.delete(`${serverURL}${api}/${slug}${getQueryParams()}`, {
            headers: {
                'Accept-Language': i18n.language,
                'Content-Type': 'application/json'
            }
        }).then(async (res)=>{
            try {
                const json = await res.json();
                toggleModal(modalSlug);
                if (res.status < 400) {
                    _reacttoastify.toast.success(json.message || t('deletedSuccessfully'), {
                        autoClose: 3000
                    });
                    toggleAll();
                    resetParams({
                        page: selectAll ? 1 : undefined
                    });
                    return null;
                }
                if (json.errors) {
                    _reacttoastify.toast.error(json.message);
                } else {
                    addDefaultError();
                }
                return false;
            } catch (e) {
                return addDefaultError();
            }
        });
    }, [
        addDefaultError,
        api,
        getQueryParams,
        i18n.language,
        modalSlug,
        resetParams,
        selectAll,
        serverURL,
        slug,
        t,
        toggleAll,
        toggleModal
    ]);
    if (selectAll === _SelectionProvider.SelectAllStatus.None || !hasDeletePermission) {
        return null;
    }
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_Pill.default, {
        className: `${baseClass}__toggle`,
        onClick: ()=>{
            setDeleting(false);
            toggleModal(modalSlug);
        }
    }, t('delete')), /*#__PURE__*/ _react.default.createElement(_modal.Modal, {
        className: baseClass,
        slug: modalSlug
    }, /*#__PURE__*/ _react.default.createElement(_Minimal.default, {
        className: `${baseClass}__template`
    }, /*#__PURE__*/ _react.default.createElement("h1", null, t('confirmDeletion')), /*#__PURE__*/ _react.default.createElement("p", null, t('aboutToDeleteCount', {
        count,
        label: (0, _getTranslation.getTranslation)(plural, i18n)
    })), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        id: "confirm-cancel",
        onClick: deleting ? undefined : ()=>toggleModal(modalSlug),
        type: "button"
    }, t('cancel')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        id: "confirm-delete",
        onClick: deleting ? undefined : handleDelete
    }, deleting ? t('deleting') : t('confirm')))));
};
const _default = DeleteMany;

//# sourceMappingURL=data:application/json;base64,