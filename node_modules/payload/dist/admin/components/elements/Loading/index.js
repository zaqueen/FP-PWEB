"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LoadingOverlay: function() {
        return LoadingOverlay;
    },
    LoadingOverlayToggle: function() {
        return LoadingOverlayToggle;
    },
    FormLoadingOverlayToggle: function() {
        return FormLoadingOverlayToggle;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _context = require("../../forms/Form/context");
const _LoadingOverlay = require("../../utilities/LoadingOverlay");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'loading-overlay';
const LoadingOverlay = ({ animationDuration, loadingText, overlayType, show = true })=>{
    const { t } = (0, _reacti18next.useTranslation)('general');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            show ? `${baseClass}--entering` : `${baseClass}--exiting`,
            overlayType ? `${baseClass}--${overlayType}` : ''
        ].filter(Boolean).join(' '),
        style: {
            animationDuration: animationDuration || '500ms'
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bars`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bar`
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bar`
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bar`
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bar`
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__bar`
    })), /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__text`
    }, loadingText || t('loading')));
};
const LoadingOverlayToggle = ({ name: key, loadingText, show, type = 'fullscreen' })=>{
    const { toggleLoadingOverlay } = (0, _LoadingOverlay.useLoadingOverlay)();
    _react.default.useEffect(()=>{
        toggleLoadingOverlay({
            isLoading: show,
            key,
            loadingText: loadingText || undefined,
            type
        });
        return ()=>{
            toggleLoadingOverlay({
                isLoading: false,
                key,
                type
            });
        };
    }, [
        show,
        toggleLoadingOverlay,
        key,
        type,
        loadingText
    ]);
    return null;
};
const FormLoadingOverlayToggle = ({ name, action, formIsLoading = false, loadingSuffix, type = 'fullscreen' })=>{
    const isProcessing = (0, _context.useFormProcessing)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const labels = {
        create: t('creating'),
        loading: t('loading'),
        update: t('updating')
    };
    return /*#__PURE__*/ _react.default.createElement(LoadingOverlayToggle, {
        loadingText: `${labels[action]} ${loadingSuffix ? (0, _getTranslation.getTranslation)(loadingSuffix, i18n) : ''}`.trim(),
        name: name,
        show: formIsLoading || isProcessing,
        type: type
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0xvYWRpbmcvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBMb2FkaW5nT3ZlcmxheVR5cGVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0xvYWRpbmdPdmVybGF5L3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCB7IHVzZUZvcm1Qcm9jZXNzaW5nIH0gZnJvbSAnLi4vLi4vZm9ybXMvRm9ybS9jb250ZXh0J1xuaW1wb3J0IHsgdXNlTG9hZGluZ092ZXJsYXkgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvTG9hZGluZ092ZXJsYXknXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2xvYWRpbmctb3ZlcmxheSdcblxudHlwZSBQcm9wcyA9IHtcbiAgYW5pbWF0aW9uRHVyYXRpb24/OiBzdHJpbmdcbiAgbG9hZGluZ1RleHQ/OiBzdHJpbmdcbiAgb3ZlcmxheVR5cGU/OiBzdHJpbmdcbiAgc2hvdz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IExvYWRpbmdPdmVybGF5OiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBhbmltYXRpb25EdXJhdGlvbixcbiAgbG9hZGluZ1RleHQsXG4gIG92ZXJsYXlUeXBlLFxuICBzaG93ID0gdHJ1ZSxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbignZ2VuZXJhbCcpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgYmFzZUNsYXNzLFxuICAgICAgICBzaG93ID8gYCR7YmFzZUNsYXNzfS0tZW50ZXJpbmdgIDogYCR7YmFzZUNsYXNzfS0tZXhpdGluZ2AsXG4gICAgICAgIG92ZXJsYXlUeXBlID8gYCR7YmFzZUNsYXNzfS0tJHtvdmVybGF5VHlwZX1gIDogJycsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBhbmltYXRpb25EdXJhdGlvbiB8fCAnNTAwbXMnLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fYmFyc2B9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fYmFyYH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2JhcmB9IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19iYXJgfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fYmFyYH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2JhcmB9IC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X190ZXh0YH0+e2xvYWRpbmdUZXh0IHx8IHQoJ2xvYWRpbmcnKX08L3NwYW4+XG4gICAgPC9kaXY+XG4gIClcbn1cblxudHlwZSBVc2VMb2FkaW5nT3ZlcmxheVRvZ2dsZVQgPSB7XG4gIGxvYWRpbmdUZXh0Pzogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBzaG93OiBib29sZWFuXG4gIHR5cGU/OiBMb2FkaW5nT3ZlcmxheVR5cGVzXG59XG5leHBvcnQgY29uc3QgTG9hZGluZ092ZXJsYXlUb2dnbGU6IFJlYWN0LkZDPFVzZUxvYWRpbmdPdmVybGF5VG9nZ2xlVD4gPSAoe1xuICBuYW1lOiBrZXksXG4gIGxvYWRpbmdUZXh0LFxuICBzaG93LFxuICB0eXBlID0gJ2Z1bGxzY3JlZW4nLFxufSkgPT4ge1xuICBjb25zdCB7IHRvZ2dsZUxvYWRpbmdPdmVybGF5IH0gPSB1c2VMb2FkaW5nT3ZlcmxheSgpXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB0b2dnbGVMb2FkaW5nT3ZlcmxheSh7XG4gICAgICBpc0xvYWRpbmc6IHNob3csXG4gICAgICBrZXksXG4gICAgICBsb2FkaW5nVGV4dDogbG9hZGluZ1RleHQgfHwgdW5kZWZpbmVkLFxuICAgICAgdHlwZSxcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRvZ2dsZUxvYWRpbmdPdmVybGF5KHtcbiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAga2V5LFxuICAgICAgICB0eXBlLFxuICAgICAgfSlcbiAgICB9XG4gIH0sIFtzaG93LCB0b2dnbGVMb2FkaW5nT3ZlcmxheSwga2V5LCB0eXBlLCBsb2FkaW5nVGV4dF0pXG5cbiAgcmV0dXJuIG51bGxcbn1cblxudHlwZSBGb3JtTG9hZGluZ092ZXJsYXlUb2dnbGVUID0ge1xuICBhY3Rpb246ICdjcmVhdGUnIHwgJ2xvYWRpbmcnIHwgJ3VwZGF0ZSdcbiAgZm9ybUlzTG9hZGluZz86IGJvb2xlYW5cbiAgbG9hZGluZ1N1ZmZpeD86IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgdHlwZT86IExvYWRpbmdPdmVybGF5VHlwZXNcbn1cbmV4cG9ydCBjb25zdCBGb3JtTG9hZGluZ092ZXJsYXlUb2dnbGU6IFJlYWN0LkZDPEZvcm1Mb2FkaW5nT3ZlcmxheVRvZ2dsZVQ+ID0gKHtcbiAgbmFtZSxcbiAgYWN0aW9uLFxuICBmb3JtSXNMb2FkaW5nID0gZmFsc2UsXG4gIGxvYWRpbmdTdWZmaXgsXG4gIHR5cGUgPSAnZnVsbHNjcmVlbicsXG59KSA9PiB7XG4gIGNvbnN0IGlzUHJvY2Vzc2luZyA9IHVzZUZvcm1Qcm9jZXNzaW5nKClcbiAgY29uc3QgeyBpMThuLCB0IH0gPSB1c2VUcmFuc2xhdGlvbignZ2VuZXJhbCcpXG5cbiAgY29uc3QgbGFiZWxzID0ge1xuICAgIGNyZWF0ZTogdCgnY3JlYXRpbmcnKSxcbiAgICBsb2FkaW5nOiB0KCdsb2FkaW5nJyksXG4gICAgdXBkYXRlOiB0KCd1cGRhdGluZycpLFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TG9hZGluZ092ZXJsYXlUb2dnbGVcbiAgICAgIGxvYWRpbmdUZXh0PXtgJHtsYWJlbHNbYWN0aW9uXX0gJHtcbiAgICAgICAgbG9hZGluZ1N1ZmZpeCA/IGdldFRyYW5zbGF0aW9uKGxvYWRpbmdTdWZmaXgsIGkxOG4pIDogJydcbiAgICAgIH1gLnRyaW0oKX1cbiAgICAgIG5hbWU9e25hbWV9XG4gICAgICBzaG93PXtmb3JtSXNMb2FkaW5nIHx8IGlzUHJvY2Vzc2luZ31cbiAgICAgIHR5cGU9e3R5cGV9XG4gICAgLz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkxvYWRpbmdPdmVybGF5IiwiTG9hZGluZ092ZXJsYXlUb2dnbGUiLCJGb3JtTG9hZGluZ092ZXJsYXlUb2dnbGUiLCJiYXNlQ2xhc3MiLCJhbmltYXRpb25EdXJhdGlvbiIsImxvYWRpbmdUZXh0Iiwib3ZlcmxheVR5cGUiLCJzaG93IiwidCIsInVzZVRyYW5zbGF0aW9uIiwiZGl2IiwiY2xhc3NOYW1lIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJzdHlsZSIsInNwYW4iLCJuYW1lIiwia2V5IiwidHlwZSIsInRvZ2dsZUxvYWRpbmdPdmVybGF5IiwidXNlTG9hZGluZ092ZXJsYXkiLCJSZWFjdCIsInVzZUVmZmVjdCIsImlzTG9hZGluZyIsInVuZGVmaW5lZCIsImFjdGlvbiIsImZvcm1Jc0xvYWRpbmciLCJsb2FkaW5nU3VmZml4IiwiaXNQcm9jZXNzaW5nIiwidXNlRm9ybVByb2Nlc3NpbmciLCJpMThuIiwibGFiZWxzIiwiY3JlYXRlIiwibG9hZGluZyIsInVwZGF0ZSIsImdldFRyYW5zbGF0aW9uIiwidHJpbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7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