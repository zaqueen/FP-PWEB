"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatDrawerSlug: function() {
        return formatDrawerSlug;
    },
    DrawerToggler: function() {
        return DrawerToggler;
    },
    Drawer: function() {
        return Drawer;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _X = /*#__PURE__*/ _interop_require_default(require("../../icons/X"));
const _EditDepth = require("../../utilities/EditDepth");
const _Gutter = require("../Gutter");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'drawer';
const zBase = 100;
const formatDrawerSlug = ({ depth, slug })=>`drawer_${depth}_${slug}`;
const DrawerToggler = ({ children, className, disabled, onClick, slug, ...rest })=>{
    const { openModal } = (0, _modal.useModal)();
    const handleClick = (0, _react.useCallback)((e)=>{
        openModal(slug);
        if (typeof onClick === 'function') onClick(e);
    }, [
        openModal,
        slug,
        onClick
    ]);
    return /*#__PURE__*/ _react.default.createElement("button", {
        className: className,
        disabled: disabled,
        onClick: handleClick,
        type: "button",
        ...rest
    }, children);
};
const Drawer = ({ children, className, gutter = true, header, hoverTitle, slug, title })=>{
    const { t } = (0, _reacti18next.useTranslation)('general');
    const { closeModal, modalState } = (0, _modal.useModal)();
    const drawerDepth = (0, _EditDepth.useEditDepth)();
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [animateIn, setAnimateIn] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        setIsOpen(modalState[slug]?.isOpen);
    }, [
        slug,
        modalState
    ]);
    (0, _react.useEffect)(()=>{
        setAnimateIn(isOpen);
    }, [
        isOpen
    ]);
    if (isOpen) {
        // IMPORTANT: do not render the drawer until it is explicitly open, this is to avoid large html trees especially when nesting drawers
        return /*#__PURE__*/ _react.default.createElement(_modal.Modal, {
            className: [
                className,
                baseClass,
                animateIn && `${baseClass}--is-open`,
                drawerDepth > 1 && `${baseClass}--nested`
            ].filter(Boolean).join(' '),
            slug: slug,
            style: {
                zIndex: zBase + drawerDepth
            }
        }, (!drawerDepth || drawerDepth === 1) && /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__blur-bg`
        }), /*#__PURE__*/ _react.default.createElement("button", {
            "aria-label": t('close'),
            className: `${baseClass}__close`,
            id: `close-drawer__${slug}`,
            onClick: ()=>closeModal(slug),
            type: "button"
        }), /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__content`
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__blur-bg-content`
        }), /*#__PURE__*/ _react.default.createElement(_Gutter.Gutter, {
            className: `${baseClass}__content-children`,
            left: gutter,
            right: gutter
        }, /*#__PURE__*/ _react.default.createElement(_EditDepth.EditDepthContext.Provider, {
            value: drawerDepth + 1
        }, header && header, header === undefined && /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__header`
        }, /*#__PURE__*/ _react.default.createElement("h2", {
            className: `${baseClass}__header__title`,
            title: hoverTitle ? title : null
        }, title), /*#__PURE__*/ _react.default.createElement("button", {
            "aria-label": t('close'),
            className: `${baseClass}__header__close`,
            id: `close-drawer__${slug}`,
            onClick: ()=>closeModal(slug),
            type: "button"
        }, /*#__PURE__*/ _react.default.createElement(_X.default, null))), children))));
    }
    return null;
};

//# sourceMappingURL=data:application/json;base64,