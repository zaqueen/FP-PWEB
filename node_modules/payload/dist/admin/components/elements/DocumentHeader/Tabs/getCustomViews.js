"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCustomViews", {
    enumerable: true,
    get: function() {
        return getCustomViews;
    }
});
const _CustomComponent = require("../../../views/Global/Routes/CustomComponent");
const _CustomComponent1 = require("../../../views/collections/Edit/Routes/CustomComponent");
const getCustomViews = (args)=>{
    const { collection, global } = args;
    let customViews;
    if (collection) {
        const collectionViewsConfig = typeof collection?.admin?.components?.views?.Edit === 'object' && typeof collection?.admin?.components?.views?.Edit !== 'function' ? collection?.admin?.components?.views?.Edit : undefined;
        const defaultViewKeys = Object.keys(_CustomComponent1.defaultCollectionViews);
        customViews = Object.entries(collectionViewsConfig || {}).reduce((prev, [key, view])=>{
            if (defaultViewKeys.includes(key)) {
                return prev;
            }
            return [
                ...prev,
                {
                    ...view,
                    key
                }
            ];
        }, []);
    }
    if (global) {
        const globalViewsConfig = typeof global?.admin?.components?.views?.Edit === 'object' && typeof global?.admin?.components?.views?.Edit !== 'function' ? global?.admin?.components?.views?.Edit : undefined;
        const defaultViewKeys = Object.keys(_CustomComponent.defaultGlobalViews);
        customViews = Object.entries(globalViewsConfig || {}).reduce((prev, [key, view])=>{
            if (defaultViewKeys.includes(key)) {
                return prev;
            }
            return [
                ...prev,
                {
                    ...view,
                    key
                }
            ];
        }, []);
    }
    return customViews;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0RvY3VtZW50SGVhZGVyL1RhYnMvZ2V0Q3VzdG9tVmlld3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBFZGl0Vmlld0NvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5cbmltcG9ydCB7IGRlZmF1bHRHbG9iYWxWaWV3cyB9IGZyb20gJy4uLy4uLy4uL3ZpZXdzL0dsb2JhbC9Sb3V0ZXMvQ3VzdG9tQ29tcG9uZW50J1xuaW1wb3J0IHsgZGVmYXVsdENvbGxlY3Rpb25WaWV3cyB9IGZyb20gJy4uLy4uLy4uL3ZpZXdzL2NvbGxlY3Rpb25zL0VkaXQvUm91dGVzL0N1c3RvbUNvbXBvbmVudCdcblxuZXhwb3J0IGNvbnN0IGdldEN1c3RvbVZpZXdzID0gKGFyZ3M6IHtcbiAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZ1xuICBnbG9iYWw6IFNhbml0aXplZEdsb2JhbENvbmZpZ1xufSk6IEVkaXRWaWV3Q29uZmlnW10gPT4ge1xuICBjb25zdCB7IGNvbGxlY3Rpb24sIGdsb2JhbCB9ID0gYXJnc1xuXG4gIGxldCBjdXN0b21WaWV3czogRWRpdFZpZXdDb25maWdbXVxuXG4gIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgY29uc3QgY29sbGVjdGlvblZpZXdzQ29uZmlnID1cbiAgICAgIHR5cGVvZiBjb2xsZWN0aW9uPy5hZG1pbj8uY29tcG9uZW50cz8udmlld3M/LkVkaXQgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2YgY29sbGVjdGlvbj8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY29sbGVjdGlvbj8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0XG4gICAgICAgIDogdW5kZWZpbmVkXG5cbiAgICBjb25zdCBkZWZhdWx0Vmlld0tleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0Q29sbGVjdGlvblZpZXdzKVxuXG4gICAgY3VzdG9tVmlld3MgPSBPYmplY3QuZW50cmllcyhjb2xsZWN0aW9uVmlld3NDb25maWcgfHwge30pLnJlZHVjZSgocHJldiwgW2tleSwgdmlld10pID0+IHtcbiAgICAgIGlmIChkZWZhdWx0Vmlld0tleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gcHJldlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gWy4uLnByZXYsIHsgLi4udmlldywga2V5IH1dXG4gICAgfSwgW10pXG4gIH1cblxuICBpZiAoZ2xvYmFsKSB7XG4gICAgY29uc3QgZ2xvYmFsVmlld3NDb25maWcgPVxuICAgICAgdHlwZW9mIGdsb2JhbD8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIGdsb2JhbD8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gZ2xvYmFsPy5hZG1pbj8uY29tcG9uZW50cz8udmlld3M/LkVkaXRcbiAgICAgICAgOiB1bmRlZmluZWRcblxuICAgIGNvbnN0IGRlZmF1bHRWaWV3S2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRHbG9iYWxWaWV3cylcblxuICAgIGN1c3RvbVZpZXdzID0gT2JqZWN0LmVudHJpZXMoZ2xvYmFsVmlld3NDb25maWcgfHwge30pLnJlZHVjZSgocHJldiwgW2tleSwgdmlld10pID0+IHtcbiAgICAgIGlmIChkZWZhdWx0Vmlld0tleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gcHJldlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gWy4uLnByZXYsIHsgLi4udmlldywga2V5IH1dXG4gICAgfSwgW10pXG4gIH1cblxuICByZXR1cm4gY3VzdG9tVmlld3Ncbn1cbiJdLCJuYW1lcyI6WyJnZXRDdXN0b21WaWV3cyIsImFyZ3MiLCJjb2xsZWN0aW9uIiwiZ2xvYmFsIiwiY3VzdG9tVmlld3MiLCJjb2xsZWN0aW9uVmlld3NDb25maWciLCJhZG1pbiIsImNvbXBvbmVudHMiLCJ2aWV3cyIsIkVkaXQiLCJ1bmRlZmluZWQiLCJkZWZhdWx0Vmlld0tleXMiLCJPYmplY3QiLCJrZXlzIiwiZGVmYXVsdENvbGxlY3Rpb25WaWV3cyIsImVudHJpZXMiLCJyZWR1Y2UiLCJwcmV2Iiwia2V5IiwidmlldyIsImluY2x1ZGVzIiwiZ2xvYmFsVmlld3NDb25maWciLCJkZWZhdWx0R2xvYmFsVmlld3MiXSwibWFwcGluZ3MiOiI7Ozs7K0JBT2FBOzs7ZUFBQUE7OztpQ0FIc0I7a0NBQ0k7QUFFaEMsTUFBTUEsaUJBQWlCLENBQUNDO0lBSTdCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUUsR0FBR0Y7SUFFL0IsSUFBSUc7SUFFSixJQUFJRixZQUFZO1FBQ2QsTUFBTUcsd0JBQ0osT0FBT0gsWUFBWUksT0FBT0MsWUFBWUMsT0FBT0MsU0FBUyxZQUN0RCxPQUFPUCxZQUFZSSxPQUFPQyxZQUFZQyxPQUFPQyxTQUFTLGFBQ2xEUCxZQUFZSSxPQUFPQyxZQUFZQyxPQUFPQyxPQUN0Q0M7UUFFTixNQUFNQyxrQkFBa0JDLE9BQU9DLElBQUksQ0FBQ0Msd0NBQXNCO1FBRTFEVixjQUFjUSxPQUFPRyxPQUFPLENBQUNWLHlCQUF5QixDQUFDLEdBQUdXLE1BQU0sQ0FBQyxDQUFDQyxNQUFNLENBQUNDLEtBQUtDLEtBQUs7WUFDakYsSUFBSVIsZ0JBQWdCUyxRQUFRLENBQUNGLE1BQU07Z0JBQ2pDLE9BQU9EO1lBQ1Q7WUFFQSxPQUFPO21CQUFJQTtnQkFBTTtvQkFBRSxHQUFHRSxJQUFJO29CQUFFRDtnQkFBSTthQUFFO1FBQ3BDLEdBQUcsRUFBRTtJQUNQO0lBRUEsSUFBSWYsUUFBUTtRQUNWLE1BQU1rQixvQkFDSixPQUFPbEIsUUFBUUcsT0FBT0MsWUFBWUMsT0FBT0MsU0FBUyxZQUNsRCxPQUFPTixRQUFRRyxPQUFPQyxZQUFZQyxPQUFPQyxTQUFTLGFBQzlDTixRQUFRRyxPQUFPQyxZQUFZQyxPQUFPQyxPQUNsQ0M7UUFFTixNQUFNQyxrQkFBa0JDLE9BQU9DLElBQUksQ0FBQ1MsbUNBQWtCO1FBRXREbEIsY0FBY1EsT0FBT0csT0FBTyxDQUFDTSxxQkFBcUIsQ0FBQyxHQUFHTCxNQUFNLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLQyxLQUFLO1lBQzdFLElBQUlSLGdCQUFnQlMsUUFBUSxDQUFDRixNQUFNO2dCQUNqQyxPQUFPRDtZQUNUO1lBRUEsT0FBTzttQkFBSUE7Z0JBQU07b0JBQUUsR0FBR0UsSUFBSTtvQkFBRUQ7Z0JBQUk7YUFBRTtRQUNwQyxHQUFHLEVBQUU7SUFDUDtJQUVBLE9BQU9kO0FBQ1QifQ==