"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../elements/Button"));
const _Loading = require("../../elements/Loading");
const _Form = /*#__PURE__*/ _interop_require_default(require("../../forms/Form"));
const _Submit = /*#__PURE__*/ _interop_require_default(require("../../forms/Submit"));
const _Email = /*#__PURE__*/ _interop_require_default(require("../../forms/field-types/Email"));
const _Password = /*#__PURE__*/ _interop_require_default(require("../../forms/field-types/Password"));
const _Logo = /*#__PURE__*/ _interop_require_default(require("../../graphics/Logo"));
const _Minimal = /*#__PURE__*/ _interop_require_default(require("../../templates/Minimal"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../utilities/Meta"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'login';
const Login = ()=>{
    const history = (0, _reactrouterdom.useHistory)();
    const { t } = (0, _reacti18next.useTranslation)('authentication');
    const { fetchFullUser, user } = (0, _Auth.useAuth)();
    const config = (0, _Config.useConfig)();
    const { admin: { autoLogin, components: { afterLogin, beforeLogin } = {}, logoutRoute, user: userSlug }, collections, routes: { admin, api }, serverURL } = config;
    const collection = collections.find(({ slug })=>slug === userSlug);
    // Fetch 'redirect' from the query string which denotes the URL the user originally tried to visit. This is set in the Routes.tsx file when a user tries to access a protected route and is redirected to the login screen.
    const query = new URLSearchParams((0, _reactrouterdom.useLocation)().search);
    const redirect = query.get('redirect');
    const onSuccess = async (data)=>{
        if (data.token) {
            await fetchFullUser();
            // Ensure the redirect always starts with the admin route, and concatenate the redirect path
            history.push(admin + (redirect || ''));
        }
    };
    const prefillForm = autoLogin && autoLogin.prefillOnly;
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, user ? // Logout
    /*#__PURE__*/ _react.default.createElement(_Minimal.default, {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: t('loginUser'),
        keywords: t('login'),
        title: t('login')
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("h1", null, t('alreadyLoggedIn')), /*#__PURE__*/ _react.default.createElement("p", null, /*#__PURE__*/ _react.default.createElement(_reacti18next.Trans, {
        i18nKey: "loggedIn",
        t: t
    }, /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Link, {
        to: `${admin}${logoutRoute}`
    }, t('logOut')))), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        el: "link",
        to: admin
    }, t('general:backToDashboard')))) : // Login
    /*#__PURE__*/ _react.default.createElement(_Minimal.default, {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: t('loginUser'),
        keywords: t('login'),
        title: t('login')
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__brand`
    }, /*#__PURE__*/ _react.default.createElement(_Logo.default, null)), Array.isArray(beforeLogin) && beforeLogin.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        })), !collection?.auth?.disableLocalStrategy && /*#__PURE__*/ _react.default.createElement(_Form.default, {
        action: `${serverURL}${api}/${userSlug}/login`,
        className: `${baseClass}__form`,
        disableSuccessStatus: true,
        initialData: prefillForm ? {
            email: autoLogin.email,
            password: autoLogin.password
        } : undefined,
        method: "post",
        onSuccess: onSuccess,
        waitForAutocomplete: true
    }, /*#__PURE__*/ _react.default.createElement(_Loading.FormLoadingOverlayToggle, {
        action: "loading",
        name: "login-form"
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__inputWrap`
    }, /*#__PURE__*/ _react.default.createElement(_Email.default, {
        admin: {
            autoComplete: 'email'
        },
        label: t('general:email'),
        name: "email",
        required: true
    }), /*#__PURE__*/ _react.default.createElement(_Password.default, {
        autoComplete: "off",
        label: t('general:password'),
        name: "password",
        required: true
    })), /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Link, {
        to: `${admin}/forgot`
    }, t('forgotPasswordQuestion')), /*#__PURE__*/ _react.default.createElement(_Submit.default, null, t('login'))), Array.isArray(afterLogin) && afterLogin.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        }))));
};
const _default = Login;

//# sourceMappingURL=data:application/json;base64,