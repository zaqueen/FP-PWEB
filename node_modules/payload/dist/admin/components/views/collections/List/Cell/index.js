"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _types = require("../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../utilities/getTranslation");
const _Config = require("../../../../utilities/Config");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../../utilities/RenderCustomComponent"));
const _fieldtypes = /*#__PURE__*/ _interop_require_default(require("./field-types"));
const _Code = /*#__PURE__*/ _interop_require_default(require("./field-types/Code"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DefaultCell = (props)=>{
    const { cellData, className, collection: { slug }, collection, field, link = true, onClick, rowData: { id } = {}, rowData } = props;
    const { routes: { admin } } = (0, _Config.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    let WrapElement = 'span';
    const wrapElementProps = {
        className
    };
    if (link) {
        WrapElement = _reactrouterdom.Link;
        wrapElementProps.to = `${admin}/collections/${slug}/${id}`;
    }
    if (typeof onClick === 'function') {
        WrapElement = 'button';
        wrapElementProps.type = 'button';
        wrapElementProps.onClick = ()=>{
            onClick(props);
        };
    }
    if (field.name === 'id') {
        return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(_Code.default, {
            collection: collection,
            data: `ID: ${cellData}`,
            field: field,
            nowrap: true,
            rowData: rowData
        }));
    }
    let CellComponent = cellData && _fieldtypes.default[field.type];
    if (!CellComponent) {
        if (collection.upload && (0, _types.fieldAffectsData)(field) && field.name === 'filename') {
            CellComponent = _fieldtypes.default.File;
        } else {
            return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, (cellData === '' || typeof cellData === 'undefined') && 'label' in field && t('noLabel', {
                label: (0, _getTranslation.getTranslation)(typeof field.label === 'function' ? 'data' : field.label || 'data', i18n)
            }), typeof cellData === 'string' && cellData, typeof cellData === 'number' && cellData, typeof cellData === 'object' && JSON.stringify(cellData));
        }
    }
    return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(CellComponent, {
        collection: collection,
        data: cellData,
        field: field,
        rowData: rowData
    }));
};
const Cell = (props)=>{
    const { cellData, className, colIndex, collection, field: { admin: { components: { Cell: CustomCell } = {} } = {} }, field, link, onClick, rowData } = props;
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomCell,
        DefaultComponent: DefaultCell,
        componentProps: {
            cellData,
            className,
            colIndex,
            collection,
            field,
            link,
            onClick,
            rowData
        }
    });
};
const _default = Cell;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL2NvbGxlY3Rpb25zL0xpc3QvQ2VsbC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCB0eXBlIHsgQ29kZUZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgQ2VsbENvbXBvbmVudFByb3BzLCBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGZpZWxkQWZmZWN0c0RhdGEgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHsgZ2V0VHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi91dGlsaXRpZXMvZ2V0VHJhbnNsYXRpb24nXG5pbXBvcnQgeyB1c2VDb25maWcgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXRpZXMvQ29uZmlnJ1xuaW1wb3J0IFJlbmRlckN1c3RvbUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXRpZXMvUmVuZGVyQ3VzdG9tQ29tcG9uZW50J1xuaW1wb3J0IGNlbGxDb21wb25lbnRzIGZyb20gJy4vZmllbGQtdHlwZXMnXG5pbXBvcnQgQ29kZUNlbGwgZnJvbSAnLi9maWVsZC10eXBlcy9Db2RlJ1xuXG5jb25zdCBEZWZhdWx0Q2VsbDogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjZWxsRGF0YSxcbiAgICBjbGFzc05hbWUsXG4gICAgY29sbGVjdGlvbjogeyBzbHVnIH0sXG4gICAgY29sbGVjdGlvbixcbiAgICBmaWVsZCxcbiAgICBsaW5rID0gdHJ1ZSxcbiAgICBvbkNsaWNrLFxuICAgIHJvd0RhdGE6IHsgaWQgfSA9IHt9LFxuICAgIHJvd0RhdGEsXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHtcbiAgICByb3V0ZXM6IHsgYWRtaW4gfSxcbiAgfSA9IHVzZUNvbmZpZygpXG4gIGNvbnN0IHsgaTE4biwgdCB9ID0gdXNlVHJhbnNsYXRpb24oJ2dlbmVyYWwnKVxuXG4gIGxldCBXcmFwRWxlbWVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgc3RyaW5nID0gJ3NwYW4nXG5cbiAgY29uc3Qgd3JhcEVsZW1lbnRQcm9wczoge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZ1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXG4gICAgdG8/OiBzdHJpbmdcbiAgICB0eXBlPzogJ2J1dHRvbidcbiAgfSA9IHtcbiAgICBjbGFzc05hbWUsXG4gIH1cblxuICBpZiAobGluaykge1xuICAgIFdyYXBFbGVtZW50ID0gTGlua1xuICAgIHdyYXBFbGVtZW50UHJvcHMudG8gPSBgJHthZG1pbn0vY29sbGVjdGlvbnMvJHtzbHVnfS8ke2lkfWBcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFdyYXBFbGVtZW50ID0gJ2J1dHRvbidcbiAgICB3cmFwRWxlbWVudFByb3BzLnR5cGUgPSAnYnV0dG9uJ1xuICAgIHdyYXBFbGVtZW50UHJvcHMub25DbGljayA9ICgpID0+IHtcbiAgICAgIG9uQ2xpY2socHJvcHMpXG4gICAgfVxuICB9XG5cbiAgaWYgKGZpZWxkLm5hbWUgPT09ICdpZCcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBFbGVtZW50IHsuLi53cmFwRWxlbWVudFByb3BzfT5cbiAgICAgICAgPENvZGVDZWxsXG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBkYXRhPXtgSUQ6ICR7Y2VsbERhdGF9YH1cbiAgICAgICAgICBmaWVsZD17ZmllbGQgYXMgQ29kZUZpZWxkfVxuICAgICAgICAgIG5vd3JhcFxuICAgICAgICAgIHJvd0RhdGE9e3Jvd0RhdGF9XG4gICAgICAgIC8+XG4gICAgICA8L1dyYXBFbGVtZW50PlxuICAgIClcbiAgfVxuXG4gIGxldCBDZWxsQ29tcG9uZW50OiBSZWFjdC5GQzxDZWxsQ29tcG9uZW50UHJvcHM+ID0gY2VsbERhdGEgJiYgY2VsbENvbXBvbmVudHNbZmllbGQudHlwZV1cblxuICBpZiAoIUNlbGxDb21wb25lbnQpIHtcbiAgICBpZiAoY29sbGVjdGlvbi51cGxvYWQgJiYgZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgZmllbGQubmFtZSA9PT0gJ2ZpbGVuYW1lJykge1xuICAgICAgQ2VsbENvbXBvbmVudCA9IGNlbGxDb21wb25lbnRzLkZpbGVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFdyYXBFbGVtZW50IHsuLi53cmFwRWxlbWVudFByb3BzfT5cbiAgICAgICAgICB7KGNlbGxEYXRhID09PSAnJyB8fCB0eXBlb2YgY2VsbERhdGEgPT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgJ2xhYmVsJyBpbiBmaWVsZCAmJlxuICAgICAgICAgICAgdCgnbm9MYWJlbCcsIHtcbiAgICAgICAgICAgICAgbGFiZWw6IGdldFRyYW5zbGF0aW9uKFxuICAgICAgICAgICAgICAgIHR5cGVvZiBmaWVsZC5sYWJlbCA9PT0gJ2Z1bmN0aW9uJyA/ICdkYXRhJyA6IGZpZWxkLmxhYmVsIHx8ICdkYXRhJyxcbiAgICAgICAgICAgICAgICBpMThuLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAge3R5cGVvZiBjZWxsRGF0YSA9PT0gJ3N0cmluZycgJiYgY2VsbERhdGF9XG4gICAgICAgICAge3R5cGVvZiBjZWxsRGF0YSA9PT0gJ251bWJlcicgJiYgY2VsbERhdGF9XG4gICAgICAgICAge3R5cGVvZiBjZWxsRGF0YSA9PT0gJ29iamVjdCcgJiYgSlNPTi5zdHJpbmdpZnkoY2VsbERhdGEpfVxuICAgICAgICA8L1dyYXBFbGVtZW50PlxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFdyYXBFbGVtZW50IHsuLi53cmFwRWxlbWVudFByb3BzfT5cbiAgICAgIDxDZWxsQ29tcG9uZW50IGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IGRhdGE9e2NlbGxEYXRhfSBmaWVsZD17ZmllbGR9IHJvd0RhdGE9e3Jvd0RhdGF9IC8+XG4gICAgPC9XcmFwRWxlbWVudD5cbiAgKVxufVxuXG5jb25zdCBDZWxsOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNlbGxEYXRhLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xJbmRleCxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGZpZWxkOiB7IGFkbWluOiB7IGNvbXBvbmVudHM6IHsgQ2VsbDogQ3VzdG9tQ2VsbCB9ID0ge30gfSA9IHt9IH0sXG4gICAgZmllbGQsXG4gICAgbGluayxcbiAgICBvbkNsaWNrLFxuICAgIHJvd0RhdGEsXG4gIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPFJlbmRlckN1c3RvbUNvbXBvbmVudFxuICAgICAgQ3VzdG9tQ29tcG9uZW50PXtDdXN0b21DZWxsfVxuICAgICAgRGVmYXVsdENvbXBvbmVudD17RGVmYXVsdENlbGx9XG4gICAgICBjb21wb25lbnRQcm9wcz17XG4gICAgICAgIHtcbiAgICAgICAgICBjZWxsRGF0YSxcbiAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgY29sSW5kZXgsXG4gICAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICBsaW5rLFxuICAgICAgICAgIG9uQ2xpY2ssXG4gICAgICAgICAgcm93RGF0YSxcbiAgICAgICAgfSBhcyBQcm9wc1xuICAgICAgfVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VsbFxuIl0sIm5hbWVzIjpbIkRlZmF1bHRDZWxsIiwicHJvcHMiLCJjZWxsRGF0YSIsImNsYXNzTmFtZSIsImNvbGxlY3Rpb24iLCJzbHVnIiwiZmllbGQiLCJsaW5rIiwib25DbGljayIsInJvd0RhdGEiLCJpZCIsInJvdXRlcyIsImFkbWluIiwidXNlQ29uZmlnIiwiaTE4biIsInQiLCJ1c2VUcmFuc2xhdGlvbiIsIldyYXBFbGVtZW50Iiwid3JhcEVsZW1lbnRQcm9wcyIsIkxpbmsiLCJ0byIsInR5cGUiLCJuYW1lIiwiQ29kZUNlbGwiLCJkYXRhIiwibm93cmFwIiwiQ2VsbENvbXBvbmVudCIsImNlbGxDb21wb25lbnRzIiwidXBsb2FkIiwiZmllbGRBZmZlY3RzRGF0YSIsIkZpbGUiLCJsYWJlbCIsImdldFRyYW5zbGF0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsIkNlbGwiLCJjb2xJbmRleCIsImNvbXBvbmVudHMiLCJDdXN0b21DZWxsIiwiUmVuZGVyQ3VzdG9tQ29tcG9uZW50IiwiQ3VzdG9tQ29tcG9uZW50IiwiRGVmYXVsdENvbXBvbmVudCIsImNvbXBvbmVudFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7OytCQXNJQTs7O2VBQUE7Ozs4REF0SWtCOzhCQUNhO2dDQUNWO3VCQUtZO2dDQUNGO3dCQUNMOzhFQUNRO21FQUNQOzZEQUNOOzs7Ozs7QUFFckIsTUFBTUEsY0FBK0IsQ0FBQ0M7SUFDcEMsTUFBTSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUFFQyxJQUFJLEVBQUUsRUFDcEJELFVBQVUsRUFDVkUsS0FBSyxFQUNMQyxPQUFPLElBQUksRUFDWEMsT0FBTyxFQUNQQyxTQUFTLEVBQUVDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUNwQkQsT0FBTyxFQUNSLEdBQUdSO0lBRUosTUFBTSxFQUNKVSxRQUFRLEVBQUVDLEtBQUssRUFBRSxFQUNsQixHQUFHQyxJQUFBQSxpQkFBUztJQUNiLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWMsRUFBQztJQUVuQyxJQUFJQyxjQUFpRDtJQUVyRCxNQUFNQyxtQkFLRjtRQUNGZjtJQUNGO0lBRUEsSUFBSUksTUFBTTtRQUNSVSxjQUFjRSxvQkFBSTtRQUNsQkQsaUJBQWlCRSxFQUFFLEdBQUcsQ0FBQyxFQUFFUixNQUFNLGFBQWEsRUFBRVAsS0FBSyxDQUFDLEVBQUVLLEdBQUcsQ0FBQztJQUM1RDtJQUVBLElBQUksT0FBT0YsWUFBWSxZQUFZO1FBQ2pDUyxjQUFjO1FBQ2RDLGlCQUFpQkcsSUFBSSxHQUFHO1FBQ3hCSCxpQkFBaUJWLE9BQU8sR0FBRztZQUN6QkEsUUFBUVA7UUFDVjtJQUNGO0lBRUEsSUFBSUssTUFBTWdCLElBQUksS0FBSyxNQUFNO1FBQ3ZCLHFCQUNFLDZCQUFDTCxhQUFnQkMsZ0NBQ2YsNkJBQUNLLGFBQVE7WUFDUG5CLFlBQVlBO1lBQ1pvQixNQUFNLENBQUMsSUFBSSxFQUFFdEIsU0FBUyxDQUFDO1lBQ3ZCSSxPQUFPQTtZQUNQbUIsUUFBQUE7WUFDQWhCLFNBQVNBOztJQUlqQjtJQUVBLElBQUlpQixnQkFBOEN4QixZQUFZeUIsbUJBQWMsQ0FBQ3JCLE1BQU1lLElBQUksQ0FBQztJQUV4RixJQUFJLENBQUNLLGVBQWU7UUFDbEIsSUFBSXRCLFdBQVd3QixNQUFNLElBQUlDLElBQUFBLHVCQUFnQixFQUFDdkIsVUFBVUEsTUFBTWdCLElBQUksS0FBSyxZQUFZO1lBQzdFSSxnQkFBZ0JDLG1CQUFjLENBQUNHLElBQUk7UUFDckMsT0FBTztZQUNMLHFCQUNFLDZCQUFDYixhQUFnQkMsa0JBQ2QsQUFBQ2hCLENBQUFBLGFBQWEsTUFBTSxPQUFPQSxhQUFhLFdBQVUsS0FDakQsV0FBV0ksU0FDWFMsRUFBRSxXQUFXO2dCQUNYZ0IsT0FBT0MsSUFBQUEsOEJBQWMsRUFDbkIsT0FBTzFCLE1BQU15QixLQUFLLEtBQUssYUFBYSxTQUFTekIsTUFBTXlCLEtBQUssSUFBSSxRQUM1RGpCO1lBRUosSUFDRCxPQUFPWixhQUFhLFlBQVlBLFVBQ2hDLE9BQU9BLGFBQWEsWUFBWUEsVUFDaEMsT0FBT0EsYUFBYSxZQUFZK0IsS0FBS0MsU0FBUyxDQUFDaEM7UUFHdEQ7SUFDRjtJQUVBLHFCQUNFLDZCQUFDZSxhQUFnQkMsZ0NBQ2YsNkJBQUNRO1FBQWN0QixZQUFZQTtRQUFZb0IsTUFBTXRCO1FBQVVJLE9BQU9BO1FBQU9HLFNBQVNBOztBQUdwRjtBQUVBLE1BQU0wQixPQUF3QixDQUFDbEM7SUFDN0IsTUFBTSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVGlDLFFBQVEsRUFDUmhDLFVBQVUsRUFDVkUsT0FBTyxFQUFFTSxPQUFPLEVBQUV5QixZQUFZLEVBQUVGLE1BQU1HLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDaEVoQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsT0FBTyxFQUNQQyxPQUFPLEVBQ1IsR0FBR1I7SUFFSixxQkFDRSw2QkFBQ3NDLDhCQUFxQjtRQUNwQkMsaUJBQWlCRjtRQUNqQkcsa0JBQWtCekM7UUFDbEIwQyxnQkFDRTtZQUNFeEM7WUFDQUM7WUFDQWlDO1lBQ0FoQztZQUNBRTtZQUNBQztZQUNBQztZQUNBQztRQUNGOztBQUlSO01BRUEsV0FBZTBCIn0=