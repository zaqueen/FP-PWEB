"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _Blocks = /*#__PURE__*/ _interop_require_default(require("./field-types/Blocks"));
const _Checkbox = /*#__PURE__*/ _interop_require_default(require("./field-types/Checkbox"));
const _Date = /*#__PURE__*/ _interop_require_default(require("./field-types/Date"));
const _Select = /*#__PURE__*/ _interop_require_default(require("./field-types/Select"));
const _Textarea = /*#__PURE__*/ _interop_require_default(require("./field-types/Textarea"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
jest.mock('../../../../utilities/Config', ()=>({
        useConfig: ()=>({
                admin: {
                    dateFormat: 'MMMM do yyyy, h:mm a'
                }
            })
    }));
jest.mock('react-i18next', ()=>({
        useTranslation: ()=>({
                t: (string)=>string
            })
    }));
describe('Cell Types', ()=>{
    describe('Blocks', ()=>{
        const field = {
            blocks: [
                {
                    fields: [],
                    labels: {
                        plural: 'Numbers',
                        singular: 'Number'
                    },
                    slug: 'number'
                }
            ],
            label: 'Blocks Content',
            labels: {
                plural: 'Blocks Content',
                singular: 'Block'
            },
            name: 'blocks',
            type: 'blocks'
        };
        it('renders multiple', ()=>{
            const data = [
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                }
            ];
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Blocks.default, {
                data: data,
                field: field
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('2 Blocks Content - Number, Number');
        });
        it('renders zero', ()=>{
            const data = [];
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Blocks.default, {
                data: data,
                field: field
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('0 Blocks Content');
        });
        it('renders "and X more" if over maximum of 5', ()=>{
            const data = [
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                },
                {
                    blockType: 'number'
                }
            ];
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Blocks.default, {
                data: data,
                field: field
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('fields:itemsAndMore');
        });
    });
    describe('Date', ()=>{
        const field = {
            admin: {
                date: {
                    pickerAppearance: 'dayOnly'
                }
            },
            name: 'dayOnly',
            type: 'date'
        };
        it('renders date', ()=>{
            const timeStamp = '2020-10-06T14:07:39.033Z';
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Date.default, {
                data: timeStamp,
                field: field
            }));
            const dateMatch = /October\s6th\s2020,\s\d{1,2}:07\s[A|P]M/ // Had to account for timezones in CI
            ;
            const el = container.querySelector('span');
            expect(el.textContent).toMatch(dateMatch);
        });
        it('handles undefined', ()=>{
            const timeStamp = undefined;
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Date.default, {
                data: timeStamp,
                field: field
            }));
            const el = container.querySelector('span');
            expect(el.textContent).toBe('');
        });
    });
    describe('Checkbox', ()=>{
        it('renders true', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Checkbox.default, {
                data: true
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('true');
        });
        it('renders false', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Checkbox.default, {
                data: false
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('false');
        });
    });
    describe('Textarea', ()=>{
        it('renders data', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Textarea.default, {
                data: "data"
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('data');
        });
        it('handle undefined - bug/13', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Textarea.default, {
                data: undefined
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('');
        });
    });
    describe('Select', ()=>{
        const fieldWithOptionsObject = {
            name: 'selectObject',
            options: [
                {
                    label: 'One',
                    value: 'one'
                },
                {
                    label: 'Two',
                    value: 'two'
                }
            ],
            type: 'select'
        };
        const fieldWithStringsOptions = {
            name: 'selectString',
            options: [
                'blue',
                'green',
                'yellow'
            ],
            type: 'select'
        };
        it('renders options objects', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Select.default, {
                data: "one",
                field: fieldWithOptionsObject
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('One');
        });
        it('renders option strings', ()=>{
            const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Select.default, {
                data: "blue",
                field: fieldWithStringsOptions
            }));
            const el = container.querySelector('span');
            expect(el).toHaveTextContent('blue');
        });
        describe('HasMany', ()=>{
            it('renders options objects', ()=>{
                const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Select.default, {
                    data: [
                        'one',
                        'two'
                    ],
                    field: fieldWithOptionsObject
                }));
                const el = container.querySelector('span');
                expect(el).toHaveTextContent('One, Two');
            });
            it('renders option strings', ()=>{
                const { container } = (0, _react.render)(/*#__PURE__*/ _react1.default.createElement(_Select.default, {
                    data: [
                        'blue',
                        'green'
                    ],
                    field: fieldWithStringsOptions
                }));
                const el = container.querySelector('span');
                expect(el).toHaveTextContent('blue, green');
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,