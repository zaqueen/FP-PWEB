"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _uuid = require("uuid");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../../hooks/usePayloadAPI"));
const _useUseAsTitle = require("../../../../hooks/useUseAsTitle");
const _StepNav = require("../../../elements/StepNav");
const _TableColumns = require("../../../elements/TableColumns");
const _Auth = require("../../../utilities/Auth");
const _Config = require("../../../utilities/Config");
const _Preferences = require("../../../utilities/Preferences");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../utilities/RenderCustomComponent"));
const _SearchParams = require("../../../utilities/SearchParams");
const _Default = /*#__PURE__*/ _interop_require_default(require("./Default"));
const _formatFields = /*#__PURE__*/ _interop_require_default(require("./formatFields"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const hoistQueryParamsToAnd = (where, queryParams)=>{
    if ('and' in where) {
        where.and.push(queryParams);
    } else if ('or' in where) {
        where = {
            and: [
                where,
                queryParams
            ]
        };
    } else {
        where = {
            and: [
                where,
                queryParams
            ]
        };
    }
    return where;
};
/**
 * The ListView component is table which lists the collection's documents.
 * The default list view can be found at the {@link DefaultList} component.
 * Users can also create pass their own custom list view component instead
 * of using the default one.
 */ const ListView = (props)=>{
    const { collection, collection: { admin: { components: { views: { List: CustomList } = {} } = {}, listSearchableFields, pagination: { defaultLimit } }, labels: { plural }, slug } } = props;
    const { routes: { admin, api }, serverURL } = (0, _Config.useConfig)();
    const preferenceKey = `${collection.slug}-list`;
    const { permissions } = (0, _Auth.useAuth)();
    const { setStepNav } = (0, _StepNav.useStepNav)();
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const { limit, page, search, sort, where } = (0, _SearchParams.useSearchParams)();
    const history = (0, _reactrouterdom.useHistory)();
    const { t } = (0, _reacti18next.useTranslation)('general');
    const [fetchURL, setFetchURL] = (0, _react.useState)('');
    const [fields] = (0, _react.useState)(()=>(0, _formatFields.default)(collection));
    const collectionPermissions = permissions?.collections?.[slug];
    const hasCreatePermission = collectionPermissions?.create?.permission;
    const newDocumentURL = `${admin}/collections/${slug}/create`;
    const [{ data }, { setParams }] = (0, _usePayloadAPI.default)(fetchURL, {
        initialParams: {
            page: 1
        }
    });
    const titleField = (0, _useUseAsTitle.useUseTitleField)(collection);
    (0, _react.useEffect)(()=>{
        setStepNav([
            {
                label: plural
            }
        ]);
    }, [
        setStepNav,
        plural
    ]);
    // /////////////////////////////////////
    // Set up Payload REST API query params
    // /////////////////////////////////////
    const resetParams = (0, _react.useCallback)((overrides = {})=>{
        const params = {
            depth: 0,
            draft: 'true',
            limit,
            page: overrides?.page,
            search: overrides?.search,
            sort: overrides?.sort,
            where: overrides?.where || {}
        };
        if (page) params.page = page;
        if (sort) params.sort = sort;
        if (where) params.where = where;
        params.invoke = (0, _uuid.v4)();
        if (search) {
            let copyOfWhere = {
                ...where || {}
            };
            const searchAsConditions = (listSearchableFields || [
                titleField?.name
            ]).map((fieldName)=>{
                return {
                    [fieldName]: {
                        like: search
                    }
                };
            }, []);
            if (searchAsConditions.length > 0) {
                const conditionalSearchFields = {
                    or: [
                        ...searchAsConditions
                    ]
                };
                copyOfWhere = hoistQueryParamsToAnd(copyOfWhere, conditionalSearchFields);
            }
            params.where = copyOfWhere;
        }
        setParams(params);
    }, [
        limit,
        page,
        setParams,
        sort,
        where,
        search,
        listSearchableFields,
        titleField?.name
    ]);
    (0, _react.useEffect)(()=>{
        // Performance enhancement
        // Setting the Fetch URL this way
        // prevents a double-fetch
        setFetchURL(`${serverURL}${api}/${slug}`);
        resetParams();
    }, [
        api,
        resetParams,
        serverURL,
        slug
    ]);
    // /////////////////////////////////////
    // Fetch preferences on first load
    // /////////////////////////////////////
    (0, _react.useEffect)(()=>{
        (async ()=>{
            const currentPreferences = await getPreference(preferenceKey);
            const params = _qs.default.parse(history.location.search, {
                depth: 0,
                ignoreQueryPrefix: true
            });
            const search = {
                ...params,
                limit: params?.limit || currentPreferences?.limit || defaultLimit,
                sort: params?.sort || currentPreferences?.sort
            };
            const newSearchQuery = _qs.default.stringify(search, {
                addQueryPrefix: true
            });
            if (newSearchQuery.length > 1) {
                history.replace({
                    search: newSearchQuery
                });
            }
        })();
    }, [
        collection,
        getPreference,
        preferenceKey,
        history,
        t,
        defaultLimit
    ]);
    // /////////////////////////////////////
    // Set preferences on change
    // /////////////////////////////////////
    (0, _react.useEffect)(()=>{
        void setPreference(preferenceKey, {
            sort
        }, true);
    }, [
        sort,
        preferenceKey,
        setPreference
    ]);
    (0, _react.useEffect)(()=>{
        void setPreference(preferenceKey, {
            limit
        }, true);
    }, [
        limit,
        preferenceKey,
        setPreference
    ]);
    // /////////////////////////////////////
    // Prevent going beyond page limit
    // /////////////////////////////////////
    (0, _react.useEffect)(()=>{
        if (data?.totalDocs && data.pagingCounter > data.totalDocs) {
            const params = _qs.default.parse(history.location.search, {
                depth: 0,
                ignoreQueryPrefix: true
            });
            const newSearchQuery = _qs.default.stringify({
                ...params,
                page: data.totalPages
            }, {
                addQueryPrefix: true
            });
            history.replace({
                search: newSearchQuery
            });
        }
    }, [
        data,
        history,
        resetParams
    ]);
    return /*#__PURE__*/ _react.default.createElement(_TableColumns.TableColumnsProvider, {
        collection: collection
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomList,
        DefaultComponent: _Default.default,
        componentProps: {
            collection: {
                ...collection,
                fields
            },
            data,
            hasCreatePermission,
            limit: limit || defaultLimit,
            newDocumentURL,
            resetParams,
            titleField
        }
    }));
};
const _default = ListView;

//# sourceMappingURL=data:application/json;base64,