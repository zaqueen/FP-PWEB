"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultCollectionViews: function() {
        return defaultCollectionViews;
    },
    CustomCollectionComponent: function() {
        return CustomCollectionComponent;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _API = require("../../../API");
const _LivePreview = require("../../../LivePreview");
const _Version = /*#__PURE__*/ _interop_require_default(require("../../../Version/Version"));
const _Versions = /*#__PURE__*/ _interop_require_default(require("../../../Versions"));
const _index = require("../Default/index");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const defaultCollectionViews = {
    API: _API.API,
    Default: _index.DefaultCollectionEdit,
    LivePreview: _LivePreview.LivePreviewView,
    References: null,
    Relationships: null,
    Version: _Version.default,
    Versions: _Versions.default
};
const CustomCollectionComponent = (args)=>{
    const { collection, view } = args;
    const { admin: { components: { views: { Edit } = {} } = {} } = {} } = collection;
    // Overriding components may come from multiple places in the config
    // Need to cascade through the hierarchy to find the correct component to render
    // For example, the Edit view:
    // 1. Edit?.Default
    // 2. Edit?.Default?.Component
    // TODO: Remove the `@ts-ignore` when a Typescript wizard arrives
    // For some reason `Component` does not exist on type `Edit[view]` no matter how narrow the type is
    const Component = typeof Edit === 'object' && typeof Edit[view] === 'function' ? Edit[view] : typeof Edit === 'object' && typeof Edit?.[view] === 'object' && // @ts-ignore
    typeof Edit[view].Component === 'function' ? Edit[view].Component : defaultCollectionViews[view];
    if (Component) {
        return /*#__PURE__*/ _react.default.createElement(Component, args);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL2NvbGxlY3Rpb25zL0VkaXQvUm91dGVzL0N1c3RvbUNvbXBvbmVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25FZGl0Vmlld1Byb3BzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IEFQSSB9IGZyb20gJy4uLy4uLy4uL0FQSSdcbmltcG9ydCB7IExpdmVQcmV2aWV3VmlldyB9IGZyb20gJy4uLy4uLy4uL0xpdmVQcmV2aWV3J1xuaW1wb3J0IFZlcnNpb25WaWV3IGZyb20gJy4uLy4uLy4uL1ZlcnNpb24vVmVyc2lvbidcbmltcG9ydCBWZXJzaW9uc1ZpZXcgZnJvbSAnLi4vLi4vLi4vVmVyc2lvbnMnXG5pbXBvcnQgeyBEZWZhdWx0Q29sbGVjdGlvbkVkaXQgfSBmcm9tICcuLi9EZWZhdWx0L2luZGV4J1xuXG5leHBvcnQgdHlwZSBjb2xsZWN0aW9uVmlld1R5cGUgPVxuICB8ICdBUEknXG4gIHwgJ0RlZmF1bHQnXG4gIHwgJ0xpdmVQcmV2aWV3J1xuICB8ICdSZWZlcmVuY2VzJ1xuICB8ICdSZWxhdGlvbnNoaXBzJ1xuICB8ICdWZXJzaW9uJ1xuICB8ICdWZXJzaW9ucydcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb2xsZWN0aW9uVmlld3M6IHtcbiAgW2tleSBpbiBjb2xsZWN0aW9uVmlld1R5cGVdOiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5cbn0gPSB7XG4gIEFQSSxcbiAgRGVmYXVsdDogRGVmYXVsdENvbGxlY3Rpb25FZGl0LFxuICBMaXZlUHJldmlldzogTGl2ZVByZXZpZXdWaWV3LFxuICBSZWZlcmVuY2VzOiBudWxsLFxuICBSZWxhdGlvbnNoaXBzOiBudWxsLFxuICBWZXJzaW9uOiBWZXJzaW9uVmlldyxcbiAgVmVyc2lvbnM6IFZlcnNpb25zVmlldyxcbn1cblxuZXhwb3J0IGNvbnN0IEN1c3RvbUNvbGxlY3Rpb25Db21wb25lbnQgPSAoXG4gIGFyZ3M6IENvbGxlY3Rpb25FZGl0Vmlld1Byb3BzICYge1xuICAgIHZpZXc6IGNvbGxlY3Rpb25WaWV3VHlwZVxuICB9LFxuKSA9PiB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbiwgdmlldyB9ID0gYXJnc1xuXG4gIGNvbnN0IHsgYWRtaW46IHsgY29tcG9uZW50czogeyB2aWV3czogeyBFZGl0IH0gPSB7fSB9ID0ge30gfSA9IHt9IH0gPSBjb2xsZWN0aW9uXG5cbiAgLy8gT3ZlcnJpZGluZyBjb21wb25lbnRzIG1heSBjb21lIGZyb20gbXVsdGlwbGUgcGxhY2VzIGluIHRoZSBjb25maWdcbiAgLy8gTmVlZCB0byBjYXNjYWRlIHRocm91Z2ggdGhlIGhpZXJhcmNoeSB0byBmaW5kIHRoZSBjb3JyZWN0IGNvbXBvbmVudCB0byByZW5kZXJcbiAgLy8gRm9yIGV4YW1wbGUsIHRoZSBFZGl0IHZpZXc6XG4gIC8vIDEuIEVkaXQ/LkRlZmF1bHRcbiAgLy8gMi4gRWRpdD8uRGVmYXVsdD8uQ29tcG9uZW50XG4gIC8vIFRPRE86IFJlbW92ZSB0aGUgYEB0cy1pZ25vcmVgIHdoZW4gYSBUeXBlc2NyaXB0IHdpemFyZCBhcnJpdmVzXG4gIC8vIEZvciBzb21lIHJlYXNvbiBgQ29tcG9uZW50YCBkb2VzIG5vdCBleGlzdCBvbiB0eXBlIGBFZGl0W3ZpZXddYCBubyBtYXR0ZXIgaG93IG5hcnJvdyB0aGUgdHlwZSBpc1xuICBjb25zdCBDb21wb25lbnQgPVxuICAgIHR5cGVvZiBFZGl0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgRWRpdFt2aWV3XSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBFZGl0W3ZpZXddXG4gICAgICA6IHR5cGVvZiBFZGl0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgRWRpdD8uW3ZpZXddID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBFZGl0W3ZpZXddLkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyAvLyBAdHMtaWdub3JlXG4gICAgICAgIEVkaXRbdmlld10uQ29tcG9uZW50XG4gICAgICA6IGRlZmF1bHRDb2xsZWN0aW9uVmlld3Nbdmlld11cblxuICBpZiAoQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIDxDb21wb25lbnQgey4uLmFyZ3N9IC8+XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkZWZhdWx0Q29sbGVjdGlvblZpZXdzIiwiQ3VzdG9tQ29sbGVjdGlvbkNvbXBvbmVudCIsIkFQSSIsIkRlZmF1bHQiLCJEZWZhdWx0Q29sbGVjdGlvbkVkaXQiLCJMaXZlUHJldmlldyIsIkxpdmVQcmV2aWV3VmlldyIsIlJlZmVyZW5jZXMiLCJSZWxhdGlvbnNoaXBzIiwiVmVyc2lvbiIsIlZlcnNpb25WaWV3IiwiVmVyc2lvbnMiLCJWZXJzaW9uc1ZpZXciLCJhcmdzIiwiY29sbGVjdGlvbiIsInZpZXciLCJhZG1pbiIsImNvbXBvbmVudHMiLCJ2aWV3cyIsIkVkaXQiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBbUJhQSxzQkFBc0I7ZUFBdEJBOztJQVlBQyx5QkFBeUI7ZUFBekJBOzs7OERBL0JLO3FCQUlFOzZCQUNZO2dFQUNSO2lFQUNDO3VCQUNhOzs7Ozs7QUFXL0IsTUFBTUQseUJBRVQ7SUFDRkUsS0FBQUEsUUFBRztJQUNIQyxTQUFTQyw0QkFBcUI7SUFDOUJDLGFBQWFDLDRCQUFlO0lBQzVCQyxZQUFZO0lBQ1pDLGVBQWU7SUFDZkMsU0FBU0MsZ0JBQVc7SUFDcEJDLFVBQVVDLGlCQUFZO0FBQ3hCO0FBRU8sTUFBTVgsNEJBQTRCLENBQ3ZDWTtJQUlBLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEVBQUUsR0FBR0Y7SUFFN0IsTUFBTSxFQUFFRyxPQUFPLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBR0w7SUFFdEUsb0VBQW9FO0lBQ3BFLGdGQUFnRjtJQUNoRiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLDhCQUE4QjtJQUM5QixpRUFBaUU7SUFDakUsbUdBQW1HO0lBQ25HLE1BQU1NLFlBQ0osT0FBT0QsU0FBUyxZQUFZLE9BQU9BLElBQUksQ0FBQ0osS0FBSyxLQUFLLGFBQzlDSSxJQUFJLENBQUNKLEtBQUssR0FDVixPQUFPSSxTQUFTLFlBQ2hCLE9BQU9BLE1BQU0sQ0FBQ0osS0FBSyxLQUFLLFlBQ3hCLGFBQWE7SUFDYixPQUFPSSxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssU0FBUyxLQUFLLGFBRWhDRCxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssU0FBUyxHQUNwQnBCLHNCQUFzQixDQUFDZSxLQUFLO0lBRWxDLElBQUlLLFdBQVc7UUFDYixxQkFBTyw2QkFBQ0EsV0FBY1A7SUFDeEI7QUFDRiJ9