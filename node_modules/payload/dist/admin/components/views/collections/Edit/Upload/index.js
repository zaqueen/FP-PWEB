"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    editDrawerSlug: function() {
        return editDrawerSlug;
    },
    sizePreviewSlug: function() {
        return sizePreviewSlug;
    },
    UploadActions: function() {
        return UploadActions;
    },
    Upload: function() {
        return Upload;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _isImage = /*#__PURE__*/ _interop_require_default(require("../../../../../../uploads/isImage"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Button"));
const _Drawer = require("../../../../elements/Drawer");
const _Dropzone = require("../../../../elements/Dropzone");
const _EditUpload = require("../../../../elements/EditUpload");
const _FileDetails = /*#__PURE__*/ _interop_require_default(require("../../../../elements/FileDetails"));
const _PreviewSizes = /*#__PURE__*/ _interop_require_default(require("../../../../elements/PreviewSizes"));
const _Thumbnail = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Thumbnail"));
const _Error = /*#__PURE__*/ _interop_require_default(require("../../../../forms/Error"));
const _context = require("../../../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../../../forms/Form/reduceFieldsToValues"));
const _shared = require("../../../../forms/field-types/shared");
const _useField = /*#__PURE__*/ _interop_require_default(require("../../../../forms/useField"));
const _DocumentInfo = require("../../../../utilities/DocumentInfo");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'file-field';
const editDrawerSlug = 'edit-upload';
const sizePreviewSlug = 'preview-sizes';
const validate = (value)=>{
    if (!value && value !== undefined) {
        return 'A file is required.';
    }
    return true;
};
const UploadActions = ({ canEdit, showSizePreviews })=>{
    const { t } = (0, _reacti18next.useTranslation)('upload');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__file-mutation`
    }, showSizePreviews && /*#__PURE__*/ _react.default.createElement(_Drawer.DrawerToggler, {
        className: `${baseClass}__previewSizes`,
        slug: sizePreviewSlug
    }, t('upload:previewSizes')), canEdit && /*#__PURE__*/ _react.default.createElement(_Drawer.DrawerToggler, {
        className: `${baseClass}__edit`,
        slug: editDrawerSlug
    }, t('upload:editImage')));
};
const Upload = (props)=>{
    const submitted = (0, _context.useFormSubmitted)();
    const { collection, internalState, onChange, updatedAt } = props;
    const [replacingFile, setReplacingFile] = (0, _react.useState)(false);
    const [fileSrc, setFileSrc] = (0, _react.useState)(null);
    const { t } = (0, _reacti18next.useTranslation)([
        'upload',
        'general'
    ]);
    const [doc, setDoc] = (0, _react.useState)((0, _reduceFieldsToValues.default)(internalState || {}, true));
    const { docPermissions } = (0, _DocumentInfo.useDocumentInfo)();
    const { errorMessage, setValue, showError, value } = (0, _useField.default)({
        path: 'file',
        validate
    });
    const handleFileNameChange = (e)=>{
        const updatedFileName = e.target.value;
        if (value) {
            const fileValue = value;
            // Creating a new File object with updated properties
            const newFile = new File([
                fileValue
            ], updatedFileName, {
                type: fileValue.type
            });
            setValue(newFile) // Updating the state with the new File object
            ;
        }
    };
    const handleFileSelection = _react.default.useCallback((files)=>{
        const fileToUpload = files?.[0];
        setValue(fileToUpload);
    }, [
        setValue
    ]);
    const handleFileRemoval = (0, _react.useCallback)(()=>{
        setReplacingFile(true);
        setValue(null);
        setFileSrc('');
    }, [
        setValue
    ]);
    (0, _react.useEffect)(()=>{
        setDoc((0, _reduceFieldsToValues.default)(internalState || {}, true));
        setReplacingFile(false);
    }, [
        internalState
    ]);
    (0, _react.useEffect)(()=>{
        if (value instanceof File) {
            const fileReader = new FileReader();
            fileReader.onload = (e)=>{
                const imgSrc = e.target?.result;
                if (typeof imgSrc === 'string') {
                    setFileSrc(imgSrc);
                }
            };
            fileReader.readAsDataURL(value);
        }
        if (typeof onChange === 'function') {
            onChange(value);
        }
    }, [
        value,
        onChange,
        updatedAt
    ]);
    const canRemoveUpload = docPermissions?.update?.permission && 'delete' in docPermissions && docPermissions?.delete?.permission;
    const hasImageSizes = collection?.upload?.imageSizes?.length > 0;
    const hasResizeOptions = Boolean(collection?.upload?.resizeOptions);
    const { collection: { upload: { crop: showCrop = true, focalPoint = true } } = {} } = props;
    const showFocalPoint = focalPoint && (hasImageSizes || hasResizeOptions);
    const lastSubmittedTime = submitted ? new Date().toISOString() : null;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    }), doc.filename && !replacingFile && /*#__PURE__*/ _react.default.createElement(_FileDetails.default, {
        canEdit: showCrop || showFocalPoint,
        collection: collection,
        doc: doc,
        handleRemove: canRemoveUpload ? handleFileRemoval : undefined,
        hasImageSizes: hasImageSizes,
        imageCacheTag: lastSubmittedTime
    }), (!doc.filename || replacingFile) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__upload`
    }, !value && /*#__PURE__*/ _react.default.createElement(_Dropzone.Dropzone, {
        className: `${baseClass}__dropzone`,
        mimeTypes: collection?.upload?.mimeTypes,
        onChange: handleFileSelection
    }), value && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__thumbnail-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Thumbnail.default, {
        fileSrc: (0, _isImage.default)(value.type) ? fileSrc : null
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__file-adjustments`
    }, /*#__PURE__*/ _react.default.createElement("input", {
        className: `${baseClass}__filename`,
        onChange: handleFileNameChange,
        type: "text",
        value: value.name
    }), (0, _isImage.default)(value.type) && value.type !== 'image/svg+xml' && /*#__PURE__*/ _react.default.createElement(UploadActions, {
        canEdit: showCrop || showFocalPoint,
        showSizePreviews: hasImageSizes && doc.filename && !replacingFile
    })), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__remove`,
        icon: "x",
        iconStyle: "with-border",
        onClick: handleFileRemoval,
        round: true,
        tooltip: t('general:cancel')
    }))), (value || doc.filename) && /*#__PURE__*/ _react.default.createElement(_Drawer.Drawer, {
        header: null,
        slug: editDrawerSlug
    }, /*#__PURE__*/ _react.default.createElement(_EditUpload.EditUpload, {
        doc: doc || undefined,
        fileName: value?.name || doc?.filename,
        fileSrc: fileSrc || doc?.url,
        imageCacheTag: lastSubmittedTime,
        showCrop: showCrop,
        showFocalPoint: showFocalPoint
    })), doc && hasImageSizes && /*#__PURE__*/ _react.default.createElement(_Drawer.Drawer, {
        className: `${baseClass}__previewDrawer`,
        hoverTitle: true,
        slug: sizePreviewSlug,
        title: t('upload:sizesFor', {
            label: doc?.filename
        })
    }, /*#__PURE__*/ _react.default.createElement(_PreviewSizes.default, {
        collection: collection,
        doc: doc
    })));
};

//# sourceMappingURL=data:application/json;base64,