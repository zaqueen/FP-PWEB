"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildVersionColumns", {
    enumerable: true,
    get: function() {
        return buildVersionColumns;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _ = require("../..");
const _formatDate = require("../../../utilities/formatDate");
const _SortColumn = /*#__PURE__*/ _interop_require_default(require("../../elements/SortColumn"));
const _Config = require("../../utilities/Config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const CreatedAtCell = ({ id, collection, date, global })=>{
    const { admin: { dateFormat }, routes: { admin } } = (0, _Config.useConfig)();
    const { params: { id: docID } } = (0, _reactrouterdom.useRouteMatch)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    let to;
    if (collection) to = `${admin}/collections/${collection.slug}/${docID}/versions/${id}`;
    if (global) to = `${admin}/globals/${global.slug}/versions/${id}`;
    return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.Link, {
        to: to
    }, date && (0, _formatDate.formatDate)(date, dateFormat, i18n?.language));
};
const TextCell = ({ children })=>/*#__PURE__*/ _react.default.createElement("span", null, children);
const buildVersionColumns = (collection, global, t)=>[
        {
            name: '',
            accessor: 'updatedAt',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    label: t('general:updatedAt'),
                    name: "updatedAt"
                }),
                renderCell: (row, data)=>/*#__PURE__*/ _react.default.createElement(CreatedAtCell, {
                        collection: collection,
                        date: data,
                        global: global,
                        id: row?.id
                    })
            },
            label: ''
        },
        {
            name: '',
            accessor: 'id',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    disable: true,
                    label: t('versionID'),
                    name: "id"
                }),
                renderCell: (row, data)=>/*#__PURE__*/ _react.default.createElement(TextCell, null, data)
            },
            label: ''
        },
        {
            name: '',
            accessor: 'autosave',
            active: true,
            components: {
                Heading: /*#__PURE__*/ _react.default.createElement(_SortColumn.default, {
                    disable: true,
                    label: t('type'),
                    name: "autosave"
                }),
                renderCell: (row)=>/*#__PURE__*/ _react.default.createElement(TextCell, null, row?.autosave && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_.Pill, null, t('autosave')), "\xa0\xa0"), row?.version._status === 'published' && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_.Pill, {
                        pillStyle: "success"
                    }, t('published')), "\xa0\xa0"), row?.version._status === 'draft' && /*#__PURE__*/ _react.default.createElement(_.Pill, null, t('draft')))
            },
            label: ''
        }
    ];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL1ZlcnNpb25zL2NvbHVtbnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVEZ1bmN0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgTGluaywgdXNlUm91dGVNYXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IENvbHVtbiB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL1RhYmxlL3R5cGVzJ1xuXG5pbXBvcnQgeyBQaWxsIH0gZnJvbSAnLi4vLi4nXG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2Zvcm1hdERhdGUnXG5pbXBvcnQgU29ydENvbHVtbiBmcm9tICcuLi8uLi9lbGVtZW50cy9Tb3J0Q29sdW1uJ1xuaW1wb3J0IHsgdXNlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0NvbmZpZydcblxudHlwZSBDcmVhdGVkQXRDZWxsUHJvcHMgPSB7XG4gIGNvbGxlY3Rpb24/OiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gIGRhdGU6IHN0cmluZ1xuICBnbG9iYWw/OiBTYW5pdGl6ZWRHbG9iYWxDb25maWdcbiAgaWQ6IHN0cmluZ1xufVxuXG5jb25zdCBDcmVhdGVkQXRDZWxsOiBSZWFjdC5GQzxDcmVhdGVkQXRDZWxsUHJvcHM+ID0gKHsgaWQsIGNvbGxlY3Rpb24sIGRhdGUsIGdsb2JhbCB9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhZG1pbjogeyBkYXRlRm9ybWF0IH0sXG4gICAgcm91dGVzOiB7IGFkbWluIH0sXG4gIH0gPSB1c2VDb25maWcoKVxuICBjb25zdCB7XG4gICAgcGFyYW1zOiB7IGlkOiBkb2NJRCB9LFxuICB9ID0gdXNlUm91dGVNYXRjaDx7IGlkOiBzdHJpbmcgfT4oKVxuXG4gIGNvbnN0IHsgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIGxldCB0bzogc3RyaW5nXG5cbiAgaWYgKGNvbGxlY3Rpb24pIHRvID0gYCR7YWRtaW59L2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbi5zbHVnfS8ke2RvY0lEfS92ZXJzaW9ucy8ke2lkfWBcbiAgaWYgKGdsb2JhbCkgdG8gPSBgJHthZG1pbn0vZ2xvYmFscy8ke2dsb2JhbC5zbHVnfS92ZXJzaW9ucy8ke2lkfWBcblxuICByZXR1cm4gPExpbmsgdG89e3RvfT57ZGF0ZSAmJiBmb3JtYXREYXRlKGRhdGUsIGRhdGVGb3JtYXQsIGkxOG4/Lmxhbmd1YWdlKX08L0xpbms+XG59XG5cbmNvbnN0IFRleHRDZWxsOiBSZWFjdC5GQzx7IGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsgY2hpbGRyZW4gfSkgPT4gPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cblxuZXhwb3J0IGNvbnN0IGJ1aWxkVmVyc2lvbkNvbHVtbnMgPSAoXG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWcsXG4gIGdsb2JhbDogU2FuaXRpemVkR2xvYmFsQ29uZmlnLFxuICB0OiBURnVuY3Rpb24sXG4pOiBDb2x1bW5bXSA9PiBbXG4gIHtcbiAgICBuYW1lOiAnJyxcbiAgICBhY2Nlc3NvcjogJ3VwZGF0ZWRBdCcsXG4gICAgYWN0aXZlOiB0cnVlLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIEhlYWRpbmc6IDxTb3J0Q29sdW1uIGxhYmVsPXt0KCdnZW5lcmFsOnVwZGF0ZWRBdCcpfSBuYW1lPVwidXBkYXRlZEF0XCIgLz4sXG4gICAgICByZW5kZXJDZWxsOiAocm93LCBkYXRhKSA9PiAoXG4gICAgICAgIDxDcmVhdGVkQXRDZWxsIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IGRhdGU9e2RhdGF9IGdsb2JhbD17Z2xvYmFsfSBpZD17cm93Py5pZH0gLz5cbiAgICAgICksXG4gICAgfSxcbiAgICBsYWJlbDogJycsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnJyxcbiAgICBhY2Nlc3NvcjogJ2lkJyxcbiAgICBhY3RpdmU6IHRydWUsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgSGVhZGluZzogPFNvcnRDb2x1bW4gZGlzYWJsZSBsYWJlbD17dCgndmVyc2lvbklEJyl9IG5hbWU9XCJpZFwiIC8+LFxuICAgICAgcmVuZGVyQ2VsbDogKHJvdywgZGF0YSkgPT4gPFRleHRDZWxsPntkYXRhfTwvVGV4dENlbGw+LFxuICAgIH0sXG4gICAgbGFiZWw6ICcnLFxuICB9LFxuICB7XG4gICAgbmFtZTogJycsXG4gICAgYWNjZXNzb3I6ICdhdXRvc2F2ZScsXG4gICAgYWN0aXZlOiB0cnVlLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIEhlYWRpbmc6IDxTb3J0Q29sdW1uIGRpc2FibGUgbGFiZWw9e3QoJ3R5cGUnKX0gbmFtZT1cImF1dG9zYXZlXCIgLz4sXG4gICAgICByZW5kZXJDZWxsOiAocm93KSA9PiAoXG4gICAgICAgIDxUZXh0Q2VsbD5cbiAgICAgICAgICB7cm93Py5hdXRvc2F2ZSAmJiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgIDxQaWxsPnt0KCdhdXRvc2F2ZScpfTwvUGlsbD5cbiAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3Jvdz8udmVyc2lvbi5fc3RhdHVzID09PSAncHVibGlzaGVkJyAmJiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgIDxQaWxsIHBpbGxTdHlsZT1cInN1Y2Nlc3NcIj57dCgncHVibGlzaGVkJyl9PC9QaWxsPlxuICAgICAgICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7cm93Py52ZXJzaW9uLl9zdGF0dXMgPT09ICdkcmFmdCcgJiYgPFBpbGw+e3QoJ2RyYWZ0Jyl9PC9QaWxsPn1cbiAgICAgICAgPC9UZXh0Q2VsbD5cbiAgICAgICksXG4gICAgfSxcbiAgICBsYWJlbDogJycsXG4gIH0sXG5dXG4iXSwibmFtZXMiOlsiYnVpbGRWZXJzaW9uQ29sdW1ucyIsIkNyZWF0ZWRBdENlbGwiLCJpZCIsImNvbGxlY3Rpb24iLCJkYXRlIiwiZ2xvYmFsIiwiYWRtaW4iLCJkYXRlRm9ybWF0Iiwicm91dGVzIiwidXNlQ29uZmlnIiwicGFyYW1zIiwiZG9jSUQiLCJ1c2VSb3V0ZU1hdGNoIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwidG8iLCJzbHVnIiwiTGluayIsImZvcm1hdERhdGUiLCJsYW5ndWFnZSIsIlRleHRDZWxsIiwiY2hpbGRyZW4iLCJzcGFuIiwidCIsIm5hbWUiLCJhY2Nlc3NvciIsImFjdGl2ZSIsImNvbXBvbmVudHMiLCJIZWFkaW5nIiwiU29ydENvbHVtbiIsImxhYmVsIiwicmVuZGVyQ2VsbCIsInJvdyIsImRhdGEiLCJkaXNhYmxlIiwiYXV0b3NhdmUiLCJSZWFjdCIsIkZyYWdtZW50IiwiUGlsbCIsInZlcnNpb24iLCJfc3RhdHVzIiwicGlsbFN0eWxlIl0sIm1hcHBpbmdzIjoiOzs7OytCQTJDYUE7OztlQUFBQTs7OzhEQXpDSzs4QkFDYTtnQ0FDSztrQkFNZjs0QkFDTTttRUFDSjt3QkFDRzs7Ozs7O0FBUzFCLE1BQU1DLGdCQUE4QyxDQUFDLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUNuRixNQUFNLEVBQ0pDLE9BQU8sRUFBRUMsVUFBVSxFQUFFLEVBQ3JCQyxRQUFRLEVBQUVGLEtBQUssRUFBRSxFQUNsQixHQUFHRyxJQUFBQSxpQkFBUztJQUNiLE1BQU0sRUFDSkMsUUFBUSxFQUFFUixJQUFJUyxLQUFLLEVBQUUsRUFDdEIsR0FBR0MsSUFBQUEsNkJBQWE7SUFFakIsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWM7SUFFL0IsSUFBSUM7SUFFSixJQUFJWixZQUFZWSxLQUFLLENBQUMsRUFBRVQsTUFBTSxhQUFhLEVBQUVILFdBQVdhLElBQUksQ0FBQyxDQUFDLEVBQUVMLE1BQU0sVUFBVSxFQUFFVCxHQUFHLENBQUM7SUFDdEYsSUFBSUcsUUFBUVUsS0FBSyxDQUFDLEVBQUVULE1BQU0sU0FBUyxFQUFFRCxPQUFPVyxJQUFJLENBQUMsVUFBVSxFQUFFZCxHQUFHLENBQUM7SUFFakUscUJBQU8sNkJBQUNlLG9CQUFJO1FBQUNGLElBQUlBO09BQUtYLFFBQVFjLElBQUFBLHNCQUFVLEVBQUNkLE1BQU1HLFlBQVlNLE1BQU1NO0FBQ25FO0FBRUEsTUFBTUMsV0FBcUQsQ0FBQyxFQUFFQyxRQUFRLEVBQUUsaUJBQUssNkJBQUNDLGNBQU1EO0FBRTdFLE1BQU1yQixzQkFBc0IsQ0FDakNHLFlBQ0FFLFFBQ0FrQixJQUNhO1FBQ2I7WUFDRUMsTUFBTTtZQUNOQyxVQUFVO1lBQ1ZDLFFBQVE7WUFDUkMsWUFBWTtnQkFDVkMsdUJBQVMsNkJBQUNDLG1CQUFVO29CQUFDQyxPQUFPUCxFQUFFO29CQUFzQkMsTUFBSzs7Z0JBQ3pETyxZQUFZLENBQUNDLEtBQUtDLHFCQUNoQiw2QkFBQ2hDO3dCQUFjRSxZQUFZQTt3QkFBWUMsTUFBTTZCO3dCQUFNNUIsUUFBUUE7d0JBQVFILElBQUk4QixLQUFLOUI7O1lBRWhGO1lBQ0E0QixPQUFPO1FBQ1Q7UUFDQTtZQUNFTixNQUFNO1lBQ05DLFVBQVU7WUFDVkMsUUFBUTtZQUNSQyxZQUFZO2dCQUNWQyx1QkFBUyw2QkFBQ0MsbUJBQVU7b0JBQUNLLFNBQUFBO29CQUFRSixPQUFPUCxFQUFFO29CQUFjQyxNQUFLOztnQkFDekRPLFlBQVksQ0FBQ0MsS0FBS0MscUJBQVMsNkJBQUNiLGdCQUFVYTtZQUN4QztZQUNBSCxPQUFPO1FBQ1Q7UUFDQTtZQUNFTixNQUFNO1lBQ05DLFVBQVU7WUFDVkMsUUFBUTtZQUNSQyxZQUFZO2dCQUNWQyx1QkFBUyw2QkFBQ0MsbUJBQVU7b0JBQUNLLFNBQUFBO29CQUFRSixPQUFPUCxFQUFFO29CQUFTQyxNQUFLOztnQkFDcERPLFlBQVksQ0FBQ0Msb0JBQ1gsNkJBQUNaLGdCQUNFWSxLQUFLRywwQkFDSiw2QkFBQ0MsY0FBSyxDQUFDQyxRQUFRLHNCQUNiLDZCQUFDQyxNQUFJLFFBQUVmLEVBQUUsY0FBbUIsYUFJL0JTLEtBQUtPLFFBQVFDLFlBQVksNkJBQ3hCLDZCQUFDSixjQUFLLENBQUNDLFFBQVEsc0JBQ2IsNkJBQUNDLE1BQUk7d0JBQUNHLFdBQVU7dUJBQVdsQixFQUFFLGVBQW9CLGFBSXBEUyxLQUFLTyxRQUFRQyxZQUFZLHlCQUFXLDZCQUFDRixNQUFJLFFBQUVmLEVBQUU7WUFHcEQ7WUFDQU8sT0FBTztRQUNUO0tBQ0QifQ==