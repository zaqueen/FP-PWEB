"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _EditDepth = require("../../utilities/EditDepth");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _SearchParams = require("../../utilities/SearchParams");
const _Default = require("./Default");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const VersionsView = (props)=>{
    const { id, collection, global } = props;
    const { permissions, user } = (0, _Auth.useAuth)();
    const [fetchURL, setFetchURL] = (0, _react.useState)('');
    const { routes: { admin, api }, serverURL } = (0, _Config.useConfig)();
    const { i18n } = (0, _reacti18next.useTranslation)('version');
    const { limit, page, sort } = (0, _SearchParams.useSearchParams)();
    let CustomVersionsView = null;
    let docURL;
    let entityLabel;
    let slug;
    let editURL;
    if (collection) {
        ({ slug } = collection);
        docURL = `${serverURL}${api}/${slug}/${id}`;
        entityLabel = (0, _getTranslation.getTranslation)(collection.labels.singular, i18n);
        editURL = `${admin}/collections/${collection.slug}/${id}`;
        // The component definition could come from multiple places in the config
        // we need to cascade into the proper component from the top-down
        // 1. "components.Edit"
        // 2. "components.Edit.Versions"
        // 3. "components.Edit.Versions.Component"
        const Edit = collection?.admin?.components?.views?.Edit;
        CustomVersionsView = typeof Edit === 'function' ? Edit : typeof Edit === 'object' && typeof Edit.Versions === 'function' ? Edit.Versions : typeof Edit?.Versions === 'object' && 'Component' in Edit.Versions && typeof Edit.Versions.Component === 'function' ? Edit.Versions.Component : undefined;
    }
    if (global) {
        ({ slug } = global);
        docURL = `${serverURL}${api}/globals/${slug}`;
        entityLabel = (0, _getTranslation.getTranslation)(global.label, i18n);
        editURL = `${admin}/globals/${global.slug}`;
        // See note above about cascading component definitions
        const Edit = global?.admin?.components?.views?.Edit;
        CustomVersionsView = typeof Edit === 'function' ? Edit : typeof Edit === 'object' && typeof Edit.Versions === 'function' ? Edit.Versions : typeof Edit?.Versions === 'object' && 'Component' in Edit.Versions && typeof Edit.Versions.Component === 'function' ? Edit.Versions.Component : undefined;
    }
    const [{ data, isLoading }] = (0, _usePayloadAPI.default)(docURL, {
        initialParams: {
            draft: 'true'
        }
    });
    const [{ data: versionsData, isLoading: isLoadingVersions }, { setParams }] = (0, _usePayloadAPI.default)(fetchURL);
    (0, _react.useEffect)(()=>{
        const params = {
            depth: 1,
            limit,
            page: undefined,
            sort: undefined,
            where: {}
        };
        if (page) params.page = page;
        if (sort) params.sort = sort;
        let fetchURLToSet;
        if (collection) {
            fetchURLToSet = `${serverURL}${api}/${collection.slug}/versions`;
            params.where = {
                parent: {
                    equals: id
                }
            };
        }
        if (global) {
            fetchURLToSet = `${serverURL}${api}/globals/${global.slug}/versions`;
        }
        // Performance enhancement
        // Setting the Fetch URL this way
        // prevents a double-fetch
        setFetchURL(fetchURLToSet);
        setParams(params);
    }, [
        setParams,
        page,
        sort,
        limit,
        serverURL,
        api,
        id,
        global,
        collection
    ]);
    return /*#__PURE__*/ _react.default.createElement(_EditDepth.EditDepthContext.Provider, {
        value: 1
    }, /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomVersionsView,
        DefaultComponent: _Default.DefaultVersionsView,
        componentProps: {
            id,
            canAccessAdmin: permissions?.canAccessAdmin,
            collection,
            data,
            editURL,
            entityLabel,
            fetchURL,
            global,
            isLoading,
            isLoadingVersions,
            user,
            versionsData
        }
    }));
};
const _default = VersionsView;

//# sourceMappingURL=data:application/json;base64,