"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _StepNav = require("../../elements/StepNav");
const _buildStateFromSchema = /*#__PURE__*/ _interop_require_default(require("../../forms/Form/buildStateFromSchema"));
const _fieldtypes = require("../../forms/field-types");
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Preferences = require("../../utilities/Preferences");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _Default = /*#__PURE__*/ _interop_require_default(require("./Default"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const AccountView = ()=>{
    const { state: locationState } = (0, _reactrouterdom.useLocation)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { setStepNav } = (0, _StepNav.useStepNav)();
    const { user } = (0, _Auth.useAuth)();
    const userRef = (0, _react.useRef)(user);
    const [internalState, setInternalState] = (0, _react.useState)();
    const { id, docPermissions, getDocPermissions, getDocPreferences, preferencesKey, slug } = (0, _DocumentInfo.useDocumentInfo)();
    const { getPreference } = (0, _Preferences.usePreferences)();
    const config = (0, _Config.useConfig)();
    const { admin: { components: { views: { Account: CustomAccountComponent } = {} } = {} }, collections, routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { t } = (0, _reacti18next.useTranslation)('authentication');
    const collection = collections.find((coll)=>coll.slug === slug);
    const { fields } = collection || {};
    const [{ data, isLoading: isLoadingData }] = (0, _usePayloadAPI.default)(`${serverURL}${api}/${slug}/${id}`, {
        initialData: null,
        initialParams: {
            depth: 0,
            'fallback-locale': 'null'
        }
    });
    const hasSavePermission = docPermissions?.update?.permission;
    const dataToRender = locationState?.data || data;
    const apiURL = `${serverURL}${api}/${slug}/${data?.id}?locale=${locale}`;
    const action = `${serverURL}${api}/${slug}/${data?.id}?locale=${locale}`;
    const onSave = _react.default.useCallback(async (json)=>{
        await getDocPermissions();
        const preferences = await getDocPreferences();
        const state = await (0, _buildStateFromSchema.default)({
            id,
            config,
            data: json.doc,
            fieldSchema: collection?.fields,
            locale,
            operation: 'update',
            preferences,
            t,
            user
        });
        setInternalState(state);
    }, [
        collection,
        user,
        id,
        t,
        locale,
        getDocPermissions,
        getDocPreferences,
        config
    ]);
    (0, _react.useEffect)(()=>{
        const nav = [
            {
                label: t('account')
            }
        ];
        setStepNav(nav);
    }, [
        setStepNav,
        t
    ]);
    (0, _react.useEffect)(()=>{
        const awaitInternalState = async ()=>{
            const preferences = await getDocPreferences();
            const state = await (0, _buildStateFromSchema.default)({
                id,
                config,
                data: dataToRender,
                fieldSchema: fields,
                locale,
                operation: 'update',
                preferences,
                t,
                user: userRef.current
            });
            if (preferencesKey) {
                await getPreference(preferencesKey);
            }
            setInternalState(state);
        };
        if (dataToRender) awaitInternalState();
    }, [
        dataToRender,
        fields,
        id,
        locale,
        preferencesKey,
        getPreference,
        t,
        getDocPreferences,
        config
    ]);
    const isLoading = !internalState || !docPermissions || isLoadingData;
    const componentProps = {
        id: id.toString(),
        action,
        apiURL,
        collection,
        data,
        fieldTypes: _fieldtypes.fieldTypes,
        hasSavePermission,
        initialState: internalState,
        isLoading,
        onSave,
        permissions: docPermissions,
        updatedAt: data?.updatedAt,
        user
    };
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: typeof CustomAccountComponent === 'function' ? CustomAccountComponent : undefined,
        DefaultComponent: _Default.default,
        componentProps: componentProps
    });
};
const _default = AccountView;

//# sourceMappingURL=data:application/json;base64,