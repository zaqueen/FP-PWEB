"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultGlobalViews: function() {
        return defaultGlobalViews;
    },
    CustomGlobalComponent: function() {
        return CustomGlobalComponent;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _API = require("../../API");
const _LivePreview = require("../../LivePreview");
const _Version = /*#__PURE__*/ _interop_require_default(require("../../Version/Version"));
const _Versions = /*#__PURE__*/ _interop_require_default(require("../../Versions"));
const _index = require("../Default/index");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const defaultGlobalViews = {
    API: _API.API,
    Default: _index.DefaultGlobalEdit,
    LivePreview: _LivePreview.LivePreviewView,
    References: null,
    Relationships: null,
    Version: _Version.default,
    Versions: _Versions.default
};
const CustomGlobalComponent = (args)=>{
    const { global, view } = args;
    const { admin: { components: { views: { Edit } = {} } = {} } = {} } = global;
    // Overriding components may come from multiple places in the config
    // Need to cascade through the hierarchy to find the correct component to render
    // For example, the Edit view:
    // 1. Edit?.Default
    // 2. Edit?.Default?.Component
    // TODO: Remove the `@ts-ignore` when a Typescript wizard arrives
    // For some reason `Component` does not exist on type `Edit[view]` no matter how narrow the type is
    const Component = typeof Edit === 'object' && typeof Edit[view] === 'function' ? Edit[view] : typeof Edit === 'object' && typeof Edit?.[view] === 'object' && // @ts-ignore
    typeof Edit[view].Component === 'function' ? Edit[view].Component : defaultGlobalViews[view];
    if (Component) {
        return /*#__PURE__*/ _react.default.createElement(Component, args);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL0dsb2JhbC9Sb3V0ZXMvQ3VzdG9tQ29tcG9uZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB0eXBlIHsgR2xvYmFsRWRpdFZpZXdQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUEkgfSBmcm9tICcuLi8uLi9BUEknXG5pbXBvcnQgeyBMaXZlUHJldmlld1ZpZXcgfSBmcm9tICcuLi8uLi9MaXZlUHJldmlldydcbmltcG9ydCBWZXJzaW9uVmlldyBmcm9tICcuLi8uLi9WZXJzaW9uL1ZlcnNpb24nXG5pbXBvcnQgVmVyc2lvbnNWaWV3IGZyb20gJy4uLy4uL1ZlcnNpb25zJ1xuaW1wb3J0IHsgRGVmYXVsdEdsb2JhbEVkaXQgfSBmcm9tICcuLi9EZWZhdWx0L2luZGV4J1xuXG5leHBvcnQgdHlwZSBnbG9iYWxWaWV3VHlwZSA9XG4gIHwgJ0FQSSdcbiAgfCAnRGVmYXVsdCdcbiAgfCAnTGl2ZVByZXZpZXcnXG4gIHwgJ1JlZmVyZW5jZXMnXG4gIHwgJ1JlbGF0aW9uc2hpcHMnXG4gIHwgJ1ZlcnNpb24nXG4gIHwgJ1ZlcnNpb25zJ1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEdsb2JhbFZpZXdzOiB7XG4gIFtrZXkgaW4gZ2xvYmFsVmlld1R5cGVdOiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5cbn0gPSB7XG4gIEFQSSxcbiAgRGVmYXVsdDogRGVmYXVsdEdsb2JhbEVkaXQsXG4gIExpdmVQcmV2aWV3OiBMaXZlUHJldmlld1ZpZXcsXG4gIFJlZmVyZW5jZXM6IG51bGwsXG4gIFJlbGF0aW9uc2hpcHM6IG51bGwsXG4gIFZlcnNpb246IFZlcnNpb25WaWV3LFxuICBWZXJzaW9uczogVmVyc2lvbnNWaWV3LFxufVxuXG5leHBvcnQgY29uc3QgQ3VzdG9tR2xvYmFsQ29tcG9uZW50ID0gKFxuICBhcmdzOiBHbG9iYWxFZGl0Vmlld1Byb3BzICYge1xuICAgIHZpZXc6IGdsb2JhbFZpZXdUeXBlXG4gIH0sXG4pID0+IHtcbiAgY29uc3QgeyBnbG9iYWwsIHZpZXcgfSA9IGFyZ3NcblxuICBjb25zdCB7IGFkbWluOiB7IGNvbXBvbmVudHM6IHsgdmlld3M6IHsgRWRpdCB9ID0ge30gfSA9IHt9IH0gPSB7fSB9ID0gZ2xvYmFsXG5cbiAgLy8gT3ZlcnJpZGluZyBjb21wb25lbnRzIG1heSBjb21lIGZyb20gbXVsdGlwbGUgcGxhY2VzIGluIHRoZSBjb25maWdcbiAgLy8gTmVlZCB0byBjYXNjYWRlIHRocm91Z2ggdGhlIGhpZXJhcmNoeSB0byBmaW5kIHRoZSBjb3JyZWN0IGNvbXBvbmVudCB0byByZW5kZXJcbiAgLy8gRm9yIGV4YW1wbGUsIHRoZSBFZGl0IHZpZXc6XG4gIC8vIDEuIEVkaXQ/LkRlZmF1bHRcbiAgLy8gMi4gRWRpdD8uRGVmYXVsdD8uQ29tcG9uZW50XG4gIC8vIFRPRE86IFJlbW92ZSB0aGUgYEB0cy1pZ25vcmVgIHdoZW4gYSBUeXBlc2NyaXB0IHdpemFyZCBhcnJpdmVzXG4gIC8vIEZvciBzb21lIHJlYXNvbiBgQ29tcG9uZW50YCBkb2VzIG5vdCBleGlzdCBvbiB0eXBlIGBFZGl0W3ZpZXddYCBubyBtYXR0ZXIgaG93IG5hcnJvdyB0aGUgdHlwZSBpc1xuICBjb25zdCBDb21wb25lbnQgPVxuICAgIHR5cGVvZiBFZGl0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgRWRpdFt2aWV3XSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBFZGl0W3ZpZXddXG4gICAgICA6IHR5cGVvZiBFZGl0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgRWRpdD8uW3ZpZXddID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBFZGl0W3ZpZXddLkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyAvLyBAdHMtaWdub3JlXG4gICAgICAgIEVkaXRbdmlld10uQ29tcG9uZW50XG4gICAgICA6IGRlZmF1bHRHbG9iYWxWaWV3c1t2aWV3XVxuXG4gIGlmIChDb21wb25lbnQpIHtcbiAgICByZXR1cm4gPENvbXBvbmVudCB7Li4uYXJnc30gLz5cbiAgfVxufVxuIl0sIm5hbWVzIjpbImRlZmF1bHRHbG9iYWxWaWV3cyIsIkN1c3RvbUdsb2JhbENvbXBvbmVudCIsIkFQSSIsIkRlZmF1bHQiLCJEZWZhdWx0R2xvYmFsRWRpdCIsIkxpdmVQcmV2aWV3IiwiTGl2ZVByZXZpZXdWaWV3IiwiUmVmZXJlbmNlcyIsIlJlbGF0aW9uc2hpcHMiLCJWZXJzaW9uIiwiVmVyc2lvblZpZXciLCJWZXJzaW9ucyIsIlZlcnNpb25zVmlldyIsImFyZ3MiLCJnbG9iYWwiLCJ2aWV3IiwiYWRtaW4iLCJjb21wb25lbnRzIiwidmlld3MiLCJFZGl0IiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQW1CYUEsa0JBQWtCO2VBQWxCQTs7SUFZQUMscUJBQXFCO2VBQXJCQTs7OzhEQS9CSztxQkFJRTs2QkFDWTtnRUFDUjtpRUFDQzt1QkFDUzs7Ozs7O0FBVzNCLE1BQU1ELHFCQUVUO0lBQ0ZFLEtBQUFBLFFBQUc7SUFDSEMsU0FBU0Msd0JBQWlCO0lBQzFCQyxhQUFhQyw0QkFBZTtJQUM1QkMsWUFBWTtJQUNaQyxlQUFlO0lBQ2ZDLFNBQVNDLGdCQUFXO0lBQ3BCQyxVQUFVQyxpQkFBWTtBQUN4QjtBQUVPLE1BQU1YLHdCQUF3QixDQUNuQ1k7SUFJQSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdGO0lBRXpCLE1BQU0sRUFBRUcsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUdMO0lBRXRFLG9FQUFvRTtJQUNwRSxnRkFBZ0Y7SUFDaEYsOEJBQThCO0lBQzlCLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsaUVBQWlFO0lBQ2pFLG1HQUFtRztJQUNuRyxNQUFNTSxZQUNKLE9BQU9ELFNBQVMsWUFBWSxPQUFPQSxJQUFJLENBQUNKLEtBQUssS0FBSyxhQUM5Q0ksSUFBSSxDQUFDSixLQUFLLEdBQ1YsT0FBT0ksU0FBUyxZQUNoQixPQUFPQSxNQUFNLENBQUNKLEtBQUssS0FBSyxZQUN4QixhQUFhO0lBQ2IsT0FBT0ksSUFBSSxDQUFDSixLQUFLLENBQUNLLFNBQVMsS0FBSyxhQUVoQ0QsSUFBSSxDQUFDSixLQUFLLENBQUNLLFNBQVMsR0FDcEJwQixrQkFBa0IsQ0FBQ2UsS0FBSztJQUU5QixJQUFJSyxXQUFXO1FBQ2IscUJBQU8sNkJBQUNBLFdBQWNQO0lBQ3hCO0FBQ0YifQ==