"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _DocumentHeader = require("../../elements/DocumentHeader");
const _Loading = require("../../elements/Loading");
const _Form = /*#__PURE__*/ _interop_require_default(require("../../forms/Form"));
const _OperationProvider = require("../../utilities/OperationProvider");
const _SetStepNav = require("../collections/Edit/SetStepNav");
const _Routes = require("./Routes");
const _CustomComponent = require("./Routes/CustomComponent");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'global-edit';
const DefaultGlobalView = (props)=>{
    const { i18n } = (0, _reacti18next.useTranslation)('general');
    const { action, apiURL, data, disableRoutes, fieldTypes, global, initialState, isLoading, onSave, permissions } = props;
    const { label } = global;
    const hasSavePermission = permissions?.update?.permission;
    return /*#__PURE__*/ _react.default.createElement("main", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_OperationProvider.OperationContext.Provider, {
        value: "update"
    }, /*#__PURE__*/ _react.default.createElement(_SetStepNav.SetStepNav, {
        global: global
    }), /*#__PURE__*/ _react.default.createElement(_Form.default, {
        action: action,
        className: `${baseClass}__form`,
        disabled: !hasSavePermission,
        initialState: initialState,
        method: "post",
        onSuccess: onSave
    }, /*#__PURE__*/ _react.default.createElement(_Loading.FormLoadingOverlayToggle, {
        action: "update",
        loadingSuffix: (0, _getTranslation.getTranslation)(label, i18n),
        name: `global-edit--${typeof label === 'string' ? label : label?.en}`
    }), !isLoading && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_DocumentHeader.DocumentHeader, {
        apiURL: apiURL,
        data: data,
        global: global
    }), disableRoutes ? /*#__PURE__*/ _react.default.createElement(_CustomComponent.CustomGlobalComponent, {
        view: "Default",
        ...props
    }) : /*#__PURE__*/ _react.default.createElement(_Routes.GlobalRoutes, {
        ...props,
        fieldTypes: fieldTypes
    })))));
};
const _default = DefaultGlobalView;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL0dsb2JhbC9EZWZhdWx0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgRmllbGRUeXBlcyB9IGZyb20gJy4uLy4uL2Zvcm1zL2ZpZWxkLXR5cGVzJ1xuaW1wb3J0IHR5cGUgeyBHbG9iYWxFZGl0Vmlld1Byb3BzIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmltcG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuaW1wb3J0IHsgRG9jdW1lbnRIZWFkZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50cy9Eb2N1bWVudEhlYWRlcidcbmltcG9ydCB7IEZvcm1Mb2FkaW5nT3ZlcmxheVRvZ2dsZSB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL0xvYWRpbmcnXG5pbXBvcnQgRm9ybSBmcm9tICcuLi8uLi9mb3Jtcy9Gb3JtJ1xuaW1wb3J0IHsgT3BlcmF0aW9uQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9PcGVyYXRpb25Qcm92aWRlcidcbmltcG9ydCB7IFNldFN0ZXBOYXYgfSBmcm9tICcuLi9jb2xsZWN0aW9ucy9FZGl0L1NldFN0ZXBOYXYnXG5pbXBvcnQgeyBHbG9iYWxSb3V0ZXMgfSBmcm9tICcuL1JvdXRlcydcbmltcG9ydCB7IEN1c3RvbUdsb2JhbENvbXBvbmVudCB9IGZyb20gJy4vUm91dGVzL0N1c3RvbUNvbXBvbmVudCdcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAnZ2xvYmFsLWVkaXQnXG5cbmV4cG9ydCB0eXBlIERlZmF1bHRHbG9iYWxWaWV3UHJvcHMgPSBHbG9iYWxFZGl0Vmlld1Byb3BzICYge1xuICBkaXNhYmxlUm91dGVzPzogYm9vbGVhblxuICBmaWVsZFR5cGVzOiBGaWVsZFR5cGVzXG59XG5cbmNvbnN0IERlZmF1bHRHbG9iYWxWaWV3OiBSZWFjdC5GQzxEZWZhdWx0R2xvYmFsVmlld1Byb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCdnZW5lcmFsJylcblxuICBjb25zdCB7XG4gICAgYWN0aW9uLFxuICAgIGFwaVVSTCxcbiAgICBkYXRhLFxuICAgIGRpc2FibGVSb3V0ZXMsXG4gICAgZmllbGRUeXBlcyxcbiAgICBnbG9iYWwsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGlzTG9hZGluZyxcbiAgICBvblNhdmUsXG4gICAgcGVybWlzc2lvbnMsXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHsgbGFiZWwgfSA9IGdsb2JhbFxuXG4gIGNvbnN0IGhhc1NhdmVQZXJtaXNzaW9uID0gcGVybWlzc2lvbnM/LnVwZGF0ZT8ucGVybWlzc2lvblxuXG4gIHJldHVybiAoXG4gICAgPG1haW4gY2xhc3NOYW1lPXtiYXNlQ2xhc3N9PlxuICAgICAgPE9wZXJhdGlvbkNvbnRleHQuUHJvdmlkZXIgdmFsdWU9XCJ1cGRhdGVcIj5cbiAgICAgICAgPFNldFN0ZXBOYXYgZ2xvYmFsPXtnbG9iYWx9IC8+XG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgYWN0aW9uPXthY3Rpb259XG4gICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19mb3JtYH1cbiAgICAgICAgICBkaXNhYmxlZD17IWhhc1NhdmVQZXJtaXNzaW9ufVxuICAgICAgICAgIGluaXRpYWxTdGF0ZT17aW5pdGlhbFN0YXRlfVxuICAgICAgICAgIG1ldGhvZD1cInBvc3RcIlxuICAgICAgICAgIG9uU3VjY2Vzcz17b25TYXZlfVxuICAgICAgICA+XG4gICAgICAgICAgPEZvcm1Mb2FkaW5nT3ZlcmxheVRvZ2dsZVxuICAgICAgICAgICAgYWN0aW9uPVwidXBkYXRlXCJcbiAgICAgICAgICAgIGxvYWRpbmdTdWZmaXg9e2dldFRyYW5zbGF0aW9uKGxhYmVsLCBpMThuKX1cbiAgICAgICAgICAgIG5hbWU9e2BnbG9iYWwtZWRpdC0tJHt0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gbGFiZWwgOiBsYWJlbD8uZW59YH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHshaXNMb2FkaW5nICYmIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgPERvY3VtZW50SGVhZGVyIGFwaVVSTD17YXBpVVJMfSBkYXRhPXtkYXRhfSBnbG9iYWw9e2dsb2JhbH0gLz5cbiAgICAgICAgICAgICAge2Rpc2FibGVSb3V0ZXMgPyAoXG4gICAgICAgICAgICAgICAgPEN1c3RvbUdsb2JhbENvbXBvbmVudCB2aWV3PVwiRGVmYXVsdFwiIHsuLi5wcm9wc30gLz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8R2xvYmFsUm91dGVzIHsuLi5wcm9wc30gZmllbGRUeXBlcz17ZmllbGRUeXBlc30gLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgPC9PcGVyYXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICAgIDwvbWFpbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0R2xvYmFsVmlld1xuIl0sIm5hbWVzIjpbImJhc2VDbGFzcyIsIkRlZmF1bHRHbG9iYWxWaWV3IiwicHJvcHMiLCJpMThuIiwidXNlVHJhbnNsYXRpb24iLCJhY3Rpb24iLCJhcGlVUkwiLCJkYXRhIiwiZGlzYWJsZVJvdXRlcyIsImZpZWxkVHlwZXMiLCJnbG9iYWwiLCJpbml0aWFsU3RhdGUiLCJpc0xvYWRpbmciLCJvblNhdmUiLCJwZXJtaXNzaW9ucyIsImxhYmVsIiwiaGFzU2F2ZVBlcm1pc3Npb24iLCJ1cGRhdGUiLCJwZXJtaXNzaW9uIiwibWFpbiIsImNsYXNzTmFtZSIsIk9wZXJhdGlvbkNvbnRleHQiLCJQcm92aWRlciIsInZhbHVlIiwiU2V0U3RlcE5hdiIsIkZvcm0iLCJkaXNhYmxlZCIsIm1ldGhvZCIsIm9uU3VjY2VzcyIsIkZvcm1Mb2FkaW5nT3ZlcmxheVRvZ2dsZSIsImxvYWRpbmdTdWZmaXgiLCJnZXRUcmFuc2xhdGlvbiIsIm5hbWUiLCJlbiIsIlJlYWN0IiwiRnJhZ21lbnQiLCJEb2N1bWVudEhlYWRlciIsIkN1c3RvbUdsb2JhbENvbXBvbmVudCIsInZpZXciLCJHbG9iYWxSb3V0ZXMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBNEVBOzs7ZUFBQTs7OzhEQTVFa0I7OEJBQ2E7Z0NBS0E7Z0NBQ0E7eUJBQ1U7NkRBQ3hCO21DQUNnQjs0QkFDTjt3QkFDRTtpQ0FDUztRQUMvQjs7Ozs7O0FBRVAsTUFBTUEsWUFBWTtBQU9sQixNQUFNQyxvQkFBc0QsQ0FBQ0M7SUFDM0QsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWMsRUFBQztJQUVoQyxNQUFNLEVBQ0pDLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxJQUFJLEVBQ0pDLGFBQWEsRUFDYkMsVUFBVSxFQUNWQyxNQUFNLEVBQ05DLFlBQVksRUFDWkMsU0FBUyxFQUNUQyxNQUFNLEVBQ05DLFdBQVcsRUFDWixHQUFHWjtJQUVKLE1BQU0sRUFBRWEsS0FBSyxFQUFFLEdBQUdMO0lBRWxCLE1BQU1NLG9CQUFvQkYsYUFBYUcsUUFBUUM7SUFFL0MscUJBQ0UsNkJBQUNDO1FBQUtDLFdBQVdwQjtxQkFDZiw2QkFBQ3FCLG1DQUFnQixDQUFDQyxRQUFRO1FBQUNDLE9BQU07cUJBQy9CLDZCQUFDQyxzQkFBVTtRQUFDZCxRQUFRQTtzQkFDcEIsNkJBQUNlLGFBQUk7UUFDSHBCLFFBQVFBO1FBQ1JlLFdBQVcsQ0FBQyxFQUFFcEIsVUFBVSxNQUFNLENBQUM7UUFDL0IwQixVQUFVLENBQUNWO1FBQ1hMLGNBQWNBO1FBQ2RnQixRQUFPO1FBQ1BDLFdBQVdmO3FCQUVYLDZCQUFDZ0IsaUNBQXdCO1FBQ3ZCeEIsUUFBTztRQUNQeUIsZUFBZUMsSUFBQUEsOEJBQWMsRUFBQ2hCLE9BQU9aO1FBQ3JDNkIsTUFBTSxDQUFDLGFBQWEsRUFBRSxPQUFPakIsVUFBVSxXQUFXQSxRQUFRQSxPQUFPa0IsR0FBRyxDQUFDO1FBRXRFLENBQUNyQiwyQkFDQSw2QkFBQ3NCLGNBQUssQ0FBQ0MsUUFBUSxzQkFDYiw2QkFBQ0MsOEJBQWM7UUFBQzlCLFFBQVFBO1FBQVFDLE1BQU1BO1FBQU1HLFFBQVFBO1FBQ25ERiw4QkFDQyw2QkFBQzZCLHNDQUFxQjtRQUFDQyxNQUFLO1FBQVcsR0FBR3BDLEtBQUs7dUJBRS9DLDZCQUFDcUMsb0JBQVk7UUFBRSxHQUFHckMsS0FBSztRQUFFTyxZQUFZQTs7QUFRckQ7TUFFQSxXQUFlUiJ9