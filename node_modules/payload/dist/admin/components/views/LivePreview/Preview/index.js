"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreview", {
    enumerable: true,
    get: function() {
        return LivePreview;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _context = require("../../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../../forms/Form/reduceFieldsToValues"));
const _DocumentEvents = require("../../../utilities/DocumentEvents");
const _context1 = require("../Context/context");
const _Device = require("../Device");
const _IFrame = require("../IFrame");
const _Toolbar = require("../Toolbar");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview-window';
const LivePreview = (props)=>{
    const { appIsReady, iframeHasLoaded, iframeRef, popupRef, previewWindowType, setIframeHasLoaded, url } = (0, _context1.useLivePreviewContext)();
    const { mostRecentUpdate } = (0, _DocumentEvents.useDocumentEvents)();
    const { breakpoint, fieldSchemaJSON } = (0, _context1.useLivePreviewContext)();
    const prevWindowType = _react.default.useRef();
    const [fields] = (0, _context.useAllFormFields)();
    // The preview could either be an iframe embedded on the page
    // Or it could be a separate popup window
    // We need to transmit data to both accordingly
    (0, _react.useEffect)(()=>{
        // For performance, do no reduce fields to values until after the iframe or popup has loaded
        if (fields && window && 'postMessage' in window && appIsReady) {
            const values = (0, _reduceFieldsToValues.default)(fields, true);
            // To reduce on large `postMessage` payloads, only send `fieldSchemaToJSON` one time
            // To do this, the underlying JS function maintains a cache of this value
            // So we need to send it through each time the window type changes
            // But only once per window type change, not on every render, because this is a potentially large obj
            const shouldSendSchema = !prevWindowType.current || prevWindowType.current !== previewWindowType;
            prevWindowType.current = previewWindowType;
            const message = JSON.stringify({
                data: values,
                externallyUpdatedRelationship: mostRecentUpdate,
                fieldSchemaJSON: shouldSendSchema ? fieldSchemaJSON : undefined,
                type: 'payload-live-preview'
            });
            // Post message to external popup window
            if (previewWindowType === 'popup' && popupRef.current) {
                popupRef.current.postMessage(message, url);
            }
            // Post message to embedded iframe
            if (previewWindowType === 'iframe' && iframeRef.current) {
                iframeRef.current.contentWindow?.postMessage(message, url);
            }
        }
    }, [
        fields,
        url,
        iframeHasLoaded,
        previewWindowType,
        popupRef,
        appIsReady,
        iframeRef,
        setIframeHasLoaded,
        fieldSchemaJSON,
        mostRecentUpdate
    ]);
    if (previewWindowType === 'iframe') {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: [
                baseClass,
                breakpoint && breakpoint !== 'responsive' && `${baseClass}--has-breakpoint`
            ].filter(Boolean).join(' ')
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__wrapper`
        }, /*#__PURE__*/ _react.default.createElement(_Toolbar.LivePreviewToolbar, props), /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__main`
        }, /*#__PURE__*/ _react.default.createElement(_Device.DeviceContainer, null, /*#__PURE__*/ _react.default.createElement(_IFrame.IFrame, {
            ref: iframeRef,
            setIframeHasLoaded: setIframeHasLoaded,
            url: url
        })))));
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL0xpdmVQcmV2aWV3L1ByZXZpZXcvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBFZGl0Vmlld1Byb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IHVzZUFsbEZvcm1GaWVsZHMgfSBmcm9tICcuLi8uLi8uLi9mb3Jtcy9Gb3JtL2NvbnRleHQnXG5pbXBvcnQgcmVkdWNlRmllbGRzVG9WYWx1ZXMgZnJvbSAnLi4vLi4vLi4vZm9ybXMvRm9ybS9yZWR1Y2VGaWVsZHNUb1ZhbHVlcydcbmltcG9ydCB7IHVzZURvY3VtZW50RXZlbnRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL0RvY3VtZW50RXZlbnRzJ1xuaW1wb3J0IHsgdXNlTGl2ZVByZXZpZXdDb250ZXh0IH0gZnJvbSAnLi4vQ29udGV4dC9jb250ZXh0J1xuaW1wb3J0IHsgRGV2aWNlQ29udGFpbmVyIH0gZnJvbSAnLi4vRGV2aWNlJ1xuaW1wb3J0IHsgSUZyYW1lIH0gZnJvbSAnLi4vSUZyYW1lJ1xuaW1wb3J0IHsgTGl2ZVByZXZpZXdUb29sYmFyIH0gZnJvbSAnLi4vVG9vbGJhcidcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAnbGl2ZS1wcmV2aWV3LXdpbmRvdydcblxuZXhwb3J0IGNvbnN0IExpdmVQcmV2aWV3OiBSZWFjdC5GQzxFZGl0Vmlld1Byb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgYXBwSXNSZWFkeSxcbiAgICBpZnJhbWVIYXNMb2FkZWQsXG4gICAgaWZyYW1lUmVmLFxuICAgIHBvcHVwUmVmLFxuICAgIHByZXZpZXdXaW5kb3dUeXBlLFxuICAgIHNldElmcmFtZUhhc0xvYWRlZCxcbiAgICB1cmwsXG4gIH0gPSB1c2VMaXZlUHJldmlld0NvbnRleHQoKVxuXG4gIGNvbnN0IHsgbW9zdFJlY2VudFVwZGF0ZSB9ID0gdXNlRG9jdW1lbnRFdmVudHMoKVxuXG4gIGNvbnN0IHsgYnJlYWtwb2ludCwgZmllbGRTY2hlbWFKU09OIH0gPSB1c2VMaXZlUHJldmlld0NvbnRleHQoKVxuXG4gIGNvbnN0IHByZXZXaW5kb3dUeXBlID1cbiAgICBSZWFjdC51c2VSZWY8UmV0dXJuVHlwZTx0eXBlb2YgdXNlTGl2ZVByZXZpZXdDb250ZXh0PlsncHJldmlld1dpbmRvd1R5cGUnXT4oKVxuXG4gIGNvbnN0IFtmaWVsZHNdID0gdXNlQWxsRm9ybUZpZWxkcygpXG5cbiAgLy8gVGhlIHByZXZpZXcgY291bGQgZWl0aGVyIGJlIGFuIGlmcmFtZSBlbWJlZGRlZCBvbiB0aGUgcGFnZVxuICAvLyBPciBpdCBjb3VsZCBiZSBhIHNlcGFyYXRlIHBvcHVwIHdpbmRvd1xuICAvLyBXZSBuZWVkIHRvIHRyYW5zbWl0IGRhdGEgdG8gYm90aCBhY2NvcmRpbmdseVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEZvciBwZXJmb3JtYW5jZSwgZG8gbm8gcmVkdWNlIGZpZWxkcyB0byB2YWx1ZXMgdW50aWwgYWZ0ZXIgdGhlIGlmcmFtZSBvciBwb3B1cCBoYXMgbG9hZGVkXG4gICAgaWYgKGZpZWxkcyAmJiB3aW5kb3cgJiYgJ3Bvc3RNZXNzYWdlJyBpbiB3aW5kb3cgJiYgYXBwSXNSZWFkeSkge1xuICAgICAgY29uc3QgdmFsdWVzID0gcmVkdWNlRmllbGRzVG9WYWx1ZXMoZmllbGRzLCB0cnVlKVxuXG4gICAgICAvLyBUbyByZWR1Y2Ugb24gbGFyZ2UgYHBvc3RNZXNzYWdlYCBwYXlsb2Fkcywgb25seSBzZW5kIGBmaWVsZFNjaGVtYVRvSlNPTmAgb25lIHRpbWVcbiAgICAgIC8vIFRvIGRvIHRoaXMsIHRoZSB1bmRlcmx5aW5nIEpTIGZ1bmN0aW9uIG1haW50YWlucyBhIGNhY2hlIG9mIHRoaXMgdmFsdWVcbiAgICAgIC8vIFNvIHdlIG5lZWQgdG8gc2VuZCBpdCB0aHJvdWdoIGVhY2ggdGltZSB0aGUgd2luZG93IHR5cGUgY2hhbmdlc1xuICAgICAgLy8gQnV0IG9ubHkgb25jZSBwZXIgd2luZG93IHR5cGUgY2hhbmdlLCBub3Qgb24gZXZlcnkgcmVuZGVyLCBiZWNhdXNlIHRoaXMgaXMgYSBwb3RlbnRpYWxseSBsYXJnZSBvYmpcbiAgICAgIGNvbnN0IHNob3VsZFNlbmRTY2hlbWEgPVxuICAgICAgICAhcHJldldpbmRvd1R5cGUuY3VycmVudCB8fCBwcmV2V2luZG93VHlwZS5jdXJyZW50ICE9PSBwcmV2aWV3V2luZG93VHlwZVxuXG4gICAgICBwcmV2V2luZG93VHlwZS5jdXJyZW50ID0gcHJldmlld1dpbmRvd1R5cGVcblxuICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGF0YTogdmFsdWVzLFxuICAgICAgICBleHRlcm5hbGx5VXBkYXRlZFJlbGF0aW9uc2hpcDogbW9zdFJlY2VudFVwZGF0ZSxcbiAgICAgICAgZmllbGRTY2hlbWFKU09OOiBzaG91bGRTZW5kU2NoZW1hID8gZmllbGRTY2hlbWFKU09OIDogdW5kZWZpbmVkLFxuICAgICAgICB0eXBlOiAncGF5bG9hZC1saXZlLXByZXZpZXcnLFxuICAgICAgfSlcblxuICAgICAgLy8gUG9zdCBtZXNzYWdlIHRvIGV4dGVybmFsIHBvcHVwIHdpbmRvd1xuICAgICAgaWYgKHByZXZpZXdXaW5kb3dUeXBlID09PSAncG9wdXAnICYmIHBvcHVwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcG9wdXBSZWYuY3VycmVudC5wb3N0TWVzc2FnZShtZXNzYWdlLCB1cmwpXG4gICAgICB9XG5cbiAgICAgIC8vIFBvc3QgbWVzc2FnZSB0byBlbWJlZGRlZCBpZnJhbWVcbiAgICAgIGlmIChwcmV2aWV3V2luZG93VHlwZSA9PT0gJ2lmcmFtZScgJiYgaWZyYW1lUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgaWZyYW1lUmVmLmN1cnJlbnQuY29udGVudFdpbmRvdz8ucG9zdE1lc3NhZ2UobWVzc2FnZSwgdXJsKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW1xuICAgIGZpZWxkcyxcbiAgICB1cmwsXG4gICAgaWZyYW1lSGFzTG9hZGVkLFxuICAgIHByZXZpZXdXaW5kb3dUeXBlLFxuICAgIHBvcHVwUmVmLFxuICAgIGFwcElzUmVhZHksXG4gICAgaWZyYW1lUmVmLFxuICAgIHNldElmcmFtZUhhc0xvYWRlZCxcbiAgICBmaWVsZFNjaGVtYUpTT04sXG4gICAgbW9zdFJlY2VudFVwZGF0ZSxcbiAgXSlcblxuICBpZiAocHJldmlld1dpbmRvd1R5cGUgPT09ICdpZnJhbWUnKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgICAgYmFzZUNsYXNzLFxuICAgICAgICAgIGJyZWFrcG9pbnQgJiYgYnJlYWtwb2ludCAhPT0gJ3Jlc3BvbnNpdmUnICYmIGAke2Jhc2VDbGFzc30tLWhhcy1icmVha3BvaW50YCxcbiAgICAgICAgXVxuICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAuam9pbignICcpfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fd3JhcHBlcmB9PlxuICAgICAgICAgIDxMaXZlUHJldmlld1Rvb2xiYXIgey4uLnByb3BzfSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19tYWluYH0+XG4gICAgICAgICAgICA8RGV2aWNlQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8SUZyYW1lIHJlZj17aWZyYW1lUmVmfSBzZXRJZnJhbWVIYXNMb2FkZWQ9e3NldElmcmFtZUhhc0xvYWRlZH0gdXJsPXt1cmx9IC8+XG4gICAgICAgICAgICA8L0RldmljZUNvbnRhaW5lcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJMaXZlUHJldmlldyIsImJhc2VDbGFzcyIsInByb3BzIiwiYXBwSXNSZWFkeSIsImlmcmFtZUhhc0xvYWRlZCIsImlmcmFtZVJlZiIsInBvcHVwUmVmIiwicHJldmlld1dpbmRvd1R5cGUiLCJzZXRJZnJhbWVIYXNMb2FkZWQiLCJ1cmwiLCJ1c2VMaXZlUHJldmlld0NvbnRleHQiLCJtb3N0UmVjZW50VXBkYXRlIiwidXNlRG9jdW1lbnRFdmVudHMiLCJicmVha3BvaW50IiwiZmllbGRTY2hlbWFKU09OIiwicHJldldpbmRvd1R5cGUiLCJSZWFjdCIsInVzZVJlZiIsImZpZWxkcyIsInVzZUFsbEZvcm1GaWVsZHMiLCJ1c2VFZmZlY3QiLCJ3aW5kb3ciLCJ2YWx1ZXMiLCJyZWR1Y2VGaWVsZHNUb1ZhbHVlcyIsInNob3VsZFNlbmRTY2hlbWEiLCJjdXJyZW50IiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiZXh0ZXJuYWxseVVwZGF0ZWRSZWxhdGlvbnNoaXAiLCJ1bmRlZmluZWQiLCJ0eXBlIiwicG9zdE1lc3NhZ2UiLCJjb250ZW50V2luZG93IiwiZGl2IiwiY2xhc3NOYW1lIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJMaXZlUHJldmlld1Rvb2xiYXIiLCJEZXZpY2VDb250YWluZXIiLCJJRnJhbWUiLCJyZWYiXSwibWFwcGluZ3MiOiI7Ozs7K0JBZWFBOzs7ZUFBQUE7OzsrREFmb0I7eUJBSUE7NkVBQ0E7Z0NBQ0M7MEJBQ0k7d0JBQ047d0JBQ1Q7eUJBQ1k7UUFDNUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVQLE1BQU1DLFlBQVk7QUFFWCxNQUFNRCxjQUF1QyxDQUFDRTtJQUNuRCxNQUFNLEVBQ0pDLFVBQVUsRUFDVkMsZUFBZSxFQUNmQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUkMsaUJBQWlCLEVBQ2pCQyxrQkFBa0IsRUFDbEJDLEdBQUcsRUFDSixHQUFHQyxJQUFBQSwrQkFBcUI7SUFFekIsTUFBTSxFQUFFQyxnQkFBZ0IsRUFBRSxHQUFHQyxJQUFBQSxpQ0FBaUI7SUFFOUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsRUFBRSxHQUFHSixJQUFBQSwrQkFBcUI7SUFFN0QsTUFBTUssaUJBQ0pDLGNBQUssQ0FBQ0MsTUFBTTtJQUVkLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxJQUFBQSx5QkFBZ0I7SUFFakMsNkRBQTZEO0lBQzdELHlDQUF5QztJQUN6QywrQ0FBK0M7SUFDL0NDLElBQUFBLGdCQUFTLEVBQUM7UUFDUiw0RkFBNEY7UUFDNUYsSUFBSUYsVUFBVUcsVUFBVSxpQkFBaUJBLFVBQVVsQixZQUFZO1lBQzdELE1BQU1tQixTQUFTQyxJQUFBQSw2QkFBb0IsRUFBQ0wsUUFBUTtZQUU1QyxvRkFBb0Y7WUFDcEYseUVBQXlFO1lBQ3pFLGtFQUFrRTtZQUNsRSxxR0FBcUc7WUFDckcsTUFBTU0sbUJBQ0osQ0FBQ1QsZUFBZVUsT0FBTyxJQUFJVixlQUFlVSxPQUFPLEtBQUtsQjtZQUV4RFEsZUFBZVUsT0FBTyxHQUFHbEI7WUFFekIsTUFBTW1CLFVBQVVDLEtBQUtDLFNBQVMsQ0FBQztnQkFDN0JDLE1BQU1QO2dCQUNOUSwrQkFBK0JuQjtnQkFDL0JHLGlCQUFpQlUsbUJBQW1CVixrQkFBa0JpQjtnQkFDdERDLE1BQU07WUFDUjtZQUVBLHdDQUF3QztZQUN4QyxJQUFJekIsc0JBQXNCLFdBQVdELFNBQVNtQixPQUFPLEVBQUU7Z0JBQ3JEbkIsU0FBU21CLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDUCxTQUFTakI7WUFDeEM7WUFFQSxrQ0FBa0M7WUFDbEMsSUFBSUYsc0JBQXNCLFlBQVlGLFVBQVVvQixPQUFPLEVBQUU7Z0JBQ3ZEcEIsVUFBVW9CLE9BQU8sQ0FBQ1MsYUFBYSxFQUFFRCxZQUFZUCxTQUFTakI7WUFDeEQ7UUFDRjtJQUNGLEdBQUc7UUFDRFM7UUFDQVQ7UUFDQUw7UUFDQUc7UUFDQUQ7UUFDQUg7UUFDQUU7UUFDQUc7UUFDQU07UUFDQUg7S0FDRDtJQUVELElBQUlKLHNCQUFzQixVQUFVO1FBQ2xDLHFCQUNFLDZCQUFDNEI7WUFDQ0MsV0FBVztnQkFDVG5DO2dCQUNBWSxjQUFjQSxlQUFlLGdCQUFnQixDQUFDLEVBQUVaLFVBQVUsZ0JBQWdCLENBQUM7YUFDNUUsQ0FDRW9DLE1BQU0sQ0FBQ0MsU0FDUEMsSUFBSSxDQUFDO3lCQUVSLDZCQUFDSjtZQUFJQyxXQUFXLENBQUMsRUFBRW5DLFVBQVUsU0FBUyxDQUFDO3lCQUNyQyw2QkFBQ3VDLDJCQUFrQixFQUFLdEMsc0JBQ3hCLDZCQUFDaUM7WUFBSUMsV0FBVyxDQUFDLEVBQUVuQyxVQUFVLE1BQU0sQ0FBQzt5QkFDbEMsNkJBQUN3Qyx1QkFBZSxzQkFDZCw2QkFBQ0MsY0FBTTtZQUFDQyxLQUFLdEM7WUFBV0csb0JBQW9CQTtZQUFvQkMsS0FBS0E7O0lBTWpGO0FBQ0YifQ==