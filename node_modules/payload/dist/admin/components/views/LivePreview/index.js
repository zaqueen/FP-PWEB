"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreviewView", {
    enumerable: true,
    get: function() {
        return LivePreviewView;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _DocumentControls = require("../../elements/DocumentControls");
const _DocumentFields = require("../../elements/DocumentFields");
const _LeaveWithoutSaving = require("../../modals/LeaveWithoutSaving");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../utilities/Meta"));
const _SetStepNav = require("../collections/Edit/SetStepNav");
const _Context = require("./Context");
const _context = require("./Context/context");
const _Preview = require("./Preview");
require("./index.scss");
const _usePopupWindow = require("./usePopupWindow");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview';
const PreviewView = (props)=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { previewWindowType } = (0, _context.useLivePreviewContext)();
    const { apiURL, data, fieldTypes, permissions } = props;
    let collection;
    let global;
    let disableActions;
    let disableLeaveWithoutSaving;
    let hasSavePermission;
    let isEditing;
    let id;
    let fields = [];
    let label;
    let description;
    if ('collection' in props) {
        collection = props?.collection;
        disableActions = props?.disableActions;
        disableLeaveWithoutSaving = props?.disableLeaveWithoutSaving;
        hasSavePermission = props?.hasSavePermission;
        isEditing = props?.isEditing;
        id = props?.id;
        fields = props?.collection?.fields;
    }
    if ('global' in props) {
        global = props?.global;
        fields = props?.global?.fields;
        label = props?.global?.label;
        description = props?.global?.admin?.description;
        hasSavePermission = permissions?.update?.permission;
    }
    return /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, collection && /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: t('editing'),
        keywords: `${(0, _getTranslation.getTranslation)(collection.labels.singular, i18n)}, Payload, CMS`,
        title: `${isEditing ? t('editing') : t('creating')} - ${(0, _getTranslation.getTranslation)(collection.labels.singular, i18n)}`
    }), global && /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: (0, _getTranslation.getTranslation)(label, i18n),
        keywords: `${(0, _getTranslation.getTranslation)(label, i18n)}, Payload, CMS`,
        title: (0, _getTranslation.getTranslation)(label, i18n)
    }), (collection && !(collection.versions?.drafts && collection.versions?.drafts?.autosave) || global && !(global.versions?.drafts && global.versions?.drafts?.autosave)) && !disableLeaveWithoutSaving && /*#__PURE__*/ _react.default.createElement(_LeaveWithoutSaving.LeaveWithoutSaving, null), /*#__PURE__*/ _react.default.createElement(_SetStepNav.SetStepNav, {
        collection: collection,
        global: global,
        id: id,
        isEditing: isEditing,
        view: t('livePreview')
    }), /*#__PURE__*/ _react.default.createElement(_DocumentControls.DocumentControls, {
        apiURL: apiURL,
        collection: collection,
        data: data,
        disableActions: disableActions,
        global: global,
        hasSavePermission: hasSavePermission,
        id: id,
        isEditing: isEditing,
        permissions: permissions
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            previewWindowType === 'popup' && `${baseClass}--detached`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__main`,
            previewWindowType === 'popup' && `${baseClass}__main--popup-open`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_DocumentFields.DocumentFields, {
        description: description,
        fieldTypes: fieldTypes,
        fields: fields,
        forceSidebarWrap: true,
        hasSavePermission: hasSavePermission,
        permissions: permissions
    })), /*#__PURE__*/ _react.default.createElement(_Preview.LivePreview, props)));
};
const LivePreviewView = (props)=>{
    const config = (0, _Config.useConfig)();
    const documentInfo = (0, _DocumentInfo.useDocumentInfo)();
    const locale = (0, _Locale.useLocale)();
    let livePreviewConfig = config?.admin?.livePreview;
    if ('collection' in props) {
        livePreviewConfig = {
            ...livePreviewConfig || {},
            ...props?.collection.admin.livePreview || {}
        };
    }
    if ('global' in props) {
        livePreviewConfig = {
            ...livePreviewConfig || {},
            ...props?.global.admin.livePreview || {}
        };
    }
    const url = typeof livePreviewConfig?.url === 'function' ? livePreviewConfig?.url({
        data: props?.data,
        documentInfo,
        locale
    }) : livePreviewConfig?.url;
    const breakpoints = [
        ...livePreviewConfig?.breakpoints || [],
        {
            name: 'responsive',
            height: '100%',
            label: 'Responsive',
            width: '100%'
        }
    ];
    const { isPopupOpen, openPopupWindow, popupRef } = (0, _usePopupWindow.usePopupWindow)({
        eventType: 'payload-live-preview',
        url
    });
    return /*#__PURE__*/ _react.default.createElement(_Context.LivePreviewProvider, {
        ...props,
        breakpoints: breakpoints,
        isPopupOpen: isPopupOpen,
        openPopupWindow: openPopupWindow,
        popupRef: popupRef,
        url: url
    }, /*#__PURE__*/ _react.default.createElement(PreviewView, props));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL0xpdmVQcmV2aWV3L2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBMaXZlUHJldmlld0NvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL2V4cG9ydHMvY29uZmlnJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZCB9IGZyb20gJy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFNhbml0aXplZEdsb2JhbENvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZFR5cGVzIH0gZnJvbSAnLi4vLi4vZm9ybXMvZmllbGQtdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEVkaXRWaWV3UHJvcHMgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0VHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXRpZXMvZ2V0VHJhbnNsYXRpb24nXG5pbXBvcnQgeyBEb2N1bWVudENvbnRyb2xzIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvRG9jdW1lbnRDb250cm9scydcbmltcG9ydCB7IERvY3VtZW50RmllbGRzIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvRG9jdW1lbnRGaWVsZHMnXG5pbXBvcnQgeyBMZWF2ZVdpdGhvdXRTYXZpbmcgfSBmcm9tICcuLi8uLi9tb2RhbHMvTGVhdmVXaXRob3V0U2F2aW5nJ1xuaW1wb3J0IHsgdXNlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0NvbmZpZydcbmltcG9ydCB7IHVzZURvY3VtZW50SW5mbyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9Eb2N1bWVudEluZm8nXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvTG9jYWxlJ1xuaW1wb3J0IE1ldGEgZnJvbSAnLi4vLi4vdXRpbGl0aWVzL01ldGEnXG5pbXBvcnQgeyBTZXRTdGVwTmF2IH0gZnJvbSAnLi4vY29sbGVjdGlvbnMvRWRpdC9TZXRTdGVwTmF2J1xuaW1wb3J0IHsgTGl2ZVByZXZpZXdQcm92aWRlciB9IGZyb20gJy4vQ29udGV4dCdcbmltcG9ydCB7IHVzZUxpdmVQcmV2aWV3Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dC9jb250ZXh0J1xuaW1wb3J0IHsgTGl2ZVByZXZpZXcgfSBmcm9tICcuL1ByZXZpZXcnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcbmltcG9ydCB7IHVzZVBvcHVwV2luZG93IH0gZnJvbSAnLi91c2VQb3B1cFdpbmRvdydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2xpdmUtcHJldmlldydcblxuY29uc3QgUHJldmlld1ZpZXc6IFJlYWN0LkZDPFxuICBFZGl0Vmlld1Byb3BzICYge1xuICAgIGZpZWxkVHlwZXM6IEZpZWxkVHlwZXNcbiAgfVxuPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGkxOG4sIHQgfSA9IHVzZVRyYW5zbGF0aW9uKCdnZW5lcmFsJylcbiAgY29uc3QgeyBwcmV2aWV3V2luZG93VHlwZSB9ID0gdXNlTGl2ZVByZXZpZXdDb250ZXh0KClcblxuICBjb25zdCB7IGFwaVVSTCwgZGF0YSwgZmllbGRUeXBlcywgcGVybWlzc2lvbnMgfSA9IHByb3BzXG5cbiAgbGV0IGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgbGV0IGdsb2JhbDogU2FuaXRpemVkR2xvYmFsQ29uZmlnXG4gIGxldCBkaXNhYmxlQWN0aW9uczogYm9vbGVhblxuICBsZXQgZGlzYWJsZUxlYXZlV2l0aG91dFNhdmluZzogYm9vbGVhblxuICBsZXQgaGFzU2F2ZVBlcm1pc3Npb246IGJvb2xlYW5cbiAgbGV0IGlzRWRpdGluZzogYm9vbGVhblxuICBsZXQgaWQ6IHN0cmluZ1xuICBsZXQgZmllbGRzOiBGaWVsZFtdID0gW11cbiAgbGV0IGxhYmVsOiBTYW5pdGl6ZWRHbG9iYWxDb25maWdbJ2xhYmVsJ11cbiAgbGV0IGRlc2NyaXB0aW9uOiBTYW5pdGl6ZWRHbG9iYWxDb25maWdbJ2FkbWluJ11bJ2Rlc2NyaXB0aW9uJ11cblxuICBpZiAoJ2NvbGxlY3Rpb24nIGluIHByb3BzKSB7XG4gICAgY29sbGVjdGlvbiA9IHByb3BzPy5jb2xsZWN0aW9uXG4gICAgZGlzYWJsZUFjdGlvbnMgPSBwcm9wcz8uZGlzYWJsZUFjdGlvbnNcbiAgICBkaXNhYmxlTGVhdmVXaXRob3V0U2F2aW5nID0gcHJvcHM/LmRpc2FibGVMZWF2ZVdpdGhvdXRTYXZpbmdcbiAgICBoYXNTYXZlUGVybWlzc2lvbiA9IHByb3BzPy5oYXNTYXZlUGVybWlzc2lvblxuICAgIGlzRWRpdGluZyA9IHByb3BzPy5pc0VkaXRpbmdcbiAgICBpZCA9IHByb3BzPy5pZFxuICAgIGZpZWxkcyA9IHByb3BzPy5jb2xsZWN0aW9uPy5maWVsZHNcbiAgfVxuXG4gIGlmICgnZ2xvYmFsJyBpbiBwcm9wcykge1xuICAgIGdsb2JhbCA9IHByb3BzPy5nbG9iYWxcbiAgICBmaWVsZHMgPSBwcm9wcz8uZ2xvYmFsPy5maWVsZHNcbiAgICBsYWJlbCA9IHByb3BzPy5nbG9iYWw/LmxhYmVsXG4gICAgZGVzY3JpcHRpb24gPSBwcm9wcz8uZ2xvYmFsPy5hZG1pbj8uZGVzY3JpcHRpb25cbiAgICBoYXNTYXZlUGVybWlzc2lvbiA9IHBlcm1pc3Npb25zPy51cGRhdGU/LnBlcm1pc3Npb25cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAge2NvbGxlY3Rpb24gJiYgKFxuICAgICAgICA8TWV0YVxuICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KCdlZGl0aW5nJyl9XG4gICAgICAgICAga2V5d29yZHM9e2Ake2dldFRyYW5zbGF0aW9uKGNvbGxlY3Rpb24ubGFiZWxzLnNpbmd1bGFyLCBpMThuKX0sIFBheWxvYWQsIENNU2B9XG4gICAgICAgICAgdGl0bGU9e2Ake2lzRWRpdGluZyA/IHQoJ2VkaXRpbmcnKSA6IHQoJ2NyZWF0aW5nJyl9IC0gJHtnZXRUcmFuc2xhdGlvbihcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ubGFiZWxzLnNpbmd1bGFyLFxuICAgICAgICAgICAgaTE4bixcbiAgICAgICAgICApfWB9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge2dsb2JhbCAmJiAoXG4gICAgICAgIDxNZXRhXG4gICAgICAgICAgZGVzY3JpcHRpb249e2dldFRyYW5zbGF0aW9uKGxhYmVsLCBpMThuKX1cbiAgICAgICAgICBrZXl3b3Jkcz17YCR7Z2V0VHJhbnNsYXRpb24obGFiZWwsIGkxOG4pfSwgUGF5bG9hZCwgQ01TYH1cbiAgICAgICAgICB0aXRsZT17Z2V0VHJhbnNsYXRpb24obGFiZWwsIGkxOG4pfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHsoKGNvbGxlY3Rpb24gJiYgIShjb2xsZWN0aW9uLnZlcnNpb25zPy5kcmFmdHMgJiYgY29sbGVjdGlvbi52ZXJzaW9ucz8uZHJhZnRzPy5hdXRvc2F2ZSkpIHx8XG4gICAgICAgIChnbG9iYWwgJiYgIShnbG9iYWwudmVyc2lvbnM/LmRyYWZ0cyAmJiBnbG9iYWwudmVyc2lvbnM/LmRyYWZ0cz8uYXV0b3NhdmUpKSkgJiZcbiAgICAgICAgIWRpc2FibGVMZWF2ZVdpdGhvdXRTYXZpbmcgJiYgPExlYXZlV2l0aG91dFNhdmluZyAvPn1cbiAgICAgIDxTZXRTdGVwTmF2XG4gICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgIGdsb2JhbD17Z2xvYmFsfVxuICAgICAgICBpZD17aWR9XG4gICAgICAgIGlzRWRpdGluZz17aXNFZGl0aW5nfVxuICAgICAgICB2aWV3PXt0KCdsaXZlUHJldmlldycpfVxuICAgICAgLz5cbiAgICAgIDxEb2N1bWVudENvbnRyb2xzXG4gICAgICAgIGFwaVVSTD17YXBpVVJMfVxuICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICBkYXRhPXtkYXRhfVxuICAgICAgICBkaXNhYmxlQWN0aW9ucz17ZGlzYWJsZUFjdGlvbnN9XG4gICAgICAgIGdsb2JhbD17Z2xvYmFsfVxuICAgICAgICBoYXNTYXZlUGVybWlzc2lvbj17aGFzU2F2ZVBlcm1pc3Npb259XG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgaXNFZGl0aW5nPXtpc0VkaXRpbmd9XG4gICAgICAgIHBlcm1pc3Npb25zPXtwZXJtaXNzaW9uc31cbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17W2Jhc2VDbGFzcywgcHJldmlld1dpbmRvd1R5cGUgPT09ICdwb3B1cCcgJiYgYCR7YmFzZUNsYXNzfS0tZGV0YWNoZWRgXVxuICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAuam9pbignICcpfVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgICAgICBgJHtiYXNlQ2xhc3N9X19tYWluYCxcbiAgICAgICAgICAgIHByZXZpZXdXaW5kb3dUeXBlID09PSAncG9wdXAnICYmIGAke2Jhc2VDbGFzc31fX21haW4tLXBvcHVwLW9wZW5gLFxuICAgICAgICAgIF1cbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgIC5qb2luKCcgJyl9XG4gICAgICAgID5cbiAgICAgICAgICA8RG9jdW1lbnRGaWVsZHNcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgIGZpZWxkVHlwZXM9e2ZpZWxkVHlwZXN9XG4gICAgICAgICAgICBmaWVsZHM9e2ZpZWxkc31cbiAgICAgICAgICAgIGZvcmNlU2lkZWJhcldyYXBcbiAgICAgICAgICAgIGhhc1NhdmVQZXJtaXNzaW9uPXtoYXNTYXZlUGVybWlzc2lvbn1cbiAgICAgICAgICAgIHBlcm1pc3Npb25zPXtwZXJtaXNzaW9uc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPExpdmVQcmV2aWV3IHsuLi5wcm9wc30gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IExpdmVQcmV2aWV3VmlldzogUmVhY3QuRkM8XG4gIEVkaXRWaWV3UHJvcHMgJiB7XG4gICAgZmllbGRUeXBlczogRmllbGRUeXBlc1xuICB9XG4+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IHVzZUNvbmZpZygpXG4gIGNvbnN0IGRvY3VtZW50SW5mbyA9IHVzZURvY3VtZW50SW5mbygpXG4gIGNvbnN0IGxvY2FsZSA9IHVzZUxvY2FsZSgpXG5cbiAgbGV0IGxpdmVQcmV2aWV3Q29uZmlnOiBMaXZlUHJldmlld0NvbmZpZyA9IGNvbmZpZz8uYWRtaW4/LmxpdmVQcmV2aWV3XG5cbiAgaWYgKCdjb2xsZWN0aW9uJyBpbiBwcm9wcykge1xuICAgIGxpdmVQcmV2aWV3Q29uZmlnID0ge1xuICAgICAgLi4uKGxpdmVQcmV2aWV3Q29uZmlnIHx8IHt9KSxcbiAgICAgIC4uLihwcm9wcz8uY29sbGVjdGlvbi5hZG1pbi5saXZlUHJldmlldyB8fCB7fSksXG4gICAgfVxuICB9XG5cbiAgaWYgKCdnbG9iYWwnIGluIHByb3BzKSB7XG4gICAgbGl2ZVByZXZpZXdDb25maWcgPSB7XG4gICAgICAuLi4obGl2ZVByZXZpZXdDb25maWcgfHwge30pLFxuICAgICAgLi4uKHByb3BzPy5nbG9iYWwuYWRtaW4ubGl2ZVByZXZpZXcgfHwge30pLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHVybCA9XG4gICAgdHlwZW9mIGxpdmVQcmV2aWV3Q29uZmlnPy51cmwgPT09ICdmdW5jdGlvbidcbiAgICAgID8gbGl2ZVByZXZpZXdDb25maWc/LnVybCh7XG4gICAgICAgICAgZGF0YTogcHJvcHM/LmRhdGEsXG4gICAgICAgICAgZG9jdW1lbnRJbmZvLFxuICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgfSlcbiAgICAgIDogbGl2ZVByZXZpZXdDb25maWc/LnVybFxuXG4gIGNvbnN0IGJyZWFrcG9pbnRzOiBMaXZlUHJldmlld0NvbmZpZ1snYnJlYWtwb2ludHMnXSA9IFtcbiAgICAuLi4obGl2ZVByZXZpZXdDb25maWc/LmJyZWFrcG9pbnRzIHx8IFtdKSxcbiAgICB7XG4gICAgICBuYW1lOiAncmVzcG9uc2l2ZScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGxhYmVsOiAnUmVzcG9uc2l2ZScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gIF1cblxuICBjb25zdCB7IGlzUG9wdXBPcGVuLCBvcGVuUG9wdXBXaW5kb3csIHBvcHVwUmVmIH0gPSB1c2VQb3B1cFdpbmRvdyh7XG4gICAgZXZlbnRUeXBlOiAncGF5bG9hZC1saXZlLXByZXZpZXcnLFxuICAgIHVybCxcbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxMaXZlUHJldmlld1Byb3ZpZGVyXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBicmVha3BvaW50cz17YnJlYWtwb2ludHN9XG4gICAgICBpc1BvcHVwT3Blbj17aXNQb3B1cE9wZW59XG4gICAgICBvcGVuUG9wdXBXaW5kb3c9e29wZW5Qb3B1cFdpbmRvd31cbiAgICAgIHBvcHVwUmVmPXtwb3B1cFJlZn1cbiAgICAgIHVybD17dXJsfVxuICAgID5cbiAgICAgIDxQcmV2aWV3VmlldyB7Li4ucHJvcHN9IC8+XG4gICAgPC9MaXZlUHJldmlld1Byb3ZpZGVyPlxuICApXG59XG4iXSwibmFtZXMiOlsiTGl2ZVByZXZpZXdWaWV3IiwiYmFzZUNsYXNzIiwiUHJldmlld1ZpZXciLCJwcm9wcyIsImkxOG4iLCJ0IiwidXNlVHJhbnNsYXRpb24iLCJwcmV2aWV3V2luZG93VHlwZSIsInVzZUxpdmVQcmV2aWV3Q29udGV4dCIsImFwaVVSTCIsImRhdGEiLCJmaWVsZFR5cGVzIiwicGVybWlzc2lvbnMiLCJjb2xsZWN0aW9uIiwiZ2xvYmFsIiwiZGlzYWJsZUFjdGlvbnMiLCJkaXNhYmxlTGVhdmVXaXRob3V0U2F2aW5nIiwiaGFzU2F2ZVBlcm1pc3Npb24iLCJpc0VkaXRpbmciLCJpZCIsImZpZWxkcyIsImxhYmVsIiwiZGVzY3JpcHRpb24iLCJhZG1pbiIsInVwZGF0ZSIsInBlcm1pc3Npb24iLCJGcmFnbWVudCIsIk1ldGEiLCJrZXl3b3JkcyIsImdldFRyYW5zbGF0aW9uIiwibGFiZWxzIiwic2luZ3VsYXIiLCJ0aXRsZSIsInZlcnNpb25zIiwiZHJhZnRzIiwiYXV0b3NhdmUiLCJMZWF2ZVdpdGhvdXRTYXZpbmciLCJTZXRTdGVwTmF2IiwidmlldyIsIkRvY3VtZW50Q29udHJvbHMiLCJkaXYiLCJjbGFzc05hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkRvY3VtZW50RmllbGRzIiwiZm9yY2VTaWRlYmFyV3JhcCIsIkxpdmVQcmV2aWV3IiwiY29uZmlnIiwidXNlQ29uZmlnIiwiZG9jdW1lbnRJbmZvIiwidXNlRG9jdW1lbnRJbmZvIiwibG9jYWxlIiwidXNlTG9jYWxlIiwibGl2ZVByZXZpZXdDb25maWciLCJsaXZlUHJldmlldyIsInVybCIsImJyZWFrcG9pbnRzIiwibmFtZSIsImhlaWdodCIsIndpZHRoIiwiaXNQb3B1cE9wZW4iLCJvcGVuUG9wdXBXaW5kb3ciLCJwb3B1cFJlZiIsInVzZVBvcHVwV2luZG93IiwiZXZlbnRUeXBlIiwiTGl2ZVByZXZpZXdQcm92aWRlciJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFzSWFBOzs7ZUFBQUE7OzsrREF0SW1COzhCQUNEO2dDQVNBO2tDQUNFO2dDQUNGO29DQUNJO3dCQUNUOzhCQUNNO3dCQUNOOzZEQUNUOzRCQUNVO3lCQUNTO3lCQUNFO3lCQUNWO1FBQ3JCO2dDQUN3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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