"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactdiffviewercontinued = /*#__PURE__*/ _interop_require_default(require("react-diff-viewer-continued"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../../utilities/getTranslation");
const _Config = require("../../../../../utilities/Config");
const _Locale = require("../../../../../utilities/Locale");
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _styles = require("../styles");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'relationship-diff';
const generateLabelFromValue = (collections, field, locale, value)=>{
    let relation;
    let relatedDoc;
    let valueToReturn = '';
    if (value === null || typeof value === 'undefined') {
        return String(value);
    }
    if (Array.isArray(field.relationTo)) {
        if (typeof value === 'object') {
            relation = value.relationTo;
            relatedDoc = value.value;
        }
    } else {
        relation = field.relationTo;
        relatedDoc = value;
    }
    const relatedCollection = collections.find((c)=>c.slug === relation);
    if (relatedCollection) {
        const useAsTitle = relatedCollection?.admin?.useAsTitle;
        const useAsTitleField = relatedCollection.fields.find((f)=>(0, _types.fieldAffectsData)(f) && !(0, _types.fieldIsPresentationalOnly)(f) && f.name === useAsTitle);
        let titleFieldIsLocalized = false;
        if (useAsTitleField && (0, _types.fieldAffectsData)(useAsTitleField)) titleFieldIsLocalized = useAsTitleField.localized;
        if (typeof relatedDoc?.[useAsTitle] !== 'undefined') {
            valueToReturn = relatedDoc[useAsTitle];
        } else if (typeof relatedDoc?.id !== 'undefined') {
            valueToReturn = relatedDoc.id;
        }
        if (typeof valueToReturn === 'object' && titleFieldIsLocalized) {
            valueToReturn = valueToReturn[locale];
        }
    }
    return valueToReturn;
};
const Relationship = ({ comparison, field, version })=>{
    const { collections } = (0, _Config.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { code: locale } = (0, _Locale.useLocale)();
    let placeholder = '';
    if (version === comparison) placeholder = `[${t('noValue')}]`;
    let versionToRender = version;
    let comparisonToRender = comparison;
    if (field.hasMany) {
        if (Array.isArray(version)) versionToRender = version.map((val)=>generateLabelFromValue(collections, field, locale, val)).join(', ');
        if (Array.isArray(comparison)) comparisonToRender = comparison.map((val)=>generateLabelFromValue(collections, field, locale, val)).join(', ');
    } else {
        versionToRender = generateLabelFromValue(collections, field, locale, version);
        comparisonToRender = generateLabelFromValue(collections, field, locale, comparison);
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Label.default, null, locale && /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__locale-label`
    }, locale), (0, _getTranslation.getTranslation)(field.label, i18n)), /*#__PURE__*/ _react.default.createElement(_reactdiffviewercontinued.default, {
        hideLineNumbers: true,
        newValue: typeof versionToRender !== 'undefined' ? String(versionToRender) : placeholder,
        oldValue: typeof comparisonToRender !== 'undefined' ? String(comparisonToRender) : placeholder,
        showDiffOnly: false,
        splitView: true,
        styles: _styles.diffStyles
    }));
};
const _default = Relationship;

//# sourceMappingURL=data:application/json;base64,