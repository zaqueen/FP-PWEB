"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _ = /*#__PURE__*/ _interop_require_default(require("../.."));
const _types = require("../../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../../utilities/getTranslation");
const _getUniqueListBy = /*#__PURE__*/ _interop_require_default(require("../../../../../../../utilities/getUniqueListBy"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'iterable-diff';
const Iterable = ({ comparison, field, fieldComponents, locale, locales, permissions, version })=>{
    const versionRowCount = Array.isArray(version) ? version.length : 0;
    const comparisonRowCount = Array.isArray(comparison) ? comparison.length : 0;
    const maxRows = Math.max(versionRowCount, comparisonRowCount);
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, field.label && /*#__PURE__*/ _react.default.createElement(_Label.default, null, locale && /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__locale-label`
    }, locale), (0, _getTranslation.getTranslation)(field.label, i18n)), maxRows > 0 && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, Array.from(Array(maxRows).keys()).map((row, i)=>{
        const versionRow = version?.[i] || {};
        const comparisonRow = comparison?.[i] || {};
        let subFields = [];
        if (field.type === 'array') subFields = field.fields;
        if (field.type === 'blocks') {
            subFields = [
                {
                    name: 'blockType',
                    label: t('fields:blockType'),
                    type: 'text'
                }
            ];
            if (versionRow?.blockType === comparisonRow?.blockType) {
                const matchedBlock = field.blocks.find((block)=>block.slug === versionRow?.blockType) || {
                    fields: []
                };
                subFields = [
                    ...subFields,
                    ...matchedBlock.fields
                ];
            } else {
                const matchedVersionBlock = field.blocks.find((block)=>block.slug === versionRow?.blockType) || {
                    fields: []
                };
                const matchedComparisonBlock = field.blocks.find((block)=>block.slug === comparisonRow?.blockType) || {
                    fields: []
                };
                subFields = (0, _getUniqueListBy.default)([
                    ...subFields,
                    ...matchedVersionBlock.fields,
                    ...matchedComparisonBlock.fields
                ], 'name');
            }
        }
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__wrap`,
            key: i
        }, /*#__PURE__*/ _react.default.createElement(_.default, {
            comparison: comparisonRow,
            fieldComponents: fieldComponents,
            fieldPermissions: permissions,
            fields: subFields.filter((subField)=>!((0, _types.fieldAffectsData)(subField) && subField.name === 'id')),
            locales: locales,
            version: versionRow
        }));
    })), maxRows === 0 && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__no-rows`
    }, t('noRowsFound', {
        label: field.labels?.plural ? (0, _getTranslation.getTranslation)(field.labels?.plural, i18n) : t('general:rows')
    })));
};
const _default = Iterable;

//# sourceMappingURL=data:application/json;base64,