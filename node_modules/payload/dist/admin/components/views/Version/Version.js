"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _types = require("../../../../fields/config/types");
const _getTranslation = require("../../../../utilities/getTranslation");
const _usePayloadAPI = /*#__PURE__*/ _interop_require_default(require("../../../hooks/usePayloadAPI"));
const _formatDate = require("../../../utilities/formatDate");
const _Gutter = require("../../elements/Gutter");
const _StepNav = require("../../elements/StepNav");
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../utilities/Meta"));
const _NotFound = /*#__PURE__*/ _interop_require_default(require("../NotFound"));
const _Compare = /*#__PURE__*/ _interop_require_default(require("./Compare"));
const _RenderFieldsToDiff = /*#__PURE__*/ _interop_require_default(require("./RenderFieldsToDiff"));
const _fields = /*#__PURE__*/ _interop_require_default(require("./RenderFieldsToDiff/fields"));
const _Restore = /*#__PURE__*/ _interop_require_default(require("./Restore"));
const _SelectLocales = /*#__PURE__*/ _interop_require_default(require("./SelectLocales"));
require("./index.scss");
const _shared = require("./shared");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'view-version';
const VersionView = ({ collection, global })=>{
    const { admin: { dateFormat }, localization, routes: { admin, api }, serverURL } = (0, _Config.useConfig)();
    const { setStepNav } = (0, _StepNav.useStepNav)();
    const { params: { id, versionID } } = (0, _reactrouterdom.useRouteMatch)();
    const [compareValue, setCompareValue] = (0, _react.useState)(_shared.mostRecentVersionOption);
    const [localeOptions] = (0, _react.useState)(()=>{
        if (localization && localization?.locales) {
            return localization.locales.map(({ code, label })=>({
                    label: label,
                    value: code
                }));
        }
        return [];
    });
    const [locales, setLocales] = (0, _react.useState)(localeOptions);
    const { permissions } = (0, _Auth.useAuth)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    const { docPermissions } = (0, _DocumentInfo.useDocumentInfo)();
    let originalDocFetchURL;
    let versionFetchURL;
    let entityLabel;
    let fields;
    let fieldPermissions;
    let compareBaseURL;
    let slug;
    let parentID;
    if (collection) {
        ({ slug } = collection);
        originalDocFetchURL = `${serverURL}${api}/${slug}/${id}`;
        versionFetchURL = `${serverURL}${api}/${slug}/versions/${versionID}`;
        compareBaseURL = `${serverURL}${api}/${slug}/versions`;
        entityLabel = (0, _getTranslation.getTranslation)(collection.labels.singular, i18n);
        parentID = id;
        fields = collection.fields;
        fieldPermissions = permissions.collections[collection.slug].fields;
    }
    if (global) {
        ({ slug } = global);
        originalDocFetchURL = `${serverURL}${api}/globals/${slug}`;
        versionFetchURL = `${serverURL}${api}/globals/${slug}/versions/${versionID}`;
        compareBaseURL = `${serverURL}${api}/globals/${slug}/versions`;
        entityLabel = (0, _getTranslation.getTranslation)(global.label, i18n);
        fields = global.fields;
        fieldPermissions = permissions.globals[global.slug].fields;
    }
    const compareFetchURL = compareValue?.value === 'mostRecent' || compareValue?.value === 'published' ? originalDocFetchURL : `${compareBaseURL}/${compareValue.value}`;
    const [{ data: doc, isError }] = (0, _usePayloadAPI.default)(versionFetchURL, {
        initialParams: {
            depth: 1,
            locale: '*'
        }
    });
    const [{ data: publishedDoc }] = (0, _usePayloadAPI.default)(originalDocFetchURL, {
        initialParams: {
            depth: 1,
            locale: '*'
        }
    });
    const [{ data: mostRecentDoc }] = (0, _usePayloadAPI.default)(originalDocFetchURL, {
        initialParams: {
            depth: 1,
            draft: true,
            locale: '*'
        }
    });
    const [{ data: compareDoc }] = (0, _usePayloadAPI.default)(compareFetchURL, {
        initialParams: {
            depth: 1,
            draft: 'true',
            locale: '*'
        }
    });
    (0, _react.useEffect)(()=>{
        let nav = [];
        if (collection) {
            let docLabel = '';
            if (mostRecentDoc) {
                const { useAsTitle } = collection.admin;
                if (useAsTitle !== 'id') {
                    const titleField = collection.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === useAsTitle);
                    if (titleField && mostRecentDoc[useAsTitle]) {
                        if (titleField.localized) {
                            docLabel = mostRecentDoc[useAsTitle]?.[locale];
                        } else {
                            docLabel = mostRecentDoc[useAsTitle];
                        }
                    } else {
                        docLabel = `[${t('general:untitled')}]`;
                    }
                } else {
                    docLabel = mostRecentDoc.id;
                }
            }
            nav = [
                {
                    label: (0, _getTranslation.getTranslation)(collection.labels.plural, i18n),
                    url: `${admin}/collections/${collection.slug}`
                },
                {
                    label: docLabel,
                    url: `${admin}/collections/${collection.slug}/${id}`
                },
                {
                    label: 'Versions',
                    url: `${admin}/collections/${collection.slug}/${id}/versions`
                },
                {
                    label: doc?.createdAt ? (0, _formatDate.formatDate)(doc.createdAt, dateFormat, i18n?.language) : ''
                }
            ];
        }
        if (global) {
            nav = [
                {
                    label: global.label,
                    url: `${admin}/globals/${global.slug}`
                },
                {
                    label: 'Versions',
                    url: `${admin}/globals/${global.slug}/versions`
                },
                {
                    label: doc?.createdAt ? (0, _formatDate.formatDate)(doc.createdAt, dateFormat, i18n?.language) : ''
                }
            ];
        }
        setStepNav(nav);
    }, [
        setStepNav,
        collection,
        global,
        dateFormat,
        doc,
        mostRecentDoc,
        admin,
        id,
        locale,
        t,
        i18n
    ]);
    let metaTitle;
    let metaDesc;
    const formattedCreatedAt = doc?.createdAt ? (0, _formatDate.formatDate)(doc.createdAt, dateFormat, i18n?.language) : '';
    if (collection) {
        const useAsTitle = collection?.admin?.useAsTitle || 'id';
        metaTitle = `${t('version')} - ${formattedCreatedAt} - ${doc[useAsTitle]} - ${entityLabel}`;
        metaDesc = t('viewingVersion', {
            documentTitle: doc[useAsTitle],
            entityLabel
        });
    }
    if (global) {
        metaTitle = `${t('version')} - ${formattedCreatedAt} - ${entityLabel}`;
        metaDesc = t('viewingVersionGlobal', {
            entityLabel
        });
    }
    let comparison = compareDoc?.version;
    if (compareValue?.value === 'mostRecent') {
        comparison = mostRecentDoc;
    }
    if (compareValue?.value === 'published') {
        comparison = publishedDoc;
    }
    const canUpdate = docPermissions?.update?.permission;
    if (isError) {
        return /*#__PURE__*/ _react.default.createElement(_NotFound.default, {
            marginTop: "large"
        });
    }
    return /*#__PURE__*/ _react.default.createElement("main", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: metaDesc,
        title: metaTitle
    }), /*#__PURE__*/ _react.default.createElement(_Gutter.Gutter, {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header-wrap`
    }, /*#__PURE__*/ _react.default.createElement("p", {
        className: `${baseClass}__created-at`
    }, t('versionCreatedOn', {
        version: t(doc?.autosave ? 'autosavedVersion' : 'version')
    })), /*#__PURE__*/ _react.default.createElement("header", {
        className: `${baseClass}__header`
    }, /*#__PURE__*/ _react.default.createElement("h2", null, formattedCreatedAt), canUpdate && /*#__PURE__*/ _react.default.createElement(_Restore.default, {
        className: `${baseClass}__restore`,
        collection: collection,
        global: global,
        originalDocID: id,
        versionDate: formattedCreatedAt,
        versionID: versionID
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__controls`
    }, /*#__PURE__*/ _react.default.createElement(_Compare.default, {
        baseURL: compareBaseURL,
        onChange: setCompareValue,
        parentID: parentID,
        publishedDoc: publishedDoc,
        value: compareValue,
        versionID: versionID
    }), localization && /*#__PURE__*/ _react.default.createElement(_SelectLocales.default, {
        onChange: setLocales,
        options: localeOptions,
        value: locales
    })), doc?.version && /*#__PURE__*/ _react.default.createElement(_RenderFieldsToDiff.default, {
        comparison: comparison,
        fieldComponents: _fields.default,
        fieldPermissions: fieldPermissions,
        fields: fields,
        locales: locales ? locales.map(({ label })=>typeof label === 'string' ? label : undefined) : [],
        version: doc?.version
    })));
};
const _default = VersionView;

//# sourceMappingURL=data:application/json;base64,