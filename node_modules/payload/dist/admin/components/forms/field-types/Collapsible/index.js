"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _Collapsible = require("../../../elements/Collapsible");
const _ErrorPill = require("../../../elements/ErrorPill");
const _DocumentInfo = require("../../../utilities/DocumentInfo");
const _Preferences = require("../../../utilities/Preferences");
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _RowLabel = require("../../RowLabel");
const _WatchChildErrors = require("../../WatchChildErrors");
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
require("./index.scss");
const _shared = require("../shared");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'collapsible-field';
const CollapsibleField = (props)=>{
    const { admin: { className, description, initCollapsed, readOnly }, fieldTypes, fields, indexPath, label, path, permissions } = props;
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const { preferencesKey } = (0, _DocumentInfo.useDocumentInfo)();
    const [collapsedOnMount, setCollapsedOnMount] = (0, _react.useState)();
    const fieldPreferencesKey = `collapsible-${indexPath.replace(/\./g, '__')}`;
    const [errorCount, setErrorCount] = (0, _react.useState)(0);
    const submitted = (0, _context.useFormSubmitted)();
    const onToggle = (0, _react.useCallback)(async (newCollapsedState)=>{
        const existingPreferences = await getPreference(preferencesKey);
        setPreference(preferencesKey, {
            ...existingPreferences,
            ...path ? {
                fields: {
                    ...existingPreferences?.fields || {},
                    [path]: {
                        ...existingPreferences?.fields?.[path],
                        collapsed: newCollapsedState
                    }
                }
            } : {
                fields: {
                    ...existingPreferences?.fields || {},
                    [fieldPreferencesKey]: {
                        ...existingPreferences?.fields?.[fieldPreferencesKey],
                        collapsed: newCollapsedState
                    }
                }
            }
        });
    }, [
        preferencesKey,
        fieldPreferencesKey,
        getPreference,
        setPreference,
        path
    ]);
    (0, _react.useEffect)(()=>{
        const fetchInitialState = async ()=>{
            const preferences = await getPreference(preferencesKey);
            if (preferences) {
                const initCollapsedFromPref = path ? preferences?.fields?.[path]?.collapsed : preferences?.fields?.[fieldPreferencesKey]?.collapsed;
                setCollapsedOnMount(Boolean(initCollapsedFromPref));
            } else {
                setCollapsedOnMount(typeof initCollapsed === 'boolean' ? initCollapsed : false);
            }
        };
        fetchInitialState();
    }, [
        getPreference,
        preferencesKey,
        fieldPreferencesKey,
        initCollapsed,
        path
    ]);
    if (typeof collapsedOnMount !== 'boolean') return null;
    const fieldHasErrors = submitted && errorCount > 0;
    return /*#__PURE__*/ _react.default.createElement("div", {
        id: `field-${fieldPreferencesKey}${path ? `-${path.replace(/\./g, '__')}` : ''}`,
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_WatchChildErrors.WatchChildErrors, {
        fieldSchema: fields,
        path: path,
        setErrorCount: setErrorCount
    }), /*#__PURE__*/ _react.default.createElement(_Collapsible.Collapsible, {
        className: `${baseClass}__collapsible`,
        collapsibleStyle: errorCount > 0 ? 'error' : 'default',
        header: /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__row-label-wrap`
        }, /*#__PURE__*/ _react.default.createElement(_RowLabel.RowLabel, {
            label: label,
            path: path
        }), errorCount > 0 && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
            count: errorCount,
            withMessage: true
        })),
        initCollapsed: collapsedOnMount,
        onToggle: onToggle
    }, /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        fieldSchema: fields.map((field)=>({
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(path, field)
            })),
        fieldTypes: fieldTypes,
        forceRender: true,
        indexPath: indexPath,
        margins: "small",
        permissions: permissions,
        readOnly: readOnly
    })), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description
    }));
};
const _default = (0, _withCondition.default)(CollapsibleField);

//# sourceMappingURL=data:application/json;base64,