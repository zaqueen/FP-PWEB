"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RowActions", {
    enumerable: true,
    get: function() {
        return RowActions;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _ArrayAction = require("../../../elements/ArrayAction");
const _useDrawerSlug = require("../../../elements/Drawer/useDrawerSlug");
const _BlocksDrawer = require("./BlocksDrawer");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const RowActions = (props)=>{
    const { addRow, blockType, blocks, duplicateRow, hasMaxRows, labels, moveRow, removeRow, rowCount, rowIndex } = props;
    const { closeModal, openModal } = (0, _modal.useModal)();
    const drawerSlug = (0, _useDrawerSlug.useDrawerSlug)('blocks-drawer');
    const [indexToAdd, setIndexToAdd] = _react.default.useState(null);
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_BlocksDrawer.BlocksDrawer, {
        addRow: (_, rowBlockType)=>{
            if (typeof addRow === 'function') {
                addRow(indexToAdd, rowBlockType);
            }
            closeModal(drawerSlug);
        },
        addRowIndex: rowIndex,
        blocks: blocks,
        drawerSlug: drawerSlug,
        labels: labels
    }), /*#__PURE__*/ _react.default.createElement(_ArrayAction.ArrayAction, {
        addRow: (index)=>{
            setIndexToAdd(index);
            openModal(drawerSlug);
        },
        duplicateRow: ()=>duplicateRow(rowIndex, blockType),
        hasMaxRows: hasMaxRows,
        index: rowIndex,
        moveRow: moveRow,
        removeRow: removeRow,
        rowCount: rowCount
    }));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL0Jsb2Nrcy9Sb3dBY3Rpb25zLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNb2RhbCB9IGZyb20gJ0BmYWNlbGVzcy11aS9tb2RhbCdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBCbG9jaywgTGFiZWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcblxuaW1wb3J0IHsgQXJyYXlBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9BcnJheUFjdGlvbidcbmltcG9ydCB7IHVzZURyYXdlclNsdWcgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9EcmF3ZXIvdXNlRHJhd2VyU2x1ZydcbmltcG9ydCB7IEJsb2Nrc0RyYXdlciB9IGZyb20gJy4vQmxvY2tzRHJhd2VyJ1xuXG5leHBvcnQgY29uc3QgUm93QWN0aW9uczogUmVhY3QuRkM8e1xuICBhZGRSb3c6IChyb3dJbmRleDogbnVtYmVyLCBibG9ja1R5cGU6IHN0cmluZykgPT4gdm9pZFxuICBibG9ja1R5cGU6IHN0cmluZ1xuICBibG9ja3M6IEJsb2NrW11cbiAgZHVwbGljYXRlUm93OiAocm93SW5kZXg6IG51bWJlciwgYmxvY2tUeXBlOiBzdHJpbmcpID0+IHZvaWRcbiAgaGFzTWF4Um93cz86IGJvb2xlYW5cbiAgbGFiZWxzOiBMYWJlbHNcbiAgbW92ZVJvdzogKGZyb21JbmRleDogbnVtYmVyLCB0b0luZGV4OiBudW1iZXIpID0+IHZvaWRcbiAgcmVtb3ZlUm93OiAocm93SW5kZXg6IG51bWJlcikgPT4gdm9pZFxuICByb3dDb3VudDogbnVtYmVyXG4gIHJvd0luZGV4OiBudW1iZXJcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhZGRSb3csXG4gICAgYmxvY2tUeXBlLFxuICAgIGJsb2NrcyxcbiAgICBkdXBsaWNhdGVSb3csXG4gICAgaGFzTWF4Um93cyxcbiAgICBsYWJlbHMsXG4gICAgbW92ZVJvdyxcbiAgICByZW1vdmVSb3csXG4gICAgcm93Q291bnQsXG4gICAgcm93SW5kZXgsXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHsgY2xvc2VNb2RhbCwgb3Blbk1vZGFsIH0gPSB1c2VNb2RhbCgpXG4gIGNvbnN0IGRyYXdlclNsdWcgPSB1c2VEcmF3ZXJTbHVnKCdibG9ja3MtZHJhd2VyJylcblxuICBjb25zdCBbaW5kZXhUb0FkZCwgc2V0SW5kZXhUb0FkZF0gPSBSZWFjdC51c2VTdGF0ZTxudWxsIHwgbnVtYmVyPihudWxsKVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEJsb2Nrc0RyYXdlclxuICAgICAgICBhZGRSb3c9eyhfLCByb3dCbG9ja1R5cGUpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFkZFJvdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYWRkUm93KGluZGV4VG9BZGQsIHJvd0Jsb2NrVHlwZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xvc2VNb2RhbChkcmF3ZXJTbHVnKVxuICAgICAgICB9fVxuICAgICAgICBhZGRSb3dJbmRleD17cm93SW5kZXh9XG4gICAgICAgIGJsb2Nrcz17YmxvY2tzfVxuICAgICAgICBkcmF3ZXJTbHVnPXtkcmF3ZXJTbHVnfVxuICAgICAgICBsYWJlbHM9e2xhYmVsc31cbiAgICAgIC8+XG4gICAgICA8QXJyYXlBY3Rpb25cbiAgICAgICAgYWRkUm93PXsoaW5kZXgpID0+IHtcbiAgICAgICAgICBzZXRJbmRleFRvQWRkKGluZGV4KVxuICAgICAgICAgIG9wZW5Nb2RhbChkcmF3ZXJTbHVnKVxuICAgICAgICB9fVxuICAgICAgICBkdXBsaWNhdGVSb3c9eygpID0+IGR1cGxpY2F0ZVJvdyhyb3dJbmRleCwgYmxvY2tUeXBlKX1cbiAgICAgICAgaGFzTWF4Um93cz17aGFzTWF4Um93c31cbiAgICAgICAgaW5kZXg9e3Jvd0luZGV4fVxuICAgICAgICBtb3ZlUm93PXttb3ZlUm93fVxuICAgICAgICByZW1vdmVSb3c9e3JlbW92ZVJvd31cbiAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgLz5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG4iXSwibmFtZXMiOlsiUm93QWN0aW9ucyIsInByb3BzIiwiYWRkUm93IiwiYmxvY2tUeXBlIiwiYmxvY2tzIiwiZHVwbGljYXRlUm93IiwiaGFzTWF4Um93cyIsImxhYmVscyIsIm1vdmVSb3ciLCJyZW1vdmVSb3ciLCJyb3dDb3VudCIsInJvd0luZGV4IiwiY2xvc2VNb2RhbCIsIm9wZW5Nb2RhbCIsInVzZU1vZGFsIiwiZHJhd2VyU2x1ZyIsInVzZURyYXdlclNsdWciLCJpbmRleFRvQWRkIiwic2V0SW5kZXhUb0FkZCIsIlJlYWN0IiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIkJsb2Nrc0RyYXdlciIsIl8iLCJyb3dCbG9ja1R5cGUiLCJhZGRSb3dJbmRleCIsIkFycmF5QWN0aW9uIiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7K0JBU2FBOzs7ZUFBQUE7Ozt1QkFUWTs4REFDUDs2QkFJVTsrQkFDRTs4QkFDRDs7Ozs7O0FBRXRCLE1BQU1BLGFBV1IsQ0FBQ0M7SUFDSixNQUFNLEVBQ0pDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxNQUFNLEVBQ05DLFlBQVksRUFDWkMsVUFBVSxFQUNWQyxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsU0FBUyxFQUNUQyxRQUFRLEVBQ1JDLFFBQVEsRUFDVCxHQUFHVjtJQUVKLE1BQU0sRUFBRVcsVUFBVSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsSUFBQUEsZUFBUTtJQUMxQyxNQUFNQyxhQUFhQyxJQUFBQSw0QkFBYSxFQUFDO0lBRWpDLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHQyxjQUFLLENBQUNDLFFBQVEsQ0FBZ0I7SUFFbEUscUJBQ0UsNkJBQUNELGNBQUssQ0FBQ0UsUUFBUSxzQkFDYiw2QkFBQ0MsMEJBQVk7UUFDWHBCLFFBQVEsQ0FBQ3FCLEdBQUdDO1lBQ1YsSUFBSSxPQUFPdEIsV0FBVyxZQUFZO2dCQUNoQ0EsT0FBT2UsWUFBWU87WUFDckI7WUFDQVosV0FBV0c7UUFDYjtRQUNBVSxhQUFhZDtRQUNiUCxRQUFRQTtRQUNSVyxZQUFZQTtRQUNaUixRQUFRQTtzQkFFViw2QkFBQ21CLHdCQUFXO1FBQ1Z4QixRQUFRLENBQUN5QjtZQUNQVCxjQUFjUztZQUNkZCxVQUFVRTtRQUNaO1FBQ0FWLGNBQWMsSUFBTUEsYUFBYU0sVUFBVVI7UUFDM0NHLFlBQVlBO1FBQ1pxQixPQUFPaEI7UUFDUEgsU0FBU0E7UUFDVEMsV0FBV0E7UUFDWEMsVUFBVUE7O0FBSWxCIn0=