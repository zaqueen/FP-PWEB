"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AddNewRelation", {
    enumerable: true,
    get: function() {
        return AddNewRelation;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../../utilities/getTranslation");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Button"));
const _DocumentDrawer = require("../../../../elements/DocumentDrawer");
const _Popup = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Popup"));
const _PopupButtonList = /*#__PURE__*/ _interop_require_wildcard(require("../../../../elements/Popup/PopupButtonList"));
const _Tooltip = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Tooltip"));
const _Plus = /*#__PURE__*/ _interop_require_default(require("../../../../icons/Plus"));
const _Auth = require("../../../../utilities/Auth");
const _Config = require("../../../../utilities/Config");
require("./index.scss");
const _useRelatedCollections = require("./useRelatedCollections");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'relationship-add-new';
const AddNewRelation = ({ dispatchOptions, hasMany, path, relationTo, setValue, value })=>{
    const relatedCollections = (0, _useRelatedCollections.useRelatedCollections)(relationTo);
    const { permissions } = (0, _Auth.useAuth)();
    const [show, setShow] = (0, _react.useState)(false);
    const [selectedCollection, setSelectedCollection] = (0, _react.useState)();
    const relatedToMany = relatedCollections.length > 1;
    const [collectionConfig, setCollectionConfig] = (0, _react.useState)(()=>!relatedToMany ? relatedCollections[0] : undefined);
    const [popupOpen, setPopupOpen] = (0, _react.useState)(false);
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const [showTooltip, setShowTooltip] = (0, _react.useState)(false);
    const config = (0, _Config.useConfig)();
    const [DocumentDrawer, DocumentDrawerToggler, { isDrawerOpen, toggleDrawer }] = (0, _DocumentDrawer.useDocumentDrawer)({
        collectionSlug: collectionConfig?.slug
    });
    const onSave = (0, _react.useCallback)(({ doc, operation })=>{
        if (operation === 'create') {
            const newValue = Array.isArray(relationTo) ? {
                relationTo: collectionConfig.slug,
                value: doc.id
            } : doc.id;
            // ensure the value is not already in the array
            const isNewValue = Array.isArray(relationTo) && Array.isArray(value) ? !value.some((v)=>v && typeof v === 'object' && v.value === doc.id) : value !== doc.id;
            if (isNewValue) {
                dispatchOptions({
                    collection: collectionConfig,
                    config,
                    docs: [
                        doc
                    ],
                    i18n,
                    sort: true,
                    type: 'ADD'
                });
                if (hasMany) {
                    setValue([
                        ...Array.isArray(value) ? value : [],
                        newValue
                    ]);
                } else {
                    setValue(newValue);
                }
            }
            setSelectedCollection(undefined);
        }
    }, [
        relationTo,
        collectionConfig,
        dispatchOptions,
        i18n,
        hasMany,
        setValue,
        value,
        config
    ]);
    const onPopupToggle = (0, _react.useCallback)((state)=>{
        setPopupOpen(state);
    }, []);
    (0, _react.useEffect)(()=>{
        if (permissions) {
            if (relatedCollections.length === 1) {
                setShow(permissions.collections[relatedCollections[0].slug].create.permission);
            } else {
                setShow(relatedCollections.some((collection)=>permissions.collections[collection.slug].create.permission));
            }
        }
    }, [
        permissions,
        relatedCollections
    ]);
    (0, _react.useEffect)(()=>{
        if (relatedToMany && selectedCollection) {
            setCollectionConfig(relatedCollections.find((collection)=>collection.slug === selectedCollection));
        }
    }, [
        selectedCollection,
        relatedToMany,
        relatedCollections
    ]);
    (0, _react.useEffect)(()=>{
        if (relatedToMany && collectionConfig) {
            // the drawer must be rendered on the page before before opening it
            // this is why 'selectedCollection' is different from 'collectionConfig'
            toggleDrawer();
            setSelectedCollection(undefined);
        }
    }, [
        toggleDrawer,
        relatedToMany,
        collectionConfig
    ]);
    (0, _react.useEffect)(()=>{
        if (relatedToMany && !isDrawerOpen) {
            setCollectionConfig(undefined);
        }
    }, [
        isDrawerOpen,
        relatedToMany
    ]);
    if (show) {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: baseClass,
            id: `${path}-add-new`
        }, relatedCollections.length === 1 && /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
            className: `${baseClass}__add-button`,
            onClick: ()=>setShowTooltip(false),
            onMouseEnter: ()=>setShowTooltip(true),
            onMouseLeave: ()=>setShowTooltip(false)
        }, /*#__PURE__*/ _react.default.createElement(_Tooltip.default, {
            className: `${baseClass}__tooltip`,
            show: showTooltip
        }, t('addNewLabel', {
            label: (0, _getTranslation.getTranslation)(relatedCollections[0].labels.singular, i18n)
        })), /*#__PURE__*/ _react.default.createElement(_Plus.default, null)), /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
            onSave: onSave
        })), relatedCollections.length > 1 && /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement(_Popup.default, {
            button: /*#__PURE__*/ _react.default.createElement(_Button.default, {
                buttonStyle: "none",
                className: `${baseClass}__add-button`,
                tooltip: popupOpen ? undefined : t('addNew')
            }, /*#__PURE__*/ _react.default.createElement(_Plus.default, null)),
            buttonType: "custom",
            horizontalAlign: "center",
            onToggleOpen: onPopupToggle,
            render: ({ close: closePopup })=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.ButtonGroup, null, relatedCollections.map((relatedCollection)=>{
                    if (permissions.collections[relatedCollection.slug].create.permission) {
                        return /*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                            className: `${baseClass}__relation-button--${relatedCollection.slug}`,
                            key: relatedCollection.slug,
                            onClick: ()=>{
                                closePopup();
                                setSelectedCollection(relatedCollection.slug);
                            }
                        }, (0, _getTranslation.getTranslation)(relatedCollection.labels.singular, i18n));
                    }
                    return null;
                })),
            size: "medium"
        }), collectionConfig && permissions.collections[collectionConfig.slug].create.permission && /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
            onSave: onSave
        })));
    }
    return null;
};

//# sourceMappingURL=data:application/json;base64,