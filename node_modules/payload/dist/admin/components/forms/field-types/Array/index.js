"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _validations = require("../../../../../fields/validations");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _scrollToID = require("../../../../utilities/scrollToID");
const _Banner = /*#__PURE__*/ _interop_require_default(require("../../../elements/Banner"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../elements/Button"));
const _DraggableSortable = /*#__PURE__*/ _interop_require_default(require("../../../elements/DraggableSortable"));
const _DraggableSortableItem = /*#__PURE__*/ _interop_require_default(require("../../../elements/DraggableSortable/DraggableSortableItem"));
const _ErrorPill = require("../../../elements/ErrorPill");
const _Config = require("../../../utilities/Config");
const _DocumentInfo = require("../../../utilities/DocumentInfo");
const _Locale = require("../../../utilities/Locale");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _NullifyField = require("../../NullifyField");
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
const _ArrayRow = require("./ArrayRow");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'array-field';
const ArrayFieldType = (props)=>{
    const { name, admin: { className, components, condition, description, readOnly }, fieldTypes, fields, forceRender = false, indexPath, localized, maxRows, minRows, path: pathFromProps, permissions, required, validate = _validations.array } = props;
    const path = pathFromProps || name;
    // eslint-disable-next-line react/destructuring-assignment
    const label = props?.label ?? props?.labels?.singular;
    const CustomRowLabel = components?.RowLabel || undefined;
    const { setDocFieldPreferences } = (0, _DocumentInfo.useDocumentInfo)();
    const { addFieldRow, dispatchFields, removeFieldRow, setModified } = (0, _context.useForm)();
    const submitted = (0, _context.useFormSubmitted)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const { localization } = (0, _Config.useConfig)();
    const editingDefaultLocale = (()=>{
        if (localization && localization.fallback) {
            const defaultLocale = localization.defaultLocale || 'en';
            return locale === defaultLocale;
        }
        return true;
    })();
    // Handle labeling for Arrays, Global Arrays, and Blocks
    const getLabels = (p)=>{
        if (p?.labels) return p.labels;
        if (p?.label) return {
            plural: undefined,
            singular: p.label
        };
        return {
            plural: t('rows'),
            singular: t('row')
        };
    };
    const labels = getLabels(props);
    const memoizedValidate = (0, _react.useCallback)((value, options)=>{
        // alternative locales can be null
        if (!editingDefaultLocale && value === null) {
            return true;
        }
        return validate(value, {
            ...options,
            maxRows,
            minRows,
            required
        });
    }, [
        maxRows,
        minRows,
        required,
        validate,
        editingDefaultLocale
    ]);
    const { errorMessage, rows = [], showError, valid, value } = (0, _useField.default)({
        condition,
        hasRows: true,
        path,
        validate: memoizedValidate
    });
    const addRow = (0, _react.useCallback)(async (rowIndex)=>{
        await addFieldRow({
            path,
            rowIndex
        });
        setModified(true);
        setTimeout(()=>{
            (0, _scrollToID.scrollToID)(`${path}-row-${rowIndex + 1}`);
        }, 0);
    }, [
        addFieldRow,
        path,
        setModified
    ]);
    const duplicateRow = (0, _react.useCallback)((rowIndex)=>{
        dispatchFields({
            path,
            rowIndex,
            type: 'DUPLICATE_ROW'
        });
        setModified(true);
        setTimeout(()=>{
            (0, _scrollToID.scrollToID)(`${path}-row-${rowIndex}`);
        }, 0);
    }, [
        dispatchFields,
        path,
        setModified
    ]);
    const removeRow = (0, _react.useCallback)((rowIndex)=>{
        removeFieldRow({
            path,
            rowIndex
        });
        setModified(true);
    }, [
        removeFieldRow,
        path,
        setModified
    ]);
    const moveRow = (0, _react.useCallback)((moveFromIndex, moveToIndex)=>{
        dispatchFields({
            moveFromIndex,
            moveToIndex,
            path,
            type: 'MOVE_ROW'
        });
        setModified(true);
    }, [
        dispatchFields,
        path,
        setModified
    ]);
    const toggleCollapseAll = (0, _react.useCallback)((collapsed)=>{
        dispatchFields({
            collapsed,
            path,
            setDocFieldPreferences,
            type: 'SET_ALL_ROWS_COLLAPSED'
        });
    }, [
        dispatchFields,
        path,
        setDocFieldPreferences
    ]);
    const setCollapse = (0, _react.useCallback)((rowID, collapsed)=>{
        dispatchFields({
            collapsed,
            path,
            rowID,
            setDocFieldPreferences,
            type: 'SET_ROW_COLLAPSED'
        });
    }, [
        dispatchFields,
        path,
        setDocFieldPreferences
    ]);
    const hasMaxRows = maxRows && rows.length >= maxRows;
    const fieldErrorCount = rows.reduce((total, row)=>total + (row?.childErrorPaths?.size || 0), 0) + (valid ? 0 : 1);
    const fieldHasErrors = submitted && fieldErrorCount > 0;
    const showRequired = readOnly && rows.length === 0;
    const showMinRows = rows.length < minRows || required && rows.length === 0;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`
        ].filter(Boolean).join(' '),
        id: `field-${path.replace(/\./g, '__')}`
    }, showError && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    })), /*#__PURE__*/ _react.default.createElement("header", {
        className: `${baseClass}__header`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header-wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header-content`
    }, /*#__PURE__*/ _react.default.createElement("h3", {
        className: `${baseClass}__title`
    }, (0, _getTranslation.getTranslation)(label || name, i18n)), fieldHasErrors && fieldErrorCount > 0 && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
        count: fieldErrorCount,
        withMessage: true
    })), rows.length > 0 && /*#__PURE__*/ _react.default.createElement("ul", {
        className: `${baseClass}__header-actions`
    }, /*#__PURE__*/ _react.default.createElement("li", null, /*#__PURE__*/ _react.default.createElement("button", {
        className: `${baseClass}__header-action`,
        onClick: ()=>toggleCollapseAll(true),
        type: "button"
    }, t('collapseAll'))), /*#__PURE__*/ _react.default.createElement("li", null, /*#__PURE__*/ _react.default.createElement("button", {
        className: `${baseClass}__header-action`,
        onClick: ()=>toggleCollapseAll(false),
        type: "button"
    }, t('showAll'))))), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        className: `field-description-${path.replace(/\./g, '__')}`,
        description: description,
        value: value
    })), /*#__PURE__*/ _react.default.createElement(_NullifyField.NullifyLocaleField, {
        fieldValue: value,
        localized: localized,
        path: path
    }), (rows.length > 0 || !valid && (showRequired || showMinRows)) && /*#__PURE__*/ _react.default.createElement(_DraggableSortable.default, {
        className: `${baseClass}__draggable-rows`,
        ids: rows.map((row)=>row.id),
        onDragEnd: ({ moveFromIndex, moveToIndex })=>moveRow(moveFromIndex, moveToIndex)
    }, rows.map((row, i)=>/*#__PURE__*/ _react.default.createElement(_DraggableSortableItem.default, {
            disabled: readOnly,
            id: row.id,
            key: row.id
        }, (draggableSortableItemProps)=>/*#__PURE__*/ _react.default.createElement(_ArrayRow.ArrayRow, {
                ...draggableSortableItemProps,
                CustomRowLabel: CustomRowLabel,
                addRow: addRow,
                duplicateRow: duplicateRow,
                fieldTypes: fieldTypes,
                fields: fields,
                forceRender: forceRender,
                hasMaxRows: hasMaxRows,
                indexPath: indexPath,
                labels: labels,
                moveRow: moveRow,
                path: path,
                permissions: permissions,
                readOnly: readOnly,
                removeRow: removeRow,
                row: row,
                rowCount: rows.length,
                rowIndex: i,
                setCollapse: setCollapse
            }))), !valid && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, showRequired && /*#__PURE__*/ _react.default.createElement(_Banner.default, null, t('validation:fieldHasNo', {
        label: (0, _getTranslation.getTranslation)(labels.plural, i18n)
    })), showMinRows && /*#__PURE__*/ _react.default.createElement(_Banner.default, {
        type: "error"
    }, t('validation:requiresAtLeast', {
        count: minRows,
        label: (0, _getTranslation.getTranslation)(minRows ? labels.plural : labels.singular, i18n) || t(minRows > 1 ? 'general:row' : 'general:rows')
    })))), !readOnly && !hasMaxRows && /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__add-row`,
        icon: "plus",
        iconPosition: "left",
        iconStyle: "with-border",
        onClick: ()=>addRow(value || 0)
    }, t('addLabel', {
        label: (0, _getTranslation.getTranslation)(labels.singular, i18n)
    })));
};
const _default = (0, _withCondition.default)(ArrayFieldType);

//# sourceMappingURL=data:application/json;base64,