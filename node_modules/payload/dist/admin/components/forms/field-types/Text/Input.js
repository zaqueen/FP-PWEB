"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TextInput = (props)=>{
    const { Error, Label, afterInput, beforeInput, className, description, errorMessage, inputRef, label, onChange, onKeyDown, path, placeholder, readOnly, required, rtl, showError, style, value, width } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const ErrorComp = Error || _Error.default;
    const LabelComp = Label || _Label.default;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            'text',
            className,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(ErrorComp, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(LabelComp, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: "input-wrapper"
    }, Array.isArray(beforeInput) && beforeInput.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        })), /*#__PURE__*/ _react.default.createElement("input", {
        "data-rtl": rtl,
        disabled: readOnly,
        id: `field-${path.replace(/\./g, '__')}`,
        name: path,
        onChange: onChange,
        onKeyDown: onKeyDown,
        placeholder: (0, _getTranslation.getTranslation)(placeholder, i18n),
        ref: inputRef,
        type: "text",
        value: value || ''
    }), Array.isArray(afterInput) && afterInput.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        }))), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        className: `field-description-${path.replace(/\./g, '__')}`,
        description: description,
        value: value
    }));
};
const _default = TextInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1RleHQvSW5wdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhbmdlRXZlbnQgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbXBvcnQgdHlwZSB7IFRleHRGaWVsZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IERlc2NyaXB0aW9uIH0gZnJvbSAnLi4vLi4vRmllbGREZXNjcmlwdGlvbi90eXBlcydcblxuaW1wb3J0IHsgZ2V0VHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsaXRpZXMvZ2V0VHJhbnNsYXRpb24nXG5pbXBvcnQgRGVmYXVsdEVycm9yIGZyb20gJy4uLy4uL0Vycm9yJ1xuaW1wb3J0IEZpZWxkRGVzY3JpcHRpb24gZnJvbSAnLi4vLi4vRmllbGREZXNjcmlwdGlvbidcbmltcG9ydCBEZWZhdWx0TGFiZWwgZnJvbSAnLi4vLi4vTGFiZWwnXG5pbXBvcnQgeyBmaWVsZEJhc2VDbGFzcyB9IGZyb20gJy4uL3NoYXJlZCdcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5leHBvcnQgdHlwZSBUZXh0SW5wdXRQcm9wcyA9IE9taXQ8VGV4dEZpZWxkLCAndHlwZSc+ICYge1xuICBFcnJvcj86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PlxuICBMYWJlbD86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PlxuICBhZnRlcklucHV0PzogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+W11cbiAgYmVmb3JlSW5wdXQ/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5bXVxuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgZGVzY3JpcHRpb24/OiBEZXNjcmlwdGlvblxuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmdcbiAgaW5wdXRSZWY/OiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PEhUTUxJbnB1dEVsZW1lbnQ+XG4gIG9uQ2hhbmdlPzogKGU6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkXG4gIG9uS2V5RG93bj86IFJlYWN0LktleWJvYXJkRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+XG4gIHBhdGg6IHN0cmluZ1xuICBwbGFjZWhvbGRlcj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBzdHJpbmdcbiAgcmVhZE9ubHk/OiBib29sZWFuXG4gIHJlcXVpcmVkPzogYm9vbGVhblxuICBydGw/OiBib29sZWFuXG4gIHNob3dFcnJvcj86IGJvb2xlYW5cbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gIHZhbHVlPzogc3RyaW5nXG4gIHdpZHRoPzogc3RyaW5nXG59XG5cbmNvbnN0IFRleHRJbnB1dDogUmVhY3QuRkM8VGV4dElucHV0UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBFcnJvcixcbiAgICBMYWJlbCxcbiAgICBhZnRlcklucHV0LFxuICAgIGJlZm9yZUlucHV0LFxuICAgIGNsYXNzTmFtZSxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBlcnJvck1lc3NhZ2UsXG4gICAgaW5wdXRSZWYsXG4gICAgbGFiZWwsXG4gICAgb25DaGFuZ2UsXG4gICAgb25LZXlEb3duLFxuICAgIHBhdGgsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgcmVhZE9ubHksXG4gICAgcmVxdWlyZWQsXG4gICAgcnRsLFxuICAgIHNob3dFcnJvcixcbiAgICBzdHlsZSxcbiAgICB2YWx1ZSxcbiAgICB3aWR0aCxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3QgRXJyb3JDb21wID0gRXJyb3IgfHwgRGVmYXVsdEVycm9yXG4gIGNvbnN0IExhYmVsQ29tcCA9IExhYmVsIHx8IERlZmF1bHRMYWJlbFxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtbZmllbGRCYXNlQ2xhc3MsICd0ZXh0JywgY2xhc3NOYW1lLCBzaG93RXJyb3IgJiYgJ2Vycm9yJywgcmVhZE9ubHkgJiYgJ3JlYWQtb25seSddXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEVycm9yQ29tcCBtZXNzYWdlPXtlcnJvck1lc3NhZ2V9IHNob3dFcnJvcj17c2hvd0Vycm9yfSAvPlxuICAgICAgPExhYmVsQ29tcCBodG1sRm9yPXtgZmllbGQtJHtwYXRoLnJlcGxhY2UoL1xcLi9nLCAnX18nKX1gfSBsYWJlbD17bGFiZWx9IHJlcXVpcmVkPXtyZXF1aXJlZH0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtd3JhcHBlclwiPlxuICAgICAgICB7QXJyYXkuaXNBcnJheShiZWZvcmVJbnB1dCkgJiYgYmVmb3JlSW5wdXQubWFwKChDb21wb25lbnQsIGkpID0+IDxDb21wb25lbnQga2V5PXtpfSAvPil9XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGRhdGEtcnRsPXtydGx9XG4gICAgICAgICAgZGlzYWJsZWQ9e3JlYWRPbmx5fVxuICAgICAgICAgIGlkPXtgZmllbGQtJHtwYXRoLnJlcGxhY2UoL1xcLi9nLCAnX18nKX1gfVxuICAgICAgICAgIG5hbWU9e3BhdGh9XG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRUcmFuc2xhdGlvbihwbGFjZWhvbGRlciwgaTE4bil9XG4gICAgICAgICAgcmVmPXtpbnB1dFJlZn1cbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdmFsdWU9e3ZhbHVlIHx8ICcnfVxuICAgICAgICAvPlxuICAgICAgICB7QXJyYXkuaXNBcnJheShhZnRlcklucHV0KSAmJiBhZnRlcklucHV0Lm1hcCgoQ29tcG9uZW50LCBpKSA9PiA8Q29tcG9uZW50IGtleT17aX0gLz4pfVxuICAgICAgPC9kaXY+XG4gICAgICA8RmllbGREZXNjcmlwdGlvblxuICAgICAgICBjbGFzc05hbWU9e2BmaWVsZC1kZXNjcmlwdGlvbi0ke3BhdGgucmVwbGFjZSgvXFwuL2csICdfXycpfWB9XG4gICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0SW5wdXRcbiJdLCJuYW1lcyI6WyJUZXh0SW5wdXQiLCJwcm9wcyIsIkVycm9yIiwiTGFiZWwiLCJhZnRlcklucHV0IiwiYmVmb3JlSW5wdXQiLCJjbGFzc05hbWUiLCJkZXNjcmlwdGlvbiIsImVycm9yTWVzc2FnZSIsImlucHV0UmVmIiwibGFiZWwiLCJvbkNoYW5nZSIsIm9uS2V5RG93biIsInBhdGgiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJydGwiLCJzaG93RXJyb3IiLCJzdHlsZSIsInZhbHVlIiwid2lkdGgiLCJpMThuIiwidXNlVHJhbnNsYXRpb24iLCJFcnJvckNvbXAiLCJEZWZhdWx0RXJyb3IiLCJMYWJlbENvbXAiLCJEZWZhdWx0TGFiZWwiLCJkaXYiLCJmaWVsZEJhc2VDbGFzcyIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwibWVzc2FnZSIsImh0bWxGb3IiLCJyZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiQ29tcG9uZW50IiwiaSIsImtleSIsImlucHV0IiwiZGF0YS1ydGwiLCJkaXNhYmxlZCIsImlkIiwibmFtZSIsImdldFRyYW5zbGF0aW9uIiwicmVmIiwidHlwZSIsIkZpZWxkRGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBdUdBOzs7ZUFBQTs7OzhEQXJHa0I7OEJBQ2E7Z0NBS0E7OERBQ047eUVBQ0k7OERBQ0o7d0JBQ007UUFDeEI7Ozs7OztBQXdCUCxNQUFNQSxZQUFzQyxDQUFDQztJQUMzQyxNQUFNLEVBQ0pDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxVQUFVLEVBQ1ZDLFdBQVcsRUFDWEMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLFlBQVksRUFDWkMsUUFBUSxFQUNSQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxJQUFJLEVBQ0pDLFdBQVcsRUFDWEMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLEdBQUcsRUFDSEMsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLEtBQUssRUFDTEMsS0FBSyxFQUNOLEdBQUdwQjtJQUVKLE1BQU0sRUFBRXFCLElBQUksRUFBRSxHQUFHQyxJQUFBQSw0QkFBYztJQUUvQixNQUFNQyxZQUFZdEIsU0FBU3VCLGNBQVk7SUFDdkMsTUFBTUMsWUFBWXZCLFNBQVN3QixjQUFZO0lBRXZDLHFCQUNFLDZCQUFDQztRQUNDdEIsV0FBVztZQUFDdUIsc0JBQWM7WUFBRTtZQUFRdkI7WUFBV1ksYUFBYTtZQUFTSCxZQUFZO1NBQVksQ0FDMUZlLE1BQU0sQ0FBQ0MsU0FDUEMsSUFBSSxDQUFDO1FBQ1JiLE9BQU87WUFDTCxHQUFHQSxLQUFLO1lBQ1JFO1FBQ0Y7cUJBRUEsNkJBQUNHO1FBQVVTLFNBQVN6QjtRQUFjVSxXQUFXQTtzQkFDN0MsNkJBQUNRO1FBQVVRLFNBQVMsQ0FBQyxNQUFNLEVBQUVyQixLQUFLc0IsT0FBTyxDQUFDLE9BQU8sTUFBTSxDQUFDO1FBQUV6QixPQUFPQTtRQUFPTSxVQUFVQTtzQkFDbEYsNkJBQUNZO1FBQUl0QixXQUFVO09BQ1o4QixNQUFNQyxPQUFPLENBQUNoQyxnQkFBZ0JBLFlBQVlpQyxHQUFHLENBQUMsQ0FBQ0MsV0FBV0Msa0JBQU0sNkJBQUNEO1lBQVVFLEtBQUtEOzJCQUNqRiw2QkFBQ0U7UUFDQ0MsWUFBVTFCO1FBQ1YyQixVQUFVN0I7UUFDVjhCLElBQUksQ0FBQyxNQUFNLEVBQUVoQyxLQUFLc0IsT0FBTyxDQUFDLE9BQU8sTUFBTSxDQUFDO1FBQ3hDVyxNQUFNakM7UUFDTkYsVUFBVUE7UUFDVkMsV0FBV0E7UUFDWEUsYUFBYWlDLElBQUFBLDhCQUFjLEVBQUNqQyxhQUFhUTtRQUN6QzBCLEtBQUt2QztRQUNMd0MsTUFBSztRQUNMN0IsT0FBT0EsU0FBUztRQUVqQmdCLE1BQU1DLE9BQU8sQ0FBQ2pDLGVBQWVBLFdBQVdrQyxHQUFHLENBQUMsQ0FBQ0MsV0FBV0Msa0JBQU0sNkJBQUNEO1lBQVVFLEtBQUtEOzRCQUVqRiw2QkFBQ1UseUJBQWdCO1FBQ2Y1QyxXQUFXLENBQUMsa0JBQWtCLEVBQUVPLEtBQUtzQixPQUFPLENBQUMsT0FBTyxNQUFNLENBQUM7UUFDM0Q1QixhQUFhQTtRQUNiYSxPQUFPQTs7QUFJZjtNQUVBLFdBQWVwQiJ9