"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RowLabel", {
    enumerable: true,
    get: function() {
        return RowLabel;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _context = require("../Form/context");
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'row-label';
const RowLabel = ({ className, ...rest })=>{
    return /*#__PURE__*/ _react.default.createElement("span", {
        className: [
            baseClass,
            className
        ].filter(Boolean).join(' '),
        style: {
            pointerEvents: 'none'
        }
    }, /*#__PURE__*/ _react.default.createElement(RowLabelContent, rest));
};
const RowLabelContent = (props)=>{
    const { label, path, rowNumber } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { getDataByPath, getSiblingData } = (0, _context.useWatchForm)();
    const collapsibleData = getSiblingData(path);
    const arrayData = getDataByPath(path);
    const data = arrayData || collapsibleData;
    if ((0, _types.isComponent)(label)) {
        const Label = label;
        return /*#__PURE__*/ _react.default.createElement(Label, {
            data: data,
            index: rowNumber,
            path: path
        });
    }
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, typeof label === 'function' ? label({
        data,
        index: rowNumber,
        path
    }) : (0, _getTranslation.getTranslation)(label, i18n));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL1Jvd0xhYmVsL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCB7IHVzZVdhdGNoRm9ybSB9IGZyb20gJy4uL0Zvcm0vY29udGV4dCdcbmltcG9ydCB7IGlzQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ3Jvdy1sYWJlbCdcblxuZXhwb3J0IGNvbnN0IFJvd0xhYmVsOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e1tiYXNlQ2xhc3MsIGNsYXNzTmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFJvd0xhYmVsQ29udGVudCB7Li4ucmVzdH0gLz5cbiAgICA8L3NwYW4+XG4gIClcbn1cblxuY29uc3QgUm93TGFiZWxDb250ZW50OiBSZWFjdC5GQzxPbWl0PFByb3BzLCAnY2xhc3NOYW1lJz4+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgbGFiZWwsIHBhdGgsIHJvd051bWJlciB9ID0gcHJvcHNcblxuICBjb25zdCB7IGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgeyBnZXREYXRhQnlQYXRoLCBnZXRTaWJsaW5nRGF0YSB9ID0gdXNlV2F0Y2hGb3JtKClcbiAgY29uc3QgY29sbGFwc2libGVEYXRhID0gZ2V0U2libGluZ0RhdGEocGF0aClcbiAgY29uc3QgYXJyYXlEYXRhID0gZ2V0RGF0YUJ5UGF0aChwYXRoKVxuICBjb25zdCBkYXRhID0gYXJyYXlEYXRhIHx8IGNvbGxhcHNpYmxlRGF0YVxuXG4gIGlmIChpc0NvbXBvbmVudChsYWJlbCkpIHtcbiAgICBjb25zdCBMYWJlbCA9IGxhYmVsXG4gICAgcmV0dXJuIDxMYWJlbCBkYXRhPXtkYXRhfSBpbmRleD17cm93TnVtYmVyfSBwYXRoPXtwYXRofSAvPlxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7dHlwZW9mIGxhYmVsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gbGFiZWwoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGluZGV4OiByb3dOdW1iZXIsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgIH0pXG4gICAgICAgIDogZ2V0VHJhbnNsYXRpb24obGFiZWwsIGkxOG4pfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJSb3dMYWJlbCIsImJhc2VDbGFzcyIsImNsYXNzTmFtZSIsInJlc3QiLCJzcGFuIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJzdHlsZSIsInBvaW50ZXJFdmVudHMiLCJSb3dMYWJlbENvbnRlbnQiLCJwcm9wcyIsImxhYmVsIiwicGF0aCIsInJvd051bWJlciIsImkxOG4iLCJ1c2VUcmFuc2xhdGlvbiIsImdldERhdGFCeVBhdGgiLCJnZXRTaWJsaW5nRGF0YSIsInVzZVdhdGNoRm9ybSIsImNvbGxhcHNpYmxlRGF0YSIsImFycmF5RGF0YSIsImRhdGEiLCJpc0NvbXBvbmVudCIsIkxhYmVsIiwiaW5kZXgiLCJSZWFjdCIsIkZyYWdtZW50IiwiZ2V0VHJhbnNsYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBV2FBOzs7ZUFBQUE7Ozs4REFYSzs4QkFDYTtnQ0FJQTt5QkFDRjt1QkFDRDs7Ozs7O0FBRTVCLE1BQU1DLFlBQVk7QUFFWCxNQUFNRCxXQUE0QixDQUFDLEVBQUVFLFNBQVMsRUFBRSxHQUFHQyxNQUFNO0lBQzlELHFCQUNFLDZCQUFDQztRQUNDRixXQUFXO1lBQUNEO1lBQVdDO1NBQVUsQ0FBQ0csTUFBTSxDQUFDQyxTQUFTQyxJQUFJLENBQUM7UUFDdkRDLE9BQU87WUFDTEMsZUFBZTtRQUNqQjtxQkFFQSw2QkFBQ0MsaUJBQW9CUDtBQUczQjtBQUVBLE1BQU1PLGtCQUFzRCxDQUFDQztJQUMzRCxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR0g7SUFFbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWM7SUFDL0IsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsRUFBRSxHQUFHQyxJQUFBQSxxQkFBWTtJQUN0RCxNQUFNQyxrQkFBa0JGLGVBQWVMO0lBQ3ZDLE1BQU1RLFlBQVlKLGNBQWNKO0lBQ2hDLE1BQU1TLE9BQU9ELGFBQWFEO0lBRTFCLElBQUlHLElBQUFBLGtCQUFXLEVBQUNYLFFBQVE7UUFDdEIsTUFBTVksUUFBUVo7UUFDZCxxQkFBTyw2QkFBQ1k7WUFBTUYsTUFBTUE7WUFBTUcsT0FBT1g7WUFBV0QsTUFBTUE7O0lBQ3BEO0lBRUEscUJBQ0UsNkJBQUNhLGNBQUssQ0FBQ0MsUUFBUSxRQUNaLE9BQU9mLFVBQVUsYUFDZEEsTUFBTTtRQUNKVTtRQUNBRyxPQUFPWDtRQUNQRDtJQUNGLEtBQ0FlLElBQUFBLDhCQUFjLEVBQUNoQixPQUFPRztBQUdoQyJ9