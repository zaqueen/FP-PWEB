"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "iterateFields", {
    enumerable: true,
    get: function() {
        return iterateFields;
    }
});
const _types = require("../../../../../fields/config/types");
const _addFieldStatePromise = require("./addFieldStatePromise");
const iterateFields = async ({ id, config, data, fields, fullData, locale, operation, parentPassesCondition, path = '', preferences, state, t, user })=>{
    const promises = [];
    fields.forEach((field)=>{
        const initialData = data;
        if (!(0, _types.fieldIsPresentationalOnly)(field) && !field?.admin?.disabled) {
            const passesCondition = Boolean((field?.admin?.condition ? field.admin.condition(fullData || {}, initialData || {}, {
                user
            }) : true) && parentPassesCondition);
            promises.push((0, _addFieldStatePromise.addFieldStatePromise)({
                id,
                config,
                data,
                field,
                fullData,
                locale,
                operation,
                passesCondition,
                path,
                preferences,
                state,
                t,
                user
            }));
        }
    });
    await Promise.all(promises);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL0Zvcm0vYnVpbGRTdGF0ZUZyb21TY2hlbWEvaXRlcmF0ZUZpZWxkcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFRGdW5jdGlvbiB9IGZyb20gJ2kxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F1dGgnXG5pbXBvcnQgdHlwZSB7IFNhbml0aXplZENvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgRmllbGQgYXMgRmllbGRTY2hlbWEgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBEYXRhLCBGaWVsZHMgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHsgZmllbGRJc1ByZXNlbnRhdGlvbmFsT25seSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgeyBhZGRGaWVsZFN0YXRlUHJvbWlzZSB9IGZyb20gJy4vYWRkRmllbGRTdGF0ZVByb21pc2UnXG5cbnR5cGUgQXJncyA9IHtcbiAgY29uZmlnOiBTYW5pdGl6ZWRDb25maWdcbiAgZGF0YTogRGF0YVxuICBmaWVsZHM6IEZpZWxkU2NoZW1hW11cbiAgZnVsbERhdGE6IERhdGFcbiAgaWQ6IG51bWJlciB8IHN0cmluZ1xuICBsb2NhbGU6IHN0cmluZ1xuICBvcGVyYXRpb246ICdjcmVhdGUnIHwgJ3VwZGF0ZSdcbiAgcGFyZW50UGFzc2VzQ29uZGl0aW9uOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xuICBwcmVmZXJlbmNlczoge1xuICAgIFtrZXk6IHN0cmluZ106IHVua25vd25cbiAgfVxuICBzdGF0ZTogRmllbGRzXG4gIHQ6IFRGdW5jdGlvblxuICB1c2VyOiBVc2VyXG59XG5cbmV4cG9ydCBjb25zdCBpdGVyYXRlRmllbGRzID0gYXN5bmMgKHtcbiAgaWQsXG4gIGNvbmZpZyxcbiAgZGF0YSxcbiAgZmllbGRzLFxuICBmdWxsRGF0YSxcbiAgbG9jYWxlLFxuICBvcGVyYXRpb24sXG4gIHBhcmVudFBhc3Nlc0NvbmRpdGlvbixcbiAgcGF0aCA9ICcnLFxuICBwcmVmZXJlbmNlcyxcbiAgc3RhdGUsXG4gIHQsXG4gIHVzZXIsXG59OiBBcmdzKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHByb21pc2VzID0gW11cbiAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbERhdGEgPSBkYXRhXG4gICAgaWYgKCFmaWVsZElzUHJlc2VudGF0aW9uYWxPbmx5KGZpZWxkKSAmJiAhZmllbGQ/LmFkbWluPy5kaXNhYmxlZCkge1xuICAgICAgY29uc3QgcGFzc2VzQ29uZGl0aW9uID0gQm9vbGVhbihcbiAgICAgICAgKGZpZWxkPy5hZG1pbj8uY29uZGl0aW9uXG4gICAgICAgICAgPyBmaWVsZC5hZG1pbi5jb25kaXRpb24oZnVsbERhdGEgfHwge30sIGluaXRpYWxEYXRhIHx8IHt9LCB7IHVzZXIgfSlcbiAgICAgICAgICA6IHRydWUpICYmIHBhcmVudFBhc3Nlc0NvbmRpdGlvbixcbiAgICAgIClcblxuICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgYWRkRmllbGRTdGF0ZVByb21pc2Uoe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIGZ1bGxEYXRhLFxuICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgICAgcGFzc2VzQ29uZGl0aW9uLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgcHJlZmVyZW5jZXMsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgdCxcbiAgICAgICAgICB1c2VyLFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG4gIH0pXG4gIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxufVxuIl0sIm5hbWVzIjpbIml0ZXJhdGVGaWVsZHMiLCJpZCIsImNvbmZpZyIsImRhdGEiLCJmaWVsZHMiLCJmdWxsRGF0YSIsImxvY2FsZSIsIm9wZXJhdGlvbiIsInBhcmVudFBhc3Nlc0NvbmRpdGlvbiIsInBhdGgiLCJwcmVmZXJlbmNlcyIsInN0YXRlIiwidCIsInVzZXIiLCJwcm9taXNlcyIsImZvckVhY2giLCJmaWVsZCIsImluaXRpYWxEYXRhIiwiZmllbGRJc1ByZXNlbnRhdGlvbmFsT25seSIsImFkbWluIiwiZGlzYWJsZWQiLCJwYXNzZXNDb25kaXRpb24iLCJCb29sZWFuIiwiY29uZGl0aW9uIiwicHVzaCIsImFkZEZpZWxkU3RhdGVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE0QmFBOzs7ZUFBQUE7Ozt1QkFyQjZCO3NDQUNMO0FBb0I5QixNQUFNQSxnQkFBZ0IsT0FBTyxFQUNsQ0MsRUFBRSxFQUNGQyxNQUFNLEVBQ05DLElBQUksRUFDSkMsTUFBTSxFQUNOQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxxQkFBcUIsRUFDckJDLE9BQU8sRUFBRSxFQUNUQyxXQUFXLEVBQ1hDLEtBQUssRUFDTEMsQ0FBQyxFQUNEQyxJQUFJLEVBQ0M7SUFDTCxNQUFNQyxXQUFXLEVBQUU7SUFDbkJWLE9BQU9XLE9BQU8sQ0FBQyxDQUFDQztRQUNkLE1BQU1DLGNBQWNkO1FBQ3BCLElBQUksQ0FBQ2UsSUFBQUEsZ0NBQXlCLEVBQUNGLFVBQVUsQ0FBQ0EsT0FBT0csT0FBT0MsVUFBVTtZQUNoRSxNQUFNQyxrQkFBa0JDLFFBQ3RCLEFBQUNOLENBQUFBLE9BQU9HLE9BQU9JLFlBQ1hQLE1BQU1HLEtBQUssQ0FBQ0ksU0FBUyxDQUFDbEIsWUFBWSxDQUFDLEdBQUdZLGVBQWUsQ0FBQyxHQUFHO2dCQUFFSjtZQUFLLEtBQ2hFLElBQUcsS0FBTUw7WUFHZk0sU0FBU1UsSUFBSSxDQUNYQyxJQUFBQSwwQ0FBb0IsRUFBQztnQkFDbkJ4QjtnQkFDQUM7Z0JBQ0FDO2dCQUNBYTtnQkFDQVg7Z0JBQ0FDO2dCQUNBQztnQkFDQWM7Z0JBQ0FaO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztZQUNGO1FBRUo7SUFDRjtJQUNBLE1BQU1hLFFBQVFDLEdBQUcsQ0FBQ2I7QUFDcEIifQ==