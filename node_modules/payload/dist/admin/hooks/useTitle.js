"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatUseAsTitle: function() {
        return formatUseAsTitle;
    },
    default: function() {
        return _default;
    }
});
const _reacti18next = require("react-i18next");
const _getObjectDotNotation = require("../../utilities/getObjectDotNotation");
const _getTranslation = require("../../utilities/getTranslation");
const _context = require("../components/forms/Form/context");
const _Config = require("../components/utilities/Config");
const _formatDate = require("../utilities/formatDate");
const formatUseAsTitle = (args)=>{
    const { collection: { admin: { useAsTitle } }, collection, config: { admin: { dateFormat: dateFormatFromConfig } }, doc, field: fieldFromProps, i18n } = args;
    if (!fieldFromProps && !doc) {
        return '';
    }
    const field = fieldFromProps || (0, _getObjectDotNotation.getObjectDotNotation)(doc, collection.admin.useAsTitle);
    let title = typeof field === 'string' ? field : (field?.value);
    const fieldConfig = collection?.fields?.find((f)=>'name' in f && f?.name === useAsTitle);
    const isDate = fieldConfig?.type === 'date';
    if (title && isDate) {
        const dateFormat = fieldConfig?.admin?.date?.displayFormat || dateFormatFromConfig;
        title = (0, _formatDate.formatDate)(title, dateFormat, i18n?.language);
    }
    return title;
};
// Keep `collection` optional so that component do need to worry about conditionally rendering hooks
// This is so that components which take both `collection` and `global` props can use this hook
const useTitle = (args)=>{
    const { collection, global } = args;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const config = (0, _Config.useConfig)();
    let title = '';
    const field = (0, _context.useFormFields)(([formFields])=>{
        if (!collection) return;
        return formFields[collection?.admin?.useAsTitle];
    });
    if (collection) {
        title = formatUseAsTitle({
            collection,
            config,
            field,
            i18n
        });
    }
    if (global) {
        title = (0, _getTranslation.getTranslation)(global.label, i18n) || global.slug;
    }
    return title;
};
const _default = useTitle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZG1pbi9ob29rcy91c2VUaXRsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgaTE4bmV4dCBmcm9tICdpMThuZXh0J1xuXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRHbG9iYWxDb25maWcgfSBmcm9tICcuLi8uLi9nbG9iYWxzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgRm9ybUZpZWxkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mb3Jtcy9Gb3JtL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRPYmplY3REb3ROb3RhdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9nZXRPYmplY3REb3ROb3RhdGlvbidcbmltcG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuaW1wb3J0IHsgdXNlRm9ybUZpZWxkcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZm9ybXMvRm9ybS9jb250ZXh0J1xuaW1wb3J0IHsgdXNlQ29uZmlnIH0gZnJvbSAnLi4vY29tcG9uZW50cy91dGlsaXRpZXMvQ29uZmlnJ1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4uL3V0aWxpdGllcy9mb3JtYXREYXRlJ1xuXG4vLyBlaXRoZXIgc2VuZCB0aGUgYHVzZUFzVGl0bGVgIGZpZWxkIGl0c2VsZlxuLy8gb3IgYW4gb2JqZWN0IHRvIGR5bmFtaWNhbGx5IGV4dHJhY3QgdGhlIGB1c2VBc1RpdGxlYCBmaWVsZCBmcm9tXG5leHBvcnQgY29uc3QgZm9ybWF0VXNlQXNUaXRsZSA9IChhcmdzOiB7XG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgY29uZmlnOiBTYW5pdGl6ZWRDb25maWdcbiAgZG9jPzogUmVjb3JkPHN0cmluZywgYW55PlxuICBmaWVsZD86IEZvcm1GaWVsZFxuICBpMThuOiB0eXBlb2YgaTE4bmV4dFxufSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiB7XG4gICAgICBhZG1pbjogeyB1c2VBc1RpdGxlIH0sXG4gICAgfSxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvbmZpZzoge1xuICAgICAgYWRtaW46IHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdEZyb21Db25maWcgfSxcbiAgICB9LFxuICAgIGRvYyxcbiAgICBmaWVsZDogZmllbGRGcm9tUHJvcHMsXG4gICAgaTE4bixcbiAgfSA9IGFyZ3NcblxuICBpZiAoIWZpZWxkRnJvbVByb3BzICYmICFkb2MpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGNvbnN0IGZpZWxkID0gZmllbGRGcm9tUHJvcHMgfHwgZ2V0T2JqZWN0RG90Tm90YXRpb248Rm9ybUZpZWxkPihkb2MsIGNvbGxlY3Rpb24uYWRtaW4udXNlQXNUaXRsZSlcblxuICBsZXQgdGl0bGUgPSB0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnID8gZmllbGQgOiAoZmllbGQ/LnZhbHVlIGFzIHN0cmluZylcblxuICBjb25zdCBmaWVsZENvbmZpZyA9IGNvbGxlY3Rpb24/LmZpZWxkcz8uZmluZCgoZikgPT4gJ25hbWUnIGluIGYgJiYgZj8ubmFtZSA9PT0gdXNlQXNUaXRsZSlcbiAgY29uc3QgaXNEYXRlID0gZmllbGRDb25maWc/LnR5cGUgPT09ICdkYXRlJ1xuXG4gIGlmICh0aXRsZSAmJiBpc0RhdGUpIHtcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gZmllbGRDb25maWc/LmFkbWluPy5kYXRlPy5kaXNwbGF5Rm9ybWF0IHx8IGRhdGVGb3JtYXRGcm9tQ29uZmlnXG4gICAgdGl0bGUgPSBmb3JtYXREYXRlKHRpdGxlLCBkYXRlRm9ybWF0LCBpMThuPy5sYW5ndWFnZSlcbiAgfVxuXG4gIHJldHVybiB0aXRsZVxufVxuXG4vLyBLZWVwIGBjb2xsZWN0aW9uYCBvcHRpb25hbCBzbyB0aGF0IGNvbXBvbmVudCBkbyBuZWVkIHRvIHdvcnJ5IGFib3V0IGNvbmRpdGlvbmFsbHkgcmVuZGVyaW5nIGhvb2tzXG4vLyBUaGlzIGlzIHNvIHRoYXQgY29tcG9uZW50cyB3aGljaCB0YWtlIGJvdGggYGNvbGxlY3Rpb25gIGFuZCBgZ2xvYmFsYCBwcm9wcyBjYW4gdXNlIHRoaXMgaG9va1xuY29uc3QgdXNlVGl0bGUgPSAoYXJnczoge1xuICBjb2xsZWN0aW9uPzogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZ1xuICBnbG9iYWw/OiBTYW5pdGl6ZWRHbG9iYWxDb25maWdcbn0pOiBzdHJpbmcgPT4ge1xuICBjb25zdCB7IGNvbGxlY3Rpb24sIGdsb2JhbCB9ID0gYXJnc1xuICBjb25zdCB7IGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgY29uZmlnID0gdXNlQ29uZmlnKClcblxuICBsZXQgdGl0bGU6IHN0cmluZyA9ICcnXG5cbiAgY29uc3QgZmllbGQgPSB1c2VGb3JtRmllbGRzKChbZm9ybUZpZWxkc10pID0+IHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHJldHVyblxuICAgIHJldHVybiBmb3JtRmllbGRzW2NvbGxlY3Rpb24/LmFkbWluPy51c2VBc1RpdGxlXVxuICB9KVxuXG4gIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgdGl0bGUgPSBmb3JtYXRVc2VBc1RpdGxlKHsgY29sbGVjdGlvbiwgY29uZmlnLCBmaWVsZCwgaTE4biB9KVxuICB9XG5cbiAgaWYgKGdsb2JhbCkge1xuICAgIHRpdGxlID0gZ2V0VHJhbnNsYXRpb24oZ2xvYmFsLmxhYmVsLCBpMThuKSB8fCBnbG9iYWwuc2x1Z1xuICB9XG5cbiAgcmV0dXJuIHRpdGxlXG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVRpdGxlXG4iXSwibmFtZXMiOlsiZm9ybWF0VXNlQXNUaXRsZSIsImFyZ3MiLCJjb2xsZWN0aW9uIiwiYWRtaW4iLCJ1c2VBc1RpdGxlIiwiY29uZmlnIiwiZGF0ZUZvcm1hdCIsImRhdGVGb3JtYXRGcm9tQ29uZmlnIiwiZG9jIiwiZmllbGQiLCJmaWVsZEZyb21Qcm9wcyIsImkxOG4iLCJnZXRPYmplY3REb3ROb3RhdGlvbiIsInRpdGxlIiwidmFsdWUiLCJmaWVsZENvbmZpZyIsImZpZWxkcyIsImZpbmQiLCJmIiwibmFtZSIsImlzRGF0ZSIsInR5cGUiLCJkYXRlIiwiZGlzcGxheUZvcm1hdCIsImZvcm1hdERhdGUiLCJsYW5ndWFnZSIsInVzZVRpdGxlIiwiZ2xvYmFsIiwidXNlVHJhbnNsYXRpb24iLCJ1c2VDb25maWciLCJ1c2VGb3JtRmllbGRzIiwiZm9ybUZpZWxkcyIsImdldFRyYW5zbGF0aW9uIiwibGFiZWwiLCJzbHVnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWlCYUEsZ0JBQWdCO2VBQWhCQTs7SUFtRWIsT0FBdUI7ZUFBdkI7Ozs4QkFsRitCO3NDQU9NO2dDQUNOO3lCQUNEO3dCQUNKOzRCQUNDO0FBSXBCLE1BQU1BLG1CQUFtQixDQUFDQztJQU8vQixNQUFNLEVBQ0pDLFlBQVksRUFDVkMsT0FBTyxFQUFFQyxVQUFVLEVBQUUsRUFDdEIsRUFDREYsVUFBVSxFQUNWRyxRQUFRLEVBQ05GLE9BQU8sRUFBRUcsWUFBWUMsb0JBQW9CLEVBQUUsRUFDNUMsRUFDREMsR0FBRyxFQUNIQyxPQUFPQyxjQUFjLEVBQ3JCQyxJQUFJLEVBQ0wsR0FBR1Y7SUFFSixJQUFJLENBQUNTLGtCQUFrQixDQUFDRixLQUFLO1FBQzNCLE9BQU87SUFDVDtJQUVBLE1BQU1DLFFBQVFDLGtCQUFrQkUsSUFBQUEsMENBQW9CLEVBQVlKLEtBQUtOLFdBQVdDLEtBQUssQ0FBQ0MsVUFBVTtJQUVoRyxJQUFJUyxRQUFRLE9BQU9KLFVBQVUsV0FBV0EsUUFBUSxDQUFDQSxPQUFPSyxLQUFlO0lBRXZFLE1BQU1DLGNBQWNiLFlBQVljLFFBQVFDLEtBQUssQ0FBQ0MsSUFBTSxVQUFVQSxLQUFLQSxHQUFHQyxTQUFTZjtJQUMvRSxNQUFNZ0IsU0FBU0wsYUFBYU0sU0FBUztJQUVyQyxJQUFJUixTQUFTTyxRQUFRO1FBQ25CLE1BQU1kLGFBQWFTLGFBQWFaLE9BQU9tQixNQUFNQyxpQkFBaUJoQjtRQUM5RE0sUUFBUVcsSUFBQUEsc0JBQVUsRUFBQ1gsT0FBT1AsWUFBWUssTUFBTWM7SUFDOUM7SUFFQSxPQUFPWjtBQUNUO0FBRUEsb0dBQW9HO0FBQ3BHLCtGQUErRjtBQUMvRixNQUFNYSxXQUFXLENBQUN6QjtJQUloQixNQUFNLEVBQUVDLFVBQVUsRUFBRXlCLE1BQU0sRUFBRSxHQUFHMUI7SUFDL0IsTUFBTSxFQUFFVSxJQUFJLEVBQUUsR0FBR2lCLElBQUFBLDRCQUFjO0lBQy9CLE1BQU12QixTQUFTd0IsSUFBQUEsaUJBQVM7SUFFeEIsSUFBSWhCLFFBQWdCO0lBRXBCLE1BQU1KLFFBQVFxQixJQUFBQSxzQkFBYSxFQUFDLENBQUMsQ0FBQ0MsV0FBVztRQUN2QyxJQUFJLENBQUM3QixZQUFZO1FBQ2pCLE9BQU82QixVQUFVLENBQUM3QixZQUFZQyxPQUFPQyxXQUFXO0lBQ2xEO0lBRUEsSUFBSUYsWUFBWTtRQUNkVyxRQUFRYixpQkFBaUI7WUFBRUU7WUFBWUc7WUFBUUk7WUFBT0U7UUFBSztJQUM3RDtJQUVBLElBQUlnQixRQUFRO1FBQ1ZkLFFBQVFtQixJQUFBQSw4QkFBYyxFQUFDTCxPQUFPTSxLQUFLLEVBQUV0QixTQUFTZ0IsT0FBT08sSUFBSTtJQUMzRDtJQUVBLE9BQU9yQjtBQUNUO01BRUEsV0FBZWEifQ==