"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
const _extractTranslations = require("../../translations/extractTranslations");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const labels = (0, _extractTranslations.extractTranslations)([
    'authentication:enableAPIKey',
    'authentication:apiKey'
]);
const encryptKey = ({ req, value })=>value ? req.payload.encrypt(value) : undefined;
const decryptKey = ({ req, value })=>value ? req.payload.decrypt(value) : undefined;
const _default = [
    {
        name: 'enableAPIKey',
        admin: {
            components: {
                Field: ()=>null
            }
        },
        defaultValue: false,
        label: labels['authentication:enableAPIKey'],
        type: 'checkbox'
    },
    {
        name: 'apiKey',
        admin: {
            components: {
                Field: ()=>null
            }
        },
        hooks: {
            afterRead: [
                decryptKey
            ],
            beforeChange: [
                encryptKey
            ]
        },
        label: labels['authentication:apiKey'],
        type: 'text'
    },
    {
        name: 'apiKeyIndex',
        admin: {
            disabled: true
        },
        hidden: true,
        hooks: {
            beforeValidate: [
                async ({ data, req, value })=>{
                    if (data.apiKey) {
                        return _crypto.default.createHmac('sha1', req.payload.secret).update(data.apiKey).digest('hex');
                    }
                    if (data.enableAPIKey === false) {
                        return null;
                    }
                    return value;
                }
            ]
        },
        type: 'text'
    }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdXRoL2Jhc2VGaWVsZHMvYXBpS2V5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJ1xuXG5pbXBvcnQgdHlwZSB7IEZpZWxkLCBGaWVsZEhvb2sgfSBmcm9tICcuLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuXG5pbXBvcnQgeyBleHRyYWN0VHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vLi4vdHJhbnNsYXRpb25zL2V4dHJhY3RUcmFuc2xhdGlvbnMnXG5cbmNvbnN0IGxhYmVscyA9IGV4dHJhY3RUcmFuc2xhdGlvbnMoWydhdXRoZW50aWNhdGlvbjplbmFibGVBUElLZXknLCAnYXV0aGVudGljYXRpb246YXBpS2V5J10pXG5cbmNvbnN0IGVuY3J5cHRLZXk6IEZpZWxkSG9vayA9ICh7IHJlcSwgdmFsdWUgfSkgPT5cbiAgdmFsdWUgPyByZXEucGF5bG9hZC5lbmNyeXB0KHZhbHVlIGFzIHN0cmluZykgOiB1bmRlZmluZWRcbmNvbnN0IGRlY3J5cHRLZXk6IEZpZWxkSG9vayA9ICh7IHJlcSwgdmFsdWUgfSkgPT5cbiAgdmFsdWUgPyByZXEucGF5bG9hZC5kZWNyeXB0KHZhbHVlIGFzIHN0cmluZykgOiB1bmRlZmluZWRcblxuZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgbmFtZTogJ2VuYWJsZUFQSUtleScsXG4gICAgYWRtaW46IHtcbiAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgRmllbGQ6ICgpID0+IG51bGwsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICBsYWJlbDogbGFiZWxzWydhdXRoZW50aWNhdGlvbjplbmFibGVBUElLZXknXSxcbiAgICB0eXBlOiAnY2hlY2tib3gnLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ2FwaUtleScsXG4gICAgYWRtaW46IHtcbiAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgRmllbGQ6ICgpID0+IG51bGwsXG4gICAgICB9LFxuICAgIH0sXG4gICAgaG9va3M6IHtcbiAgICAgIGFmdGVyUmVhZDogW2RlY3J5cHRLZXldLFxuICAgICAgYmVmb3JlQ2hhbmdlOiBbZW5jcnlwdEtleV0sXG4gICAgfSxcbiAgICBsYWJlbDogbGFiZWxzWydhdXRoZW50aWNhdGlvbjphcGlLZXknXSxcbiAgICB0eXBlOiAndGV4dCcsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnYXBpS2V5SW5kZXgnLFxuICAgIGFkbWluOiB7XG4gICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICB9LFxuICAgIGhpZGRlbjogdHJ1ZSxcbiAgICBob29rczoge1xuICAgICAgYmVmb3JlVmFsaWRhdGU6IFtcbiAgICAgICAgYXN5bmMgKHsgZGF0YSwgcmVxLCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgaWYgKGRhdGEuYXBpS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXG4gICAgICAgICAgICAgIC5jcmVhdGVIbWFjKCdzaGExJywgcmVxLnBheWxvYWQuc2VjcmV0KVxuICAgICAgICAgICAgICAudXBkYXRlKGRhdGEuYXBpS2V5IGFzIHN0cmluZylcbiAgICAgICAgICAgICAgLmRpZ2VzdCgnaGV4JylcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGEuZW5hYmxlQVBJS2V5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgdHlwZTogJ3RleHQnLFxuICB9LFxuXSBhcyBGaWVsZFtdXG4iXSwibmFtZXMiOlsibGFiZWxzIiwiZXh0cmFjdFRyYW5zbGF0aW9ucyIsImVuY3J5cHRLZXkiLCJyZXEiLCJ2YWx1ZSIsInBheWxvYWQiLCJlbmNyeXB0IiwidW5kZWZpbmVkIiwiZGVjcnlwdEtleSIsImRlY3J5cHQiLCJuYW1lIiwiYWRtaW4iLCJjb21wb25lbnRzIiwiRmllbGQiLCJkZWZhdWx0VmFsdWUiLCJsYWJlbCIsInR5cGUiLCJob29rcyIsImFmdGVyUmVhZCIsImJlZm9yZUNoYW5nZSIsImRpc2FibGVkIiwiaGlkZGVuIiwiYmVmb3JlVmFsaWRhdGUiLCJkYXRhIiwiYXBpS2V5IiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInNlY3JldCIsInVwZGF0ZSIsImRpZ2VzdCIsImVuYWJsZUFQSUtleSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFhQTs7O2VBQUE7OzsrREFibUI7cUNBSWlCOzs7Ozs7QUFFcEMsTUFBTUEsU0FBU0MsSUFBQUEsd0NBQW1CLEVBQUM7SUFBQztJQUErQjtDQUF3QjtBQUUzRixNQUFNQyxhQUF3QixDQUFDLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFLEdBQzNDQSxRQUFRRCxJQUFJRSxPQUFPLENBQUNDLE9BQU8sQ0FBQ0YsU0FBbUJHO0FBQ2pELE1BQU1DLGFBQXdCLENBQUMsRUFBRUwsR0FBRyxFQUFFQyxLQUFLLEVBQUUsR0FDM0NBLFFBQVFELElBQUlFLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDTCxTQUFtQkc7TUFFakQsV0FBZTtJQUNiO1FBQ0VHLE1BQU07UUFDTkMsT0FBTztZQUNMQyxZQUFZO2dCQUNWQyxPQUFPLElBQU07WUFDZjtRQUNGO1FBQ0FDLGNBQWM7UUFDZEMsT0FBT2YsTUFBTSxDQUFDLDhCQUE4QjtRQUM1Q2dCLE1BQU07SUFDUjtJQUNBO1FBQ0VOLE1BQU07UUFDTkMsT0FBTztZQUNMQyxZQUFZO2dCQUNWQyxPQUFPLElBQU07WUFDZjtRQUNGO1FBQ0FJLE9BQU87WUFDTEMsV0FBVztnQkFBQ1Y7YUFBVztZQUN2QlcsY0FBYztnQkFBQ2pCO2FBQVc7UUFDNUI7UUFDQWEsT0FBT2YsTUFBTSxDQUFDLHdCQUF3QjtRQUN0Q2dCLE1BQU07SUFDUjtJQUNBO1FBQ0VOLE1BQU07UUFDTkMsT0FBTztZQUNMUyxVQUFVO1FBQ1o7UUFDQUMsUUFBUTtRQUNSSixPQUFPO1lBQ0xLLGdCQUFnQjtnQkFDZCxPQUFPLEVBQUVDLElBQUksRUFBRXBCLEdBQUcsRUFBRUMsS0FBSyxFQUFFO29CQUN6QixJQUFJbUIsS0FBS0MsTUFBTSxFQUFFO3dCQUNmLE9BQU9DLGVBQU0sQ0FDVkMsVUFBVSxDQUFDLFFBQVF2QixJQUFJRSxPQUFPLENBQUNzQixNQUFNLEVBQ3JDQyxNQUFNLENBQUNMLEtBQUtDLE1BQU0sRUFDbEJLLE1BQU0sQ0FBQztvQkFDWjtvQkFDQSxJQUFJTixLQUFLTyxZQUFZLEtBQUssT0FBTzt3QkFDL0IsT0FBTztvQkFDVDtvQkFDQSxPQUFPMUI7Z0JBQ1Q7YUFDRDtRQUNIO1FBQ0FZLE1BQU07SUFDUjtDQUNEIn0=