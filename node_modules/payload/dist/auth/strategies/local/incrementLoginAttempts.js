"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "incrementLoginAttempts", {
    enumerable: true,
    get: function() {
        return incrementLoginAttempts;
    }
});
const incrementLoginAttempts = async ({ collection, doc, payload, req })=>{
    const { auth: { lockTime, maxLoginAttempts } } = collection;
    if ('lockUntil' in doc && typeof doc.lockUntil === 'string') {
        const lockUntil = Math.floor(new Date(doc.lockUntil).getTime() / 1000);
        // Expired lock, restart count at 1
        if (lockUntil < Date.now()) {
            await payload.update({
                id: doc.id,
                collection: collection.slug,
                data: {
                    lockUntil: null,
                    loginAttempts: 1
                },
                req
            });
        }
        return;
    }
    const data = {
        loginAttempts: Number(doc.loginAttempts) + 1
    };
    // Lock the account if at max attempts and not already locked
    if (typeof doc.loginAttempts === 'number' && doc.loginAttempts + 1 >= maxLoginAttempts) {
        const lockUntil = new Date(Date.now() + lockTime);
        data.lockUntil = lockUntil;
    }
    await payload.update({
        id: doc.id,
        collection: collection.slug,
        data
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL3N0cmF0ZWdpZXMvbG9jYWwvaW5jcmVtZW50TG9naW5BdHRlbXB0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLidcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZywgVHlwZVdpdGhJRCB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuXG50eXBlIEFyZ3MgPSB7XG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgZG9jOiBUeXBlV2l0aElEICYgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgcGF5bG9hZDogUGF5bG9hZFxuICByZXE6IFBheWxvYWRSZXF1ZXN0XG59XG5cbmV4cG9ydCBjb25zdCBpbmNyZW1lbnRMb2dpbkF0dGVtcHRzID0gYXN5bmMgKHtcbiAgY29sbGVjdGlvbixcbiAgZG9jLFxuICBwYXlsb2FkLFxuICByZXEsXG59OiBBcmdzKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHtcbiAgICBhdXRoOiB7IGxvY2tUaW1lLCBtYXhMb2dpbkF0dGVtcHRzIH0sXG4gIH0gPSBjb2xsZWN0aW9uXG5cbiAgaWYgKCdsb2NrVW50aWwnIGluIGRvYyAmJiB0eXBlb2YgZG9jLmxvY2tVbnRpbCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBsb2NrVW50aWwgPSBNYXRoLmZsb29yKG5ldyBEYXRlKGRvYy5sb2NrVW50aWwpLmdldFRpbWUoKSAvIDEwMDApXG5cbiAgICAvLyBFeHBpcmVkIGxvY2ssIHJlc3RhcnQgY291bnQgYXQgMVxuICAgIGlmIChsb2NrVW50aWwgPCBEYXRlLm5vdygpKSB7XG4gICAgICBhd2FpdCBwYXlsb2FkLnVwZGF0ZSh7XG4gICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGxvY2tVbnRpbDogbnVsbCxcbiAgICAgICAgICBsb2dpbkF0dGVtcHRzOiAxLFxuICAgICAgICB9LFxuICAgICAgICByZXEsXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7XG4gICAgbG9naW5BdHRlbXB0czogTnVtYmVyKGRvYy5sb2dpbkF0dGVtcHRzKSArIDEsXG4gIH1cblxuICAvLyBMb2NrIHRoZSBhY2NvdW50IGlmIGF0IG1heCBhdHRlbXB0cyBhbmQgbm90IGFscmVhZHkgbG9ja2VkXG4gIGlmICh0eXBlb2YgZG9jLmxvZ2luQXR0ZW1wdHMgPT09ICdudW1iZXInICYmIGRvYy5sb2dpbkF0dGVtcHRzICsgMSA+PSBtYXhMb2dpbkF0dGVtcHRzKSB7XG4gICAgY29uc3QgbG9ja1VudGlsID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIGxvY2tUaW1lKVxuICAgIGRhdGEubG9ja1VudGlsID0gbG9ja1VudGlsXG4gIH1cblxuICBhd2FpdCBwYXlsb2FkLnVwZGF0ZSh7XG4gICAgaWQ6IGRvYy5pZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLnNsdWcsXG4gICAgZGF0YSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJpbmNyZW1lbnRMb2dpbkF0dGVtcHRzIiwiY29sbGVjdGlvbiIsImRvYyIsInBheWxvYWQiLCJyZXEiLCJhdXRoIiwibG9ja1RpbWUiLCJtYXhMb2dpbkF0dGVtcHRzIiwibG9ja1VudGlsIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsImdldFRpbWUiLCJub3ciLCJ1cGRhdGUiLCJpZCIsInNsdWciLCJkYXRhIiwibG9naW5BdHRlbXB0cyIsIk51bWJlciJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFXYUE7OztlQUFBQTs7O0FBQU4sTUFBTUEseUJBQXlCLE9BQU8sRUFDM0NDLFVBQVUsRUFDVkMsR0FBRyxFQUNIQyxPQUFPLEVBQ1BDLEdBQUcsRUFDRTtJQUNMLE1BQU0sRUFDSkMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLGdCQUFnQixFQUFFLEVBQ3JDLEdBQUdOO0lBRUosSUFBSSxlQUFlQyxPQUFPLE9BQU9BLElBQUlNLFNBQVMsS0FBSyxVQUFVO1FBQzNELE1BQU1BLFlBQVlDLEtBQUtDLEtBQUssQ0FBQyxJQUFJQyxLQUFLVCxJQUFJTSxTQUFTLEVBQUVJLE9BQU8sS0FBSztRQUVqRSxtQ0FBbUM7UUFDbkMsSUFBSUosWUFBWUcsS0FBS0UsR0FBRyxJQUFJO1lBQzFCLE1BQU1WLFFBQVFXLE1BQU0sQ0FBQztnQkFDbkJDLElBQUliLElBQUlhLEVBQUU7Z0JBQ1ZkLFlBQVlBLFdBQVdlLElBQUk7Z0JBQzNCQyxNQUFNO29CQUNKVCxXQUFXO29CQUNYVSxlQUFlO2dCQUNqQjtnQkFDQWQ7WUFDRjtRQUNGO1FBRUE7SUFDRjtJQUVBLE1BQU1hLE9BQWdDO1FBQ3BDQyxlQUFlQyxPQUFPakIsSUFBSWdCLGFBQWEsSUFBSTtJQUM3QztJQUVBLDZEQUE2RDtJQUM3RCxJQUFJLE9BQU9oQixJQUFJZ0IsYUFBYSxLQUFLLFlBQVloQixJQUFJZ0IsYUFBYSxHQUFHLEtBQUtYLGtCQUFrQjtRQUN0RixNQUFNQyxZQUFZLElBQUlHLEtBQUtBLEtBQUtFLEdBQUcsS0FBS1A7UUFDeENXLEtBQUtULFNBQVMsR0FBR0E7SUFDbkI7SUFFQSxNQUFNTCxRQUFRVyxNQUFNLENBQUM7UUFDbkJDLElBQUliLElBQUlhLEVBQUU7UUFDVmQsWUFBWUEsV0FBV2UsSUFBSTtRQUMzQkM7SUFDRjtBQUNGIn0=