"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
const _url = /*#__PURE__*/ _interop_require_default(require("url"));
const _utils = require("../../collections/operations/utils");
const _errors = require("../../errors");
const _getCookieExpiration = /*#__PURE__*/ _interop_require_default(require("../../utilities/getCookieExpiration"));
const _getFieldsToSign = require("./getFieldsToSign");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function refresh(incomingArgs) {
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        args = await hook({
            args,
            collection: args.collection?.config,
            context: args.req.context,
            operation: 'refresh'
        }) || args;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Refresh
    // /////////////////////////////////////
    const { collection: { config: collectionConfig }, req: { payload: { config, secret } } } = args;
    if (typeof args.token !== 'string' || !args.req.user) throw new _errors.Forbidden(args.req.t);
    const parsedURL = _url.default.parse(args.req.url);
    const isGraphQL = parsedURL.pathname === config.routes.graphQL;
    const user = await args.req.payload.findByID({
        id: args.req.user.id,
        collection: args.req.user.collection,
        depth: isGraphQL ? 0 : args.collection.config.auth.depth,
        req: args.req
    });
    const fieldsToSign = (0, _getFieldsToSign.getFieldsToSign)({
        collectionConfig,
        email: user?.email,
        user: args?.req?.user
    });
    const refreshedToken = _jsonwebtoken.default.sign(fieldsToSign, secret, {
        expiresIn: collectionConfig.auth.tokenExpiration
    });
    const exp = _jsonwebtoken.default.decode(refreshedToken).exp;
    if (args.res) {
        const cookieOptions = {
            domain: undefined,
            expires: (0, _getCookieExpiration.default)(collectionConfig.auth.tokenExpiration),
            httpOnly: true,
            path: '/',
            sameSite: collectionConfig.auth.cookies.sameSite,
            secure: collectionConfig.auth.cookies.secure
        };
        if (collectionConfig.auth.cookies.domain) cookieOptions.domain = collectionConfig.auth.cookies.domain;
        args.res.cookie(`${config.cookiePrefix}-token`, refreshedToken, cookieOptions);
    }
    let result = {
        exp,
        refreshedToken,
        user
    };
    // /////////////////////////////////////
    // After Refresh - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterRefresh.reduce(async (priorHook, hook)=>{
        await priorHook;
        result = await hook({
            collection: args.collection?.config,
            context: args.req.context,
            exp,
            req: args.req,
            res: args.res,
            token: refreshedToken
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // afterOperation - Collection
    // /////////////////////////////////////
    result = await (0, _utils.buildAfterOperation)({
        args,
        collection: args.collection?.config,
        operation: 'refresh',
        result
    });
    // /////////////////////////////////////
    // Return results
    // /////////////////////////////////////
    if (collectionConfig.auth.removeTokenFromResponses) {
        delete result.refreshedToken;
    }
    return result;
}
const _default = refresh;

//# sourceMappingURL=data:application/json;base64,