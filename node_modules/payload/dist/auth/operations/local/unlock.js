"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _unlock = /*#__PURE__*/ _interop_require_default(require("../unlock"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localUnlock(payload, options) {
    const { collection: collectionSlug, data, overrideAccess = true, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Unlock Operation.`);
    }
    req.payload = payload;
    req.payloadAPI = req.payloadAPI || 'local';
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _unlock.default)({
        collection,
        data,
        overrideAccess,
        req
    });
}
const _default = localUnlock;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvdW5sb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IHVubG9jayBmcm9tICcuLi91bmxvY2snXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICBkYXRhOiB7XG4gICAgZW1haWxcbiAgfVxuICBvdmVycmlkZUFjY2VzczogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2NhbFVubG9jazxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBkYXRhLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgfSA9IG9wdGlvbnNcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxKVxuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoY29sbGVjdGlvblNsdWcpfSBjYW4ndCBiZSBmb3VuZC4gVW5sb2NrIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIHJlcS5wYXlsb2FkID0gcGF5bG9hZFxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLmkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIHVubG9jayh7XG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxVbmxvY2tcbiJdLCJuYW1lcyI6WyJsb2NhbFVubG9jayIsInBheWxvYWQiLCJvcHRpb25zIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiZGF0YSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsImNvbmZpZyIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJ1bmxvY2siXSwibWFwcGluZ3MiOiI7Ozs7K0JBc0RBOzs7ZUFBQTs7OzRCQWxEOEI7d0JBQ0w7bUNBQ1M7c0JBQ1Q7K0RBQ047Ozs7OztBQVduQixlQUFlQSxZQUNiQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxJQUFJLEVBQ0pDLGlCQUFpQixJQUFJLEVBQ3JCQyxNQUFNLENBQUMsQ0FBbUIsRUFDM0IsR0FBR0w7SUFDSk0sSUFBQUEsb0NBQWlCLEVBQUNEO0lBRWxCLE1BQU1KLGFBQWFGLFFBQVFRLFdBQVcsQ0FBQ0wsZUFBZTtJQUV0RCxJQUFJLENBQUNELFlBQVk7UUFDZixNQUFNLElBQUlPLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU9QLGdCQUFnQixrQ0FBa0MsQ0FBQztJQUUxRjtJQUVBRyxJQUFJTixPQUFPLEdBQUdBO0lBQ2RNLElBQUlLLFVBQVUsR0FBR0wsSUFBSUssVUFBVSxJQUFJO0lBQ25DTCxJQUFJTSxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQ2IsUUFBUWMsTUFBTSxDQUFDRixJQUFJO0lBRXZDLElBQUksQ0FBQ04sSUFBSVMsQ0FBQyxFQUFFVCxJQUFJUyxDQUFDLEdBQUdULElBQUlNLElBQUksQ0FBQ0csQ0FBQztJQUM5QixJQUFJLENBQUNULElBQUlVLGlCQUFpQixFQUFFVixJQUFJVSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ1g7SUFFbEUsT0FBT1ksSUFBQUEsZUFBTSxFQUFDO1FBQ1poQjtRQUNBRTtRQUNBQztRQUNBQztJQUNGO0FBQ0Y7TUFFQSxXQUFlUCJ9