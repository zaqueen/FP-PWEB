"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _forgotPassword = /*#__PURE__*/ _interop_require_default(require("../forgotPassword"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localForgotPassword(payload, options) {
    const { collection: collectionSlug, data, disableEmail, expiration, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Forgot Password Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _forgotPassword.default)({
        collection,
        data,
        disableEmail,
        expiration,
        req
    });
}
const _default = localForgotPassword;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvZm9yZ290UGFzc3dvcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tICcuLi9mb3Jnb3RQYXNzd29yZCdcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZm9yZ290UGFzc3dvcmQgZnJvbSAnLi4vZm9yZ290UGFzc3dvcmQnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICBkYXRhOiB7XG4gICAgZW1haWw6IHN0cmluZ1xuICB9XG4gIGRpc2FibGVFbWFpbD86IGJvb2xlYW5cbiAgZXhwaXJhdGlvbj86IG51bWJlclxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2NhbEZvcmdvdFBhc3N3b3JkPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFJlc3VsdD4ge1xuICBjb25zdCB7XG4gICAgY29sbGVjdGlvbjogY29sbGVjdGlvblNsdWcsXG4gICAgZGF0YSxcbiAgICBkaXNhYmxlRW1haWwsXG4gICAgZXhwaXJhdGlvbixcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgfSA9IG9wdGlvbnNcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxKVxuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoXG4gICAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgKX0gY2FuJ3QgYmUgZm91bmQuIEZvcmdvdCBQYXNzd29yZCBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmb3Jnb3RQYXNzd29yZCh7XG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIGRpc2FibGVFbWFpbCxcbiAgICBleHBpcmF0aW9uLFxuICAgIHJlcSxcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxGb3Jnb3RQYXNzd29yZFxuIl0sIm5hbWVzIjpbImxvY2FsRm9yZ290UGFzc3dvcmQiLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImRhdGEiLCJkaXNhYmxlRW1haWwiLCJleHBpcmF0aW9uIiwicmVxIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsImNvbmZpZyIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmb3Jnb3RQYXNzd29yZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE0REE7OztlQUFBOzs7NEJBdkQ4Qjt3QkFDTDttQ0FDUztzQkFDVDt1RUFDRTs7Ozs7O0FBWTNCLGVBQWVBLG9CQUNiQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxJQUFJLEVBQ0pDLFlBQVksRUFDWkMsVUFBVSxFQUNWQyxNQUFNLENBQUMsQ0FBbUIsRUFDM0IsR0FBR047SUFDSk8sSUFBQUEsb0NBQWlCLEVBQUNEO0lBRWxCLE1BQU1MLGFBQWFGLFFBQVFTLFdBQVcsQ0FBQ04sZUFBZTtJQUV0RCxJQUFJLENBQUNELFlBQVk7UUFDZixNQUFNLElBQUlRLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQzFCUixnQkFDQSwyQ0FBMkMsQ0FBQztJQUVsRDtJQUVBSSxJQUFJSyxVQUFVLEdBQUdMLElBQUlLLFVBQVUsSUFBSTtJQUNuQ0wsSUFBSVAsT0FBTyxHQUFHQTtJQUNkTyxJQUFJTSxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQ2QsUUFBUWUsTUFBTSxDQUFDRixJQUFJO0lBRXZDLElBQUksQ0FBQ04sSUFBSVMsQ0FBQyxFQUFFVCxJQUFJUyxDQUFDLEdBQUdULElBQUlNLElBQUksQ0FBQ0csQ0FBQztJQUM5QixJQUFJLENBQUNULElBQUlVLGlCQUFpQixFQUFFVixJQUFJVSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ1g7SUFFbEUsT0FBT1ksSUFBQUEsdUJBQWMsRUFBQztRQUNwQmpCO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0Y7QUFDRjtNQUVBLFdBQWVSIn0=