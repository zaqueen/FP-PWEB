"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _resetPassword = /*#__PURE__*/ _interop_require_default(require("../resetPassword"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localResetPassword(payload, options) {
    const { collection: collectionSlug, data, overrideAccess, req = {} } = options;
    (0, _setRequestContext.setRequestContext)(req);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Reset Password Operation.`);
    }
    req.payload = payload;
    req.payloadAPI = req.payloadAPI || 'local';
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _resetPassword.default)({
        collection,
        data,
        overrideAccess,
        req
    });
}
const _default = localResetPassword;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvcmVzZXRQYXNzd29yZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tICcuLi9yZXNldFBhc3N3b3JkJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCByZXNldFBhc3N3b3JkIGZyb20gJy4uL3Jlc2V0UGFzc3dvcmQnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICBkYXRhOiB7XG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICAgIHRva2VuOiBzdHJpbmdcbiAgfVxuICBvdmVycmlkZUFjY2VzczogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2NhbFJlc2V0UGFzc3dvcmQ8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8UmVzdWx0PiB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbjogY29sbGVjdGlvblNsdWcsIGRhdGEsIG92ZXJyaWRlQWNjZXNzLCByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCB9ID0gb3B0aW9uc1xuXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSlcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKFxuICAgICAgICBjb2xsZWN0aW9uU2x1ZyxcbiAgICAgICl9IGNhbid0IGJlIGZvdW5kLiBSZXNldCBQYXNzd29yZCBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZCA9IHBheWxvYWRcbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiByZXNldFBhc3N3b3JkKHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGRhdGEsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBsb2NhbFJlc2V0UGFzc3dvcmRcbiJdLCJuYW1lcyI6WyJsb2NhbFJlc2V0UGFzc3dvcmQiLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImRhdGEiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsInNldFJlcXVlc3RDb250ZXh0IiwiY29sbGVjdGlvbnMiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJpMThuIiwiaTE4bkluaXQiLCJjb25maWciLCJ0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwicmVzZXRQYXNzd29yZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFzREE7OztlQUFBOzs7NEJBakQ4Qjt3QkFDTDttQ0FDUztzQkFDVDtzRUFDQzs7Ozs7O0FBWTFCLGVBQWVBLG1CQUNiQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUFFQyxZQUFZQyxjQUFjLEVBQUVDLElBQUksRUFBRUMsY0FBYyxFQUFFQyxNQUFNLENBQUMsQ0FBbUIsRUFBRSxHQUFHTDtJQUV6Rk0sSUFBQUEsb0NBQWlCLEVBQUNEO0lBRWxCLE1BQU1KLGFBQWFGLFFBQVFRLFdBQVcsQ0FBQ0wsZUFBZTtJQUV0RCxJQUFJLENBQUNELFlBQVk7UUFDZixNQUFNLElBQUlPLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQzFCUCxnQkFDQSwwQ0FBMEMsQ0FBQztJQUVqRDtJQUVBRyxJQUFJTixPQUFPLEdBQUdBO0lBQ2RNLElBQUlLLFVBQVUsR0FBR0wsSUFBSUssVUFBVSxJQUFJO0lBQ25DTCxJQUFJTSxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQ2IsUUFBUWMsTUFBTSxDQUFDRixJQUFJO0lBRXZDLElBQUksQ0FBQ04sSUFBSVMsQ0FBQyxFQUFFVCxJQUFJUyxDQUFDLEdBQUdULElBQUlNLElBQUksQ0FBQ0csQ0FBQztJQUM5QixJQUFJLENBQUNULElBQUlVLGlCQUFpQixFQUFFVixJQUFJVSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ1g7SUFFbEUsT0FBT1ksSUFBQUEsc0JBQWEsRUFBQztRQUNuQmhCO1FBQ0FFO1FBQ0FDO1FBQ0FDO0lBQ0Y7QUFDRjtNQUVBLFdBQWVQIn0=