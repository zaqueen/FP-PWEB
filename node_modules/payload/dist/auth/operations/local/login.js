"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _login = /*#__PURE__*/ _interop_require_default(require("../login"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localLogin(payload, options) {
    const { collection: collectionSlug, data, depth, fallbackLocale, locale, overrideAccess = true, req = {}, res, showHiddenFields } = options;
    (0, _setRequestContext.setRequestContext)(req);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Login Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.locale = undefined;
    req.fallbackLocale = undefined;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        collection,
        data,
        depth,
        overrideAccess,
        req,
        res,
        showHiddenFields
    };
    if (locale) args.req.locale = locale;
    if (fallbackLocale) args.req.fallbackLocale = fallbackLocale;
    return (0, _login.default)(args);
}
const _default = localLogin;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvbG9naW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uL2luZGV4J1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSAnLi4vbG9naW4nXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IGxvZ2luIGZyb20gJy4uL2xvZ2luJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUU2x1Z1xuICBkYXRhOiB7XG4gICAgZW1haWw6IHN0cmluZ1xuICAgIHBhc3N3b3JkOiBzdHJpbmdcbiAgfVxuICBkZXB0aD86IG51bWJlclxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHJlcz86IFJlc3BvbnNlXG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvY2FsTG9naW48VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VFNsdWc+LFxuKTogUHJvbWlzZTxSZXN1bHQgJiB7IHVzZXI6IEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXSB9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGxvY2FsZSxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxID0ge30gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgcmVzLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSlcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKGNvbGxlY3Rpb25TbHVnKX0gY2FuJ3QgYmUgZm91bmQuIExvZ2luIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIHJlcS5wYXlsb2FkQVBJID0gcmVxLnBheWxvYWRBUEkgfHwgJ2xvY2FsJ1xuICByZXEucGF5bG9hZCA9IHBheWxvYWRcbiAgcmVxLmkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuICByZXEubG9jYWxlID0gdW5kZWZpbmVkXG4gIHJlcS5mYWxsYmFja0xvY2FsZSA9IHVuZGVmaW5lZFxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgY29uc3QgYXJncyA9IHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHJlcyxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9XG5cbiAgaWYgKGxvY2FsZSkgYXJncy5yZXEubG9jYWxlID0gbG9jYWxlXG4gIGlmIChmYWxsYmFja0xvY2FsZSkgYXJncy5yZXEuZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFja0xvY2FsZVxuXG4gIHJldHVybiBsb2dpbjxUU2x1Zz4oYXJncylcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxMb2dpblxuIl0sIm5hbWVzIjpbImxvY2FsTG9naW4iLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImRhdGEiLCJkZXB0aCIsImZhbGxiYWNrTG9jYWxlIiwibG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJyZXEiLCJyZXMiLCJzaG93SGlkZGVuRmllbGRzIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsImNvbmZpZyIsInVuZGVmaW5lZCIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJhcmdzIiwibG9naW4iXSwibWFwcGluZ3MiOiI7Ozs7K0JBOEVBOzs7ZUFBQTs7OzRCQXZFOEI7d0JBQ0w7bUNBQ1M7c0JBQ1Q7OERBQ1A7Ozs7OztBQWlCbEIsZUFBZUEsV0FDYkMsT0FBZ0IsRUFDaEJDLE9BQXVCO0lBRXZCLE1BQU0sRUFDSkMsWUFBWUMsY0FBYyxFQUMxQkMsSUFBSSxFQUNKQyxLQUFLLEVBQ0xDLGNBQWMsRUFDZEMsTUFBTSxFQUNOQyxpQkFBaUIsSUFBSSxFQUNyQkMsTUFBTSxDQUFDLENBQW1CLEVBQzFCQyxHQUFHLEVBQ0hDLGdCQUFnQixFQUNqQixHQUFHVjtJQUNKVyxJQUFBQSxvQ0FBaUIsRUFBQ0g7SUFFbEIsTUFBTVAsYUFBYUYsUUFBUWEsV0FBVyxDQUFDVixlQUFlO0lBRXRELElBQUksQ0FBQ0QsWUFBWTtRQUNmLE1BQU0sSUFBSVksZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FBT1osZ0JBQWdCLGlDQUFpQyxDQUFDO0lBRXpGO0lBRUFNLElBQUlPLFVBQVUsR0FBR1AsSUFBSU8sVUFBVSxJQUFJO0lBQ25DUCxJQUFJVCxPQUFPLEdBQUdBO0lBQ2RTLElBQUlRLElBQUksR0FBR0MsSUFBQUEsY0FBUSxFQUFDbEIsUUFBUW1CLE1BQU0sQ0FBQ0YsSUFBSTtJQUN2Q1IsSUFBSUYsTUFBTSxHQUFHYTtJQUNiWCxJQUFJSCxjQUFjLEdBQUdjO0lBRXJCLElBQUksQ0FBQ1gsSUFBSVksQ0FBQyxFQUFFWixJQUFJWSxDQUFDLEdBQUdaLElBQUlRLElBQUksQ0FBQ0ksQ0FBQztJQUM5QixJQUFJLENBQUNaLElBQUlhLGlCQUFpQixFQUFFYixJQUFJYSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2Q7SUFFbEUsTUFBTWUsT0FBTztRQUNYdEI7UUFDQUU7UUFDQUM7UUFDQUc7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRjtJQUVBLElBQUlKLFFBQVFpQixLQUFLZixHQUFHLENBQUNGLE1BQU0sR0FBR0E7SUFDOUIsSUFBSUQsZ0JBQWdCa0IsS0FBS2YsR0FBRyxDQUFDSCxjQUFjLEdBQUdBO0lBRTlDLE9BQU9tQixJQUFBQSxjQUFLLEVBQVFEO0FBQ3RCO01BRUEsV0FBZXpCIn0=