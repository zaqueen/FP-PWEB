"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
const _utils = require("../../collections/operations/utils");
const _errors = require("../../errors");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function forgotPassword(incomingArgs) {
    if (!Object.prototype.hasOwnProperty.call(incomingArgs.data, 'email')) {
        throw new _errors.APIError('Missing email.', 400);
    }
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        args = await hook({
            args,
            collection: args.collection?.config,
            context: args.req.context,
            operation: 'forgotPassword'
        }) || args;
    }, Promise.resolve());
    const { collection: { config: collectionConfig }, data, disableEmail, expiration, req: { payload: { config, emailOptions, sendEmail: email }, payload, t }, req } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        // /////////////////////////////////////
        // Forget password
        // /////////////////////////////////////
        let token = _crypto.default.randomBytes(20);
        token = token.toString('hex');
        if (!data.email) {
            throw new _errors.APIError('Missing email.');
        }
        let user = await payload.db.findOne({
            collection: collectionConfig.slug,
            req,
            where: {
                email: {
                    equals: data.email.toLowerCase()
                }
            }
        });
        if (!user) return null;
        user.resetPasswordToken = token;
        user.resetPasswordExpiration = new Date(expiration || Date.now() + 3600000).toISOString() // 1 hour
        ;
        user = await payload.update({
            id: user.id,
            collection: collectionConfig.slug,
            data: user,
            req
        });
        if (!disableEmail) {
            const serverURL = config.serverURL !== null && config.serverURL !== '' ? config.serverURL : `${req.protocol}://${req.get('host')}`;
            let html = `${t('authentication:youAreReceivingResetPassword')}
    <a href="${serverURL}${config.routes.admin}/reset/${token}">
     ${serverURL}${config.routes.admin}/reset/${token}
    </a>
    ${t('authentication:youDidNotRequestPassword')}`;
            if (typeof collectionConfig.auth.forgotPassword.generateEmailHTML === 'function') {
                html = await collectionConfig.auth.forgotPassword.generateEmailHTML({
                    req,
                    token,
                    user
                });
            }
            let subject = t('authentication:resetYourPassword');
            if (typeof collectionConfig.auth.forgotPassword.generateEmailSubject === 'function') {
                subject = await collectionConfig.auth.forgotPassword.generateEmailSubject({
                    req,
                    token,
                    user
                });
            }
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            email({
                from: `"${emailOptions.fromName}" <${emailOptions.fromAddress}>`,
                html,
                subject,
                to: data.email
            });
        }
        // /////////////////////////////////////
        // afterForgotPassword - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterForgotPassword.reduce(async (priorHook, hook)=>{
            await priorHook;
            await hook({
                args,
                collection: args.collection?.config,
                context: req.context
            });
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        token = await (0, _utils.buildAfterOperation)({
            args,
            collection: args.collection?.config,
            operation: 'forgotPassword',
            result: token
        });
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return token;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = forgotPassword;

//# sourceMappingURL=data:application/json;base64,