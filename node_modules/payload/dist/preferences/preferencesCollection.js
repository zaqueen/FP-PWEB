"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _delete = /*#__PURE__*/ _interop_require_default(require("./requestHandlers/delete"));
const _findOne = /*#__PURE__*/ _interop_require_default(require("./requestHandlers/findOne"));
const _update = /*#__PURE__*/ _interop_require_default(require("./requestHandlers/update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const preferenceAccess = ({ req })=>({
        'user.value': {
            equals: req?.user?.id
        }
    });
const getPreferencesCollection = (config)=>({
        access: {
            delete: preferenceAccess,
            read: preferenceAccess
        },
        admin: {
            hidden: true
        },
        endpoints: [
            {
                handler: _findOne.default,
                method: 'get',
                path: '/:key'
            },
            {
                handler: _delete.default,
                method: 'delete',
                path: '/:key'
            },
            {
                handler: _update.default,
                method: 'post',
                path: '/:key'
            }
        ],
        fields: [
            {
                name: 'user',
                hooks: {
                    beforeValidate: [
                        ({ req })=>{
                            if (!req?.user) {
                                return null;
                            }
                            return {
                                relationTo: req?.user.collection,
                                value: req?.user.id
                            };
                        }
                    ]
                },
                relationTo: config.collections.filter((collectionConfig)=>collectionConfig.auth).map((collectionConfig)=>collectionConfig.slug),
                required: true,
                type: 'relationship'
            },
            {
                name: 'key',
                type: 'text'
            },
            {
                name: 'value',
                type: 'json'
            }
        ],
        slug: 'payload-preferences'
    });
const _default = getPreferencesCollection;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVmZXJlbmNlcy9wcmVmZXJlbmNlc0NvbGxlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAnLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBBY2Nlc3MsIENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy90eXBlcydcblxuaW1wb3J0IGRlbGV0ZUhhbmRsZXIgZnJvbSAnLi9yZXF1ZXN0SGFuZGxlcnMvZGVsZXRlJ1xuaW1wb3J0IGZpbmRPbmUgZnJvbSAnLi9yZXF1ZXN0SGFuZGxlcnMvZmluZE9uZSdcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi9yZXF1ZXN0SGFuZGxlcnMvdXBkYXRlJ1xuXG5jb25zdCBwcmVmZXJlbmNlQWNjZXNzOiBBY2Nlc3MgPSAoeyByZXEgfSkgPT4gKHtcbiAgJ3VzZXIudmFsdWUnOiB7XG4gICAgZXF1YWxzOiByZXE/LnVzZXI/LmlkLFxuICB9LFxufSlcblxuY29uc3QgZ2V0UHJlZmVyZW5jZXNDb2xsZWN0aW9uID0gKGNvbmZpZzogQ29uZmlnKTogQ29sbGVjdGlvbkNvbmZpZyA9PiAoe1xuICBhY2Nlc3M6IHtcbiAgICBkZWxldGU6IHByZWZlcmVuY2VBY2Nlc3MsXG4gICAgcmVhZDogcHJlZmVyZW5jZUFjY2VzcyxcbiAgfSxcbiAgYWRtaW46IHtcbiAgICBoaWRkZW46IHRydWUsXG4gIH0sXG4gIGVuZHBvaW50czogW1xuICAgIHtcbiAgICAgIGhhbmRsZXI6IGZpbmRPbmUsXG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgcGF0aDogJy86a2V5JyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGhhbmRsZXI6IGRlbGV0ZUhhbmRsZXIsXG4gICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgcGF0aDogJy86a2V5JyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGhhbmRsZXI6IHVwZGF0ZSxcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgcGF0aDogJy86a2V5JyxcbiAgICB9LFxuICBdLFxuICBmaWVsZHM6IFtcbiAgICB7XG4gICAgICBuYW1lOiAndXNlcicsXG4gICAgICBob29rczoge1xuICAgICAgICBiZWZvcmVWYWxpZGF0ZTogW1xuICAgICAgICAgICh7IHJlcSB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlcT8udXNlcikge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcmVsYXRpb25UbzogcmVxPy51c2VyLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICAgIHZhbHVlOiByZXE/LnVzZXIuaWQsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICByZWxhdGlvblRvOiBjb25maWcuY29sbGVjdGlvbnNcbiAgICAgICAgLmZpbHRlcigoY29sbGVjdGlvbkNvbmZpZykgPT4gY29sbGVjdGlvbkNvbmZpZy5hdXRoKVxuICAgICAgICAubWFwKChjb2xsZWN0aW9uQ29uZmlnKSA9PiBjb2xsZWN0aW9uQ29uZmlnLnNsdWcpLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICB0eXBlOiAncmVsYXRpb25zaGlwJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdrZXknLFxuICAgICAgdHlwZTogJ3RleHQnLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3ZhbHVlJyxcbiAgICAgIHR5cGU6ICdqc29uJyxcbiAgICB9LFxuICBdLFxuICBzbHVnOiAncGF5bG9hZC1wcmVmZXJlbmNlcycsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBnZXRQcmVmZXJlbmNlc0NvbGxlY3Rpb25cbiJdLCJuYW1lcyI6WyJwcmVmZXJlbmNlQWNjZXNzIiwicmVxIiwiZXF1YWxzIiwidXNlciIsImlkIiwiZ2V0UHJlZmVyZW5jZXNDb2xsZWN0aW9uIiwiY29uZmlnIiwiYWNjZXNzIiwiZGVsZXRlIiwicmVhZCIsImFkbWluIiwiaGlkZGVuIiwiZW5kcG9pbnRzIiwiaGFuZGxlciIsImZpbmRPbmUiLCJtZXRob2QiLCJwYXRoIiwiZGVsZXRlSGFuZGxlciIsInVwZGF0ZSIsImZpZWxkcyIsIm5hbWUiLCJob29rcyIsImJlZm9yZVZhbGlkYXRlIiwicmVsYXRpb25UbyIsImNvbGxlY3Rpb24iLCJ2YWx1ZSIsImNvbGxlY3Rpb25zIiwiZmlsdGVyIiwiY29sbGVjdGlvbkNvbmZpZyIsImF1dGgiLCJtYXAiLCJzbHVnIiwicmVxdWlyZWQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7OytCQXdFQTs7O2VBQUE7OzsrREFyRTBCO2dFQUNOOytEQUNEOzs7Ozs7QUFFbkIsTUFBTUEsbUJBQTJCLENBQUMsRUFBRUMsR0FBRyxFQUFFLEdBQU0sQ0FBQTtRQUM3QyxjQUFjO1lBQ1pDLFFBQVFELEtBQUtFLE1BQU1DO1FBQ3JCO0lBQ0YsQ0FBQTtBQUVBLE1BQU1DLDJCQUEyQixDQUFDQyxTQUFzQyxDQUFBO1FBQ3RFQyxRQUFRO1lBQ05DLFFBQVFSO1lBQ1JTLE1BQU1UO1FBQ1I7UUFDQVUsT0FBTztZQUNMQyxRQUFRO1FBQ1Y7UUFDQUMsV0FBVztZQUNUO2dCQUNFQyxTQUFTQyxnQkFBTztnQkFDaEJDLFFBQVE7Z0JBQ1JDLE1BQU07WUFDUjtZQUNBO2dCQUNFSCxTQUFTSSxlQUFhO2dCQUN0QkYsUUFBUTtnQkFDUkMsTUFBTTtZQUNSO1lBQ0E7Z0JBQ0VILFNBQVNLLGVBQU07Z0JBQ2ZILFFBQVE7Z0JBQ1JDLE1BQU07WUFDUjtTQUNEO1FBQ0RHLFFBQVE7WUFDTjtnQkFDRUMsTUFBTTtnQkFDTkMsT0FBTztvQkFDTEMsZ0JBQWdCO3dCQUNkLENBQUMsRUFBRXJCLEdBQUcsRUFBRTs0QkFDTixJQUFJLENBQUNBLEtBQUtFLE1BQU07Z0NBQ2QsT0FBTzs0QkFDVDs0QkFDQSxPQUFPO2dDQUNMb0IsWUFBWXRCLEtBQUtFLEtBQUtxQjtnQ0FDdEJDLE9BQU94QixLQUFLRSxLQUFLQzs0QkFDbkI7d0JBQ0Y7cUJBQ0Q7Z0JBQ0g7Z0JBQ0FtQixZQUFZakIsT0FBT29CLFdBQVcsQ0FDM0JDLE1BQU0sQ0FBQyxDQUFDQyxtQkFBcUJBLGlCQUFpQkMsSUFBSSxFQUNsREMsR0FBRyxDQUFDLENBQUNGLG1CQUFxQkEsaUJBQWlCRyxJQUFJO2dCQUNsREMsVUFBVTtnQkFDVkMsTUFBTTtZQUNSO1lBQ0E7Z0JBQ0ViLE1BQU07Z0JBQ05hLE1BQU07WUFDUjtZQUNBO2dCQUNFYixNQUFNO2dCQUNOYSxNQUFNO1lBQ1I7U0FDRDtRQUNERixNQUFNO0lBQ1IsQ0FBQTtNQUVBLFdBQWUxQiJ9