"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "validateSearchParam", {
    enumerable: true,
    get: function() {
        return validateSearchParam;
    }
});
const _types = require("../../fields/config/types");
const _getEntityPolicies = require("../../utilities/getEntityPolicies");
const _getLocalizedPaths = require("../getLocalizedPaths");
const _validateQueryPaths = require("./validateQueryPaths");
async function validateSearchParam({ collectionConfig, errors, fields, globalConfig, operator, overrideAccess, path: incomingPath, policies, req, val, versionFields }) {
    // Replace GraphQL nested field double underscore formatting
    let sanitizedPath;
    if (incomingPath === '_id') {
        sanitizedPath = 'id';
    } else {
        sanitizedPath = incomingPath.replace(/__/g, '.');
    }
    let paths = [];
    const { slug } = collectionConfig || globalConfig;
    if (globalConfig && !policies.globals[slug]) {
        // eslint-disable-next-line no-param-reassign
        globalConfig.fields = fields;
        // eslint-disable-next-line no-param-reassign
        policies.globals[slug] = await (0, _getEntityPolicies.getEntityPolicies)({
            entity: globalConfig,
            operations: [
                'read'
            ],
            req,
            type: 'global'
        });
    }
    if (sanitizedPath !== 'id') {
        paths = await (0, _getLocalizedPaths.getLocalizedPaths)({
            collectionSlug: collectionConfig?.slug,
            fields,
            globalSlug: globalConfig?.slug,
            incomingPath: sanitizedPath,
            locale: req.locale,
            overrideAccess,
            payload: req.payload
        });
    }
    const promises = [];
    promises.push(...paths.map(async ({ collectionSlug, field, invalid, path }, i)=>{
        if (invalid) {
            errors.push({
                path
            });
            return;
        }
        if (!overrideAccess && (0, _types.fieldAffectsData)(field)) {
            if (collectionSlug) {
                if (!policies.collections[collectionSlug]) {
                    // eslint-disable-next-line no-param-reassign
                    policies.collections[collectionSlug] = await (0, _getEntityPolicies.getEntityPolicies)({
                        entity: req.payload.collections[collectionSlug].config,
                        operations: [
                            'read'
                        ],
                        req,
                        type: 'collection'
                    });
                }
                if ([
                    'hash',
                    'salt'
                ].includes(incomingPath) && collectionConfig.auth && !collectionConfig.auth?.disableLocalStrategy) {
                    errors.push({
                        path: incomingPath
                    });
                }
            }
            let fieldAccess;
            let fieldPath = path;
            // remove locale from end of path
            if (path.endsWith(`.${req.locale}`)) {
                fieldPath = path.slice(0, -(req.locale.length + 1));
            }
            // remove ".value" from ends of polymorphic relationship paths
            if (field.type === 'relationship' && Array.isArray(field.relationTo)) {
                fieldPath = fieldPath.replace('.value', '');
            }
            const entityType = globalConfig ? 'globals' : 'collections';
            const entitySlug = collectionSlug || globalConfig.slug;
            const segments = fieldPath.split('.');
            if (versionFields) {
                fieldAccess = policies[entityType][entitySlug];
                if (segments[0] === 'parent' || segments[0] === 'version') {
                    segments.shift();
                } else {
                    if ([
                        'json',
                        'relationship',
                        'richText'
                    ].includes(field.type)) {
                        fieldAccess = fieldAccess[field.name];
                    } else {
                        segments.forEach((segment, pathIndex)=>{
                            if (fieldAccess[segment]) {
                                if (pathIndex === segments.length - 1) {
                                    fieldAccess = fieldAccess[segment];
                                } else if ('fields' in fieldAccess[segment]) {
                                    fieldAccess = fieldAccess[segment].fields;
                                } else if ('blocks' in fieldAccess[segment]) {
                                    fieldAccess = fieldAccess[segment];
                                }
                            }
                        });
                    }
                }
                fieldAccess = fieldAccess.read.permission;
            } else {
                fieldAccess = policies[entityType][entitySlug].fields;
                if ([
                    'json',
                    'relationship',
                    'richText'
                ].includes(field.type)) {
                    fieldAccess = fieldAccess[field.name];
                } else {
                    segments.forEach((segment, pathIndex)=>{
                        if (fieldAccess[segment]) {
                            if (pathIndex === segments.length - 1) {
                                fieldAccess = fieldAccess[segment];
                            } else if ('fields' in fieldAccess[segment]) {
                                fieldAccess = fieldAccess[segment].fields;
                            } else if ('blocks' in fieldAccess[segment]) {
                                fieldAccess = fieldAccess[segment];
                            }
                        }
                    });
                }
                fieldAccess = fieldAccess.read.permission;
            }
            if (!fieldAccess) {
                errors.push({
                    path: fieldPath
                });
            }
        }
        if (i > 1) {
            // Remove top collection and reverse array
            // to work backwards from top
            const pathsToQuery = paths.slice(1).reverse();
            pathsToQuery.forEach(({ collectionSlug: pathCollectionSlug, path: subPath }, pathToQueryIndex)=>{
                // On the "deepest" collection,
                // validate query of the relationship
                if (pathToQueryIndex === 0) {
                    promises.push((0, _validateQueryPaths.validateQueryPaths)({
                        collectionConfig: req.payload.collections[pathCollectionSlug].config,
                        errors,
                        globalConfig: undefined,
                        overrideAccess,
                        policies,
                        req,
                        where: {
                            [subPath]: {
                                [operator]: val
                            }
                        }
                    }));
                }
            });
        }
    }));
    await Promise.all(promises);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhYmFzZS9xdWVyeVZhbGlkYXRpb24vdmFsaWRhdGVTZWFyY2hQYXJhbXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkR2xvYmFsQ29uZmlnIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEVudGl0eVBvbGljaWVzLCBQYXRoVG9RdWVyeSB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGZpZWxkQWZmZWN0c0RhdGEgfSBmcm9tICcuLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHsgZ2V0RW50aXR5UG9saWNpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvZ2V0RW50aXR5UG9saWNpZXMnXG5pbXBvcnQgeyBnZXRMb2NhbGl6ZWRQYXRocyB9IGZyb20gJy4uL2dldExvY2FsaXplZFBhdGhzJ1xuaW1wb3J0IHsgdmFsaWRhdGVRdWVyeVBhdGhzIH0gZnJvbSAnLi92YWxpZGF0ZVF1ZXJ5UGF0aHMnXG5cbnR5cGUgQXJncyA9IHtcbiAgY29sbGVjdGlvbkNvbmZpZz86IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgZXJyb3JzOiB7IHBhdGg6IHN0cmluZyB9W11cbiAgZmllbGRzOiBGaWVsZFtdXG4gIGdsb2JhbENvbmZpZz86IFNhbml0aXplZEdsb2JhbENvbmZpZ1xuICBvcGVyYXRvcjogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xuICBwb2xpY2llczogRW50aXR5UG9saWNpZXNcbiAgcmVxOiBQYXlsb2FkUmVxdWVzdFxuICB2YWw6IHVua25vd25cbiAgdmVyc2lvbkZpZWxkcz86IEZpZWxkW11cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGUgUGF5bG9hZCBrZXkgLyB2YWx1ZSAvIG9wZXJhdG9yXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVNlYXJjaFBhcmFtKHtcbiAgY29sbGVjdGlvbkNvbmZpZyxcbiAgZXJyb3JzLFxuICBmaWVsZHMsXG4gIGdsb2JhbENvbmZpZyxcbiAgb3BlcmF0b3IsXG4gIG92ZXJyaWRlQWNjZXNzLFxuICBwYXRoOiBpbmNvbWluZ1BhdGgsXG4gIHBvbGljaWVzLFxuICByZXEsXG4gIHZhbCxcbiAgdmVyc2lvbkZpZWxkcyxcbn06IEFyZ3MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gUmVwbGFjZSBHcmFwaFFMIG5lc3RlZCBmaWVsZCBkb3VibGUgdW5kZXJzY29yZSBmb3JtYXR0aW5nXG4gIGxldCBzYW5pdGl6ZWRQYXRoXG4gIGlmIChpbmNvbWluZ1BhdGggPT09ICdfaWQnKSB7XG4gICAgc2FuaXRpemVkUGF0aCA9ICdpZCdcbiAgfSBlbHNlIHtcbiAgICBzYW5pdGl6ZWRQYXRoID0gaW5jb21pbmdQYXRoLnJlcGxhY2UoL19fL2csICcuJylcbiAgfVxuICBsZXQgcGF0aHM6IFBhdGhUb1F1ZXJ5W10gPSBbXVxuICBjb25zdCB7IHNsdWcgfSA9IGNvbGxlY3Rpb25Db25maWcgfHwgZ2xvYmFsQ29uZmlnXG5cbiAgaWYgKGdsb2JhbENvbmZpZyAmJiAhcG9saWNpZXMuZ2xvYmFsc1tzbHVnXSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGdsb2JhbENvbmZpZy5maWVsZHMgPSBmaWVsZHNcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHBvbGljaWVzLmdsb2JhbHNbc2x1Z10gPSBhd2FpdCBnZXRFbnRpdHlQb2xpY2llcyh7XG4gICAgICBlbnRpdHk6IGdsb2JhbENvbmZpZyxcbiAgICAgIG9wZXJhdGlvbnM6IFsncmVhZCddLFxuICAgICAgcmVxLFxuICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgfSlcbiAgfVxuXG4gIGlmIChzYW5pdGl6ZWRQYXRoICE9PSAnaWQnKSB7XG4gICAgcGF0aHMgPSBhd2FpdCBnZXRMb2NhbGl6ZWRQYXRocyh7XG4gICAgICBjb2xsZWN0aW9uU2x1ZzogY29sbGVjdGlvbkNvbmZpZz8uc2x1ZyxcbiAgICAgIGZpZWxkcyxcbiAgICAgIGdsb2JhbFNsdWc6IGdsb2JhbENvbmZpZz8uc2x1ZyxcbiAgICAgIGluY29taW5nUGF0aDogc2FuaXRpemVkUGF0aCxcbiAgICAgIGxvY2FsZTogcmVxLmxvY2FsZSxcbiAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgcGF5bG9hZDogcmVxLnBheWxvYWQsXG4gICAgfSlcbiAgfVxuICBjb25zdCBwcm9taXNlcyA9IFtdXG4gIHByb21pc2VzLnB1c2goXG4gICAgLi4ucGF0aHMubWFwKGFzeW5jICh7IGNvbGxlY3Rpb25TbHVnLCBmaWVsZCwgaW52YWxpZCwgcGF0aCB9LCBpKSA9PiB7XG4gICAgICBpZiAoaW52YWxpZCkge1xuICAgICAgICBlcnJvcnMucHVzaCh7IHBhdGggfSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghb3ZlcnJpZGVBY2Nlc3MgJiYgZmllbGRBZmZlY3RzRGF0YShmaWVsZCkpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25TbHVnKSB7XG4gICAgICAgICAgaWYgKCFwb2xpY2llcy5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z10pIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgcG9saWNpZXMuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddID0gYXdhaXQgZ2V0RW50aXR5UG9saWNpZXMoe1xuICAgICAgICAgICAgICBlbnRpdHk6IHJlcS5wYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXS5jb25maWcsXG4gICAgICAgICAgICAgIG9wZXJhdGlvbnM6IFsncmVhZCddLFxuICAgICAgICAgICAgICByZXEsXG4gICAgICAgICAgICAgIHR5cGU6ICdjb2xsZWN0aW9uJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgWydoYXNoJywgJ3NhbHQnXS5pbmNsdWRlcyhpbmNvbWluZ1BhdGgpICYmXG4gICAgICAgICAgICBjb2xsZWN0aW9uQ29uZmlnLmF1dGggJiZcbiAgICAgICAgICAgICFjb2xsZWN0aW9uQ29uZmlnLmF1dGg/LmRpc2FibGVMb2NhbFN0cmF0ZWd5XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCh7IHBhdGg6IGluY29taW5nUGF0aCB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgZmllbGRBY2Nlc3NcbiAgICAgICAgbGV0IGZpZWxkUGF0aCA9IHBhdGhcbiAgICAgICAgLy8gcmVtb3ZlIGxvY2FsZSBmcm9tIGVuZCBvZiBwYXRoXG4gICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKGAuJHtyZXEubG9jYWxlfWApKSB7XG4gICAgICAgICAgZmllbGRQYXRoID0gcGF0aC5zbGljZSgwLCAtKHJlcS5sb2NhbGUubGVuZ3RoICsgMSkpXG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIFwiLnZhbHVlXCIgZnJvbSBlbmRzIG9mIHBvbHltb3JwaGljIHJlbGF0aW9uc2hpcCBwYXRoc1xuICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3JlbGF0aW9uc2hpcCcgJiYgQXJyYXkuaXNBcnJheShmaWVsZC5yZWxhdGlvblRvKSkge1xuICAgICAgICAgIGZpZWxkUGF0aCA9IGZpZWxkUGF0aC5yZXBsYWNlKCcudmFsdWUnLCAnJylcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbnRpdHlUeXBlOiAnY29sbGVjdGlvbnMnIHwgJ2dsb2JhbHMnID0gZ2xvYmFsQ29uZmlnID8gJ2dsb2JhbHMnIDogJ2NvbGxlY3Rpb25zJ1xuICAgICAgICBjb25zdCBlbnRpdHlTbHVnID0gY29sbGVjdGlvblNsdWcgfHwgZ2xvYmFsQ29uZmlnLnNsdWdcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBmaWVsZFBhdGguc3BsaXQoJy4nKVxuXG4gICAgICAgIGlmICh2ZXJzaW9uRmllbGRzKSB7XG4gICAgICAgICAgZmllbGRBY2Nlc3MgPSBwb2xpY2llc1tlbnRpdHlUeXBlXVtlbnRpdHlTbHVnXVxuICAgICAgICAgIGlmIChzZWdtZW50c1swXSA9PT0gJ3BhcmVudCcgfHwgc2VnbWVudHNbMF0gPT09ICd2ZXJzaW9uJykge1xuICAgICAgICAgICAgc2VnbWVudHMuc2hpZnQoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoWydqc29uJywgJ3JlbGF0aW9uc2hpcCcsICdyaWNoVGV4dCddLmluY2x1ZGVzKGZpZWxkLnR5cGUpKSB7XG4gICAgICAgICAgICAgIGZpZWxkQWNjZXNzID0gZmllbGRBY2Nlc3NbZmllbGQubmFtZV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLmZvckVhY2goKHNlZ21lbnQsIHBhdGhJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZEFjY2Vzc1tzZWdtZW50XSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHBhdGhJbmRleCA9PT0gc2VnbWVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZEFjY2VzcyA9IGZpZWxkQWNjZXNzW3NlZ21lbnRdXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCdmaWVsZHMnIGluIGZpZWxkQWNjZXNzW3NlZ21lbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkQWNjZXNzID0gZmllbGRBY2Nlc3Nbc2VnbWVudF0uZmllbGRzXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCdibG9ja3MnIGluIGZpZWxkQWNjZXNzW3NlZ21lbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkQWNjZXNzID0gZmllbGRBY2Nlc3Nbc2VnbWVudF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRBY2Nlc3MgPSBmaWVsZEFjY2Vzcy5yZWFkLnBlcm1pc3Npb25cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaWVsZEFjY2VzcyA9IHBvbGljaWVzW2VudGl0eVR5cGVdW2VudGl0eVNsdWddLmZpZWxkc1xuXG4gICAgICAgICAgaWYgKFsnanNvbicsICdyZWxhdGlvbnNoaXAnLCAncmljaFRleHQnXS5pbmNsdWRlcyhmaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgZmllbGRBY2Nlc3MgPSBmaWVsZEFjY2Vzc1tmaWVsZC5uYW1lXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWdtZW50cy5mb3JFYWNoKChzZWdtZW50LCBwYXRoSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGZpZWxkQWNjZXNzW3NlZ21lbnRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhJbmRleCA9PT0gc2VnbWVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgZmllbGRBY2Nlc3MgPSBmaWVsZEFjY2Vzc1tzZWdtZW50XVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ2ZpZWxkcycgaW4gZmllbGRBY2Nlc3Nbc2VnbWVudF0pIHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkQWNjZXNzID0gZmllbGRBY2Nlc3Nbc2VnbWVudF0uZmllbGRzXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgnYmxvY2tzJyBpbiBmaWVsZEFjY2Vzc1tzZWdtZW50XSkge1xuICAgICAgICAgICAgICAgICAgZmllbGRBY2Nlc3MgPSBmaWVsZEFjY2Vzc1tzZWdtZW50XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWVsZEFjY2VzcyA9IGZpZWxkQWNjZXNzLnJlYWQucGVybWlzc2lvblxuICAgICAgICB9XG4gICAgICAgIGlmICghZmllbGRBY2Nlc3MpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7IHBhdGg6IGZpZWxkUGF0aCB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpID4gMSkge1xuICAgICAgICAvLyBSZW1vdmUgdG9wIGNvbGxlY3Rpb24gYW5kIHJldmVyc2UgYXJyYXlcbiAgICAgICAgLy8gdG8gd29yayBiYWNrd2FyZHMgZnJvbSB0b3BcbiAgICAgICAgY29uc3QgcGF0aHNUb1F1ZXJ5ID0gcGF0aHMuc2xpY2UoMSkucmV2ZXJzZSgpXG5cbiAgICAgICAgcGF0aHNUb1F1ZXJ5LmZvckVhY2goXG4gICAgICAgICAgKHsgY29sbGVjdGlvblNsdWc6IHBhdGhDb2xsZWN0aW9uU2x1ZywgcGF0aDogc3ViUGF0aCB9LCBwYXRoVG9RdWVyeUluZGV4KSA9PiB7XG4gICAgICAgICAgICAvLyBPbiB0aGUgXCJkZWVwZXN0XCIgY29sbGVjdGlvbixcbiAgICAgICAgICAgIC8vIHZhbGlkYXRlIHF1ZXJ5IG9mIHRoZSByZWxhdGlvbnNoaXBcbiAgICAgICAgICAgIGlmIChwYXRoVG9RdWVyeUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVRdWVyeVBhdGhzKHtcbiAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Db25maWc6IHJlcS5wYXlsb2FkLmNvbGxlY3Rpb25zW3BhdGhDb2xsZWN0aW9uU2x1Z10uY29uZmlnLFxuICAgICAgICAgICAgICAgICAgZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICAgICAgICAgIHBvbGljaWVzLFxuICAgICAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgW3N1YlBhdGhdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgW29wZXJhdG9yXTogdmFsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KSxcbiAgKVxuICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcbn1cbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZVNlYXJjaFBhcmFtIiwiY29sbGVjdGlvbkNvbmZpZyIsImVycm9ycyIsImZpZWxkcyIsImdsb2JhbENvbmZpZyIsIm9wZXJhdG9yIiwib3ZlcnJpZGVBY2Nlc3MiLCJwYXRoIiwiaW5jb21pbmdQYXRoIiwicG9saWNpZXMiLCJyZXEiLCJ2YWwiLCJ2ZXJzaW9uRmllbGRzIiwic2FuaXRpemVkUGF0aCIsInJlcGxhY2UiLCJwYXRocyIsInNsdWciLCJnbG9iYWxzIiwiZ2V0RW50aXR5UG9saWNpZXMiLCJlbnRpdHkiLCJvcGVyYXRpb25zIiwidHlwZSIsImdldExvY2FsaXplZFBhdGhzIiwiY29sbGVjdGlvblNsdWciLCJnbG9iYWxTbHVnIiwibG9jYWxlIiwicGF5bG9hZCIsInByb21pc2VzIiwicHVzaCIsIm1hcCIsImZpZWxkIiwiaW52YWxpZCIsImkiLCJmaWVsZEFmZmVjdHNEYXRhIiwiY29sbGVjdGlvbnMiLCJjb25maWciLCJpbmNsdWRlcyIsImF1dGgiLCJkaXNhYmxlTG9jYWxTdHJhdGVneSIsImZpZWxkQWNjZXNzIiwiZmllbGRQYXRoIiwiZW5kc1dpdGgiLCJzbGljZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsInJlbGF0aW9uVG8iLCJlbnRpdHlUeXBlIiwiZW50aXR5U2x1ZyIsInNlZ21lbnRzIiwic3BsaXQiLCJzaGlmdCIsIm5hbWUiLCJmb3JFYWNoIiwic2VnbWVudCIsInBhdGhJbmRleCIsInJlYWQiLCJwZXJtaXNzaW9uIiwicGF0aHNUb1F1ZXJ5IiwicmV2ZXJzZSIsInBhdGhDb2xsZWN0aW9uU2x1ZyIsInN1YlBhdGgiLCJwYXRoVG9RdWVyeUluZGV4IiwidmFsaWRhdGVRdWVyeVBhdGhzIiwidW5kZWZpbmVkIiwid2hlcmUiLCJQcm9taXNlIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7OytCQTRCc0JBOzs7ZUFBQUE7Ozt1QkF0Qlc7bUNBQ0M7bUNBQ0E7b0NBQ0M7QUFtQjVCLGVBQWVBLG9CQUFvQixFQUN4Q0MsZ0JBQWdCLEVBQ2hCQyxNQUFNLEVBQ05DLE1BQU0sRUFDTkMsWUFBWSxFQUNaQyxRQUFRLEVBQ1JDLGNBQWMsRUFDZEMsTUFBTUMsWUFBWSxFQUNsQkMsUUFBUSxFQUNSQyxHQUFHLEVBQ0hDLEdBQUcsRUFDSEMsYUFBYSxFQUNSO0lBQ0wsNERBQTREO0lBQzVELElBQUlDO0lBQ0osSUFBSUwsaUJBQWlCLE9BQU87UUFDMUJLLGdCQUFnQjtJQUNsQixPQUFPO1FBQ0xBLGdCQUFnQkwsYUFBYU0sT0FBTyxDQUFDLE9BQU87SUFDOUM7SUFDQSxJQUFJQyxRQUF1QixFQUFFO0lBQzdCLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdmLG9CQUFvQkc7SUFFckMsSUFBSUEsZ0JBQWdCLENBQUNLLFNBQVNRLE9BQU8sQ0FBQ0QsS0FBSyxFQUFFO1FBQzNDLDZDQUE2QztRQUM3Q1osYUFBYUQsTUFBTSxHQUFHQTtRQUV0Qiw2Q0FBNkM7UUFDN0NNLFNBQVNRLE9BQU8sQ0FBQ0QsS0FBSyxHQUFHLE1BQU1FLElBQUFBLG9DQUFpQixFQUFD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