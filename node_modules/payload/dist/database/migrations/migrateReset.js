/* eslint-disable no-restricted-syntax, no-await-in-loop */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "migrateReset", {
    enumerable: true,
    get: function() {
        return migrateReset;
    }
});
const _getMigrations = require("./getMigrations");
const _readMigrationFiles = require("./readMigrationFiles");
async function migrateReset() {
    const { payload } = this;
    const migrationFiles = await (0, _readMigrationFiles.readMigrationFiles)({
        payload
    });
    const { existingMigrations } = await (0, _getMigrations.getMigrations)({
        payload
    });
    if (!existingMigrations?.length) {
        payload.logger.info({
            msg: 'No migrations to reset.'
        });
        return;
    }
    let transactionID;
    // Rollback all migrations in order
    for (const migration of migrationFiles){
        // Create or update migration in database
        const existingMigration = existingMigrations.find((existing)=>existing.name === migration.name);
        if (existingMigration) {
            payload.logger.info({
                msg: `Migrating down: ${migration.name}`
            });
            try {
                const start = Date.now();
                transactionID = await this.beginTransaction();
                await migration.down({
                    payload
                });
                await payload.delete({
                    collection: 'payload-migrations',
                    req: {
                        transactionID
                    },
                    where: {
                        id: {
                            equals: existingMigration.id
                        }
                    }
                });
                await this.commitTransaction(transactionID);
                payload.logger.info({
                    msg: `Migrated down:  ${migration.name} (${Date.now() - start}ms)`
                });
            } catch (err) {
                await this.rollbackTransaction(transactionID);
                payload.logger.error({
                    err,
                    msg: `Error running migration ${migration.name}`
                });
                throw err;
            }
        }
    }
    // Delete dev migration
    try {
        await payload.delete({
            collection: 'payload-migrations',
            where: {
                batch: {
                    equals: -1
                }
            }
        });
    } catch (err) {
        payload.logger.error({
            error: err,
            msg: 'Error deleting dev migration'
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhYmFzZS9taWdyYXRpb25zL21pZ3JhdGVSZXNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tYXdhaXQtaW4tbG9vcCAqL1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEJhc2VEYXRhYmFzZUFkYXB0ZXIgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0TWlncmF0aW9ucyB9IGZyb20gJy4vZ2V0TWlncmF0aW9ucydcbmltcG9ydCB7IHJlYWRNaWdyYXRpb25GaWxlcyB9IGZyb20gJy4vcmVhZE1pZ3JhdGlvbkZpbGVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlncmF0ZVJlc2V0KHRoaXM6IEJhc2VEYXRhYmFzZUFkYXB0ZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBwYXlsb2FkIH0gPSB0aGlzXG4gIGNvbnN0IG1pZ3JhdGlvbkZpbGVzID0gYXdhaXQgcmVhZE1pZ3JhdGlvbkZpbGVzKHsgcGF5bG9hZCB9KVxuXG4gIGNvbnN0IHsgZXhpc3RpbmdNaWdyYXRpb25zIH0gPSBhd2FpdCBnZXRNaWdyYXRpb25zKHsgcGF5bG9hZCB9KVxuXG4gIGlmICghZXhpc3RpbmdNaWdyYXRpb25zPy5sZW5ndGgpIHtcbiAgICBwYXlsb2FkLmxvZ2dlci5pbmZvKHsgbXNnOiAnTm8gbWlncmF0aW9ucyB0byByZXNldC4nIH0pXG4gICAgcmV0dXJuXG4gIH1cblxuICBsZXQgdHJhbnNhY3Rpb25JRFxuXG4gIC8vIFJvbGxiYWNrIGFsbCBtaWdyYXRpb25zIGluIG9yZGVyXG4gIGZvciAoY29uc3QgbWlncmF0aW9uIG9mIG1pZ3JhdGlvbkZpbGVzKSB7XG4gICAgLy8gQ3JlYXRlIG9yIHVwZGF0ZSBtaWdyYXRpb24gaW4gZGF0YWJhc2VcbiAgICBjb25zdCBleGlzdGluZ01pZ3JhdGlvbiA9IGV4aXN0aW5nTWlncmF0aW9ucy5maW5kKFxuICAgICAgKGV4aXN0aW5nKSA9PiBleGlzdGluZy5uYW1lID09PSBtaWdyYXRpb24ubmFtZSxcbiAgICApXG4gICAgaWYgKGV4aXN0aW5nTWlncmF0aW9uKSB7XG4gICAgICBwYXlsb2FkLmxvZ2dlci5pbmZvKHsgbXNnOiBgTWlncmF0aW5nIGRvd246ICR7bWlncmF0aW9uLm5hbWV9YCB9KVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICAgIHRyYW5zYWN0aW9uSUQgPSBhd2FpdCB0aGlzLmJlZ2luVHJhbnNhY3Rpb24oKVxuICAgICAgICBhd2FpdCBtaWdyYXRpb24uZG93bih7IHBheWxvYWQgfSlcbiAgICAgICAgYXdhaXQgcGF5bG9hZC5kZWxldGUoe1xuICAgICAgICAgIGNvbGxlY3Rpb246ICdwYXlsb2FkLW1pZ3JhdGlvbnMnLFxuICAgICAgICAgIHJlcTogeyB0cmFuc2FjdGlvbklEIH0gYXMgUGF5bG9hZFJlcXVlc3QsXG4gICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgIGVxdWFsczogZXhpc3RpbmdNaWdyYXRpb24uaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIGF3YWl0IHRoaXMuY29tbWl0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb25JRClcbiAgICAgICAgcGF5bG9hZC5sb2dnZXIuaW5mbyh7IG1zZzogYE1pZ3JhdGVkIGRvd246ICAke21pZ3JhdGlvbi5uYW1lfSAoJHtEYXRlLm5vdygpIC0gc3RhcnR9bXMpYCB9KVxuICAgICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucm9sbGJhY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklEKVxuICAgICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcih7IGVyciwgbXNnOiBgRXJyb3IgcnVubmluZyBtaWdyYXRpb24gJHttaWdyYXRpb24ubmFtZX1gIH0pXG4gICAgICAgIHRocm93IGVyclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIERlbGV0ZSBkZXYgbWlncmF0aW9uXG4gIHRyeSB7XG4gICAgYXdhaXQgcGF5bG9hZC5kZWxldGUoe1xuICAgICAgY29sbGVjdGlvbjogJ3BheWxvYWQtbWlncmF0aW9ucycsXG4gICAgICB3aGVyZToge1xuICAgICAgICBiYXRjaDoge1xuICAgICAgICAgIGVxdWFsczogLTEsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgIHBheWxvYWQubG9nZ2VyLmVycm9yKHsgZXJyb3I6IGVyciwgbXNnOiAnRXJyb3IgZGVsZXRpbmcgZGV2IG1pZ3JhdGlvbicgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1pZ3JhdGVSZXNldCIsInBheWxvYWQiLCJtaWdyYXRpb25GaWxlcyIsInJlYWRNaWdyYXRpb25GaWxlcyIsImV4aXN0aW5nTWlncmF0aW9ucyIsImdldE1pZ3JhdGlvbnMiLCJsZW5ndGgiLCJsb2dnZXIiLCJpbmZvIiwibXNnIiwidHJhbnNhY3Rpb25JRCIsIm1pZ3JhdGlvbiIsImV4aXN0aW5nTWlncmF0aW9uIiwiZmluZCIsImV4aXN0aW5nIiwibmFtZSIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsImJlZ2luVHJhbnNhY3Rpb24iLCJkb3duIiwiZGVsZXRlIiwiY29sbGVjdGlvbiIsInJlcSIsIndoZXJlIiwiaWQiLCJlcXVhbHMiLCJjb21taXRUcmFuc2FjdGlvbiIsImVyciIsInJvbGxiYWNrVHJhbnNhY3Rpb24iLCJlcnJvciIsImJhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7Ozs7K0JBT25DQTs7O2VBQUFBOzs7K0JBSFE7b0NBQ0s7QUFFNUIsZUFBZUE7SUFDcEIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxJQUFJO0lBQ3hCLE1BQU1DLGlCQUFpQixNQUFNQyxJQUFBQSxzQ0FBa0IsRUFBQztRQUFFRjtJQUFRO0lBRTFELE1BQU0sRUFBRUcsa0JBQWtCLEVBQUUsR0FBRyxNQUFNQyxJQUFBQSw0QkFBYSxFQUFDO1FBQUVKO0lBQVE7SUFFN0QsSUFBSSxDQUFDRyxvQkFBb0JFLFFBQVE7UUFDL0JMLFFBQVFNLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO1lBQUVDLEtBQUs7UUFBMEI7UUFDckQ7SUFDRjtJQUVBLElBQUlDO0lBRUosbUNBQW1DO0lBQ25DLEtBQUssTUFBTUMsYUFBYVQsZUFBZ0I7UUFDdEMseUNBQXlDO1FBQ3pDLE1BQU1VLG9CQUFvQlIsbUJBQW1CUyxJQUFJLENBQy9DLENBQUNDLFdBQWFBLFNBQVNDLElBQUksS0FBS0osVUFBVUksSUFBSTtRQUVoRCxJQUFJSCxtQkFBbUI7WUFDckJYLFFBQVFNLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUVFLFVBQVVJLElBQUksQ0FBQyxDQUFDO1lBQUM7WUFDL0QsSUFBSTtnQkFDRixNQUFNQyxRQUFRQyxLQUFLQyxHQUFHO2dCQUN0QlIsZ0JBQWdCLE1BQU0sSUFBSSxDQUFDUyxnQkFBZ0I7Z0JBQzNDLE1BQU1SLFVBQVVTLElBQUksQ0FBQztvQkFBRW5CO2dCQUFRO2dCQUMvQixNQUFNQSxRQUFRb0IsTUFBTSxDQUFDO29CQUNuQkMsWUFBWTtvQkFDWkMsS0FBSzt3QkFBRWI7b0JBQWM7b0JBQ3JCYyxPQUFPO3dCQUNMQyxJQUFJOzRCQUNGQyxRQUFRZCxrQkFBa0JhLEVBQUU7d0JBQzlCO29CQUNGO2dCQUNGO2dCQUNBLE1BQU0sSUFBSSxDQUFDRSxpQkFBaUIsQ0FBQ2pCO2dCQUM3QlQsUUFBUU0sTUFBTSxDQUFDQyxJQUFJLENBQUM7b0JBQUVDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRUUsVUFBVUksSUFBSSxDQUFDLEVBQUUsRUFBRUUsS0FBS0MsR0FBRyxLQUFLRixNQUFNLEdBQUcsQ0FBQztnQkFBQztZQUMzRixFQUFFLE9BQU9ZLEtBQWM7Z0JBQ3JCLE1BQU0sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ25CO2dCQUMvQlQsUUFBUU0sTUFBTSxDQUFDdUIsS0FBSyxDQUFDO29CQUFFRjtvQkFBS25CLEtBQUssQ0FBQyx3QkFBd0IsRUFBRUUsVUFBVUksSUFBSSxDQUFDLENBQUM7Z0JBQUM7Z0JBQzdFLE1BQU1hO1lBQ1I7UUFDRjtJQUNGO0lBRUEsdUJBQXVCO0lBQ3ZCLElBQUk7UUFDRixNQUFNM0IsUUFBUW9CLE1BQU0sQ0FBQztZQUNuQkMsWUFBWTtZQUNaRSxPQUFPO2dCQUNMTyxPQUFPO29CQUNMTCxRQUFRLENBQUM7Z0JBQ1g7WUFDRjtRQUNGO0lBQ0YsRUFBRSxPQUFPRSxLQUFjO1FBQ3JCM0IsUUFBUU0sTUFBTSxDQUFDdUIsS0FBSyxDQUFDO1lBQUVBLE9BQU9GO1lBQUtuQixLQUFLO1FBQStCO0lBQ3pFO0FBQ0YifQ==