"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _getFileByPath = /*#__PURE__*/ _interop_require_default(require("../../../uploads/getFileByPath"));
const _dataloader = require("../../dataloader");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
const _updateByID = /*#__PURE__*/ _interop_require_default(require("../updateByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { id, autosave, collection: collectionSlug, context, data, depth, draft, fallbackLocale, file, filePath, locale = null, overrideAccess = true, overwriteExistingFiles = false, req: incomingReq, showHiddenFields, user, where } = options;
    const collection = payload.collections[collectionSlug];
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const defaultLocale = payload.config.localization ? payload.config.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Update Operation.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocale !== 'undefined' ? fallbackLocale : defaultLocale,
        files: {
            file: file ?? await (0, _getFileByPath.default)(filePath)
        },
        i18n,
        locale: locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        id,
        autosave,
        collection,
        data,
        depth,
        draft,
        overrideAccess,
        overwriteExistingFiles,
        payload,
        req,
        showHiddenFields,
        where
    };
    if (options.id) {
        return (0, _updateByID.default)(args);
    }
    return (0, _update.default)(args);
}
const _default = updateLocal;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL3VwZGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERlZXBQYXJ0aWFsIH0gZnJvbSAndHMtZXNzZW50aWFscydcblxuaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50LCBXaGVyZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBGaWxlIH0gZnJvbSAnLi4vLi4vLi4vdXBsb2Fkcy90eXBlcydcbmltcG9ydCB0eXBlIHsgQnVsa09wZXJhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uL2NvbmZpZy90eXBlcydcblxuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IGdldEZpbGVCeVBhdGggZnJvbSAnLi4vLi4vLi4vdXBsb2Fkcy9nZXRGaWxlQnlQYXRoJ1xuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uL2RhdGFsb2FkZXInXG5pbXBvcnQgdXBkYXRlIGZyb20gJy4uL3VwZGF0ZSdcbmltcG9ydCB1cGRhdGVCeUlEIGZyb20gJy4uL3VwZGF0ZUJ5SUQnXG5cbmV4cG9ydCB0eXBlIEJhc2VPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBhdXRvc2F2ZT86IGJvb2xlYW5cbiAgY29sbGVjdGlvbjogVFNsdWdcbiAgLyoqXG4gICAqIGNvbnRleHQsIHdoaWNoIHdpbGwgdGhlbiBiZSBwYXNzZWQgdG8gcmVxLmNvbnRleHQsIHdoaWNoIGNhbiBiZSByZWFkIGJ5IGhvb2tzXG4gICAqL1xuICBjb250ZXh0PzogUmVxdWVzdENvbnRleHRcbiAgZGF0YTogRGVlcFBhcnRpYWw8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddPlxuICBkZXB0aD86IG51bWJlclxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgZmlsZT86IEZpbGVcbiAgZmlsZVBhdGg/OiBzdHJpbmdcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICBvdmVyd3JpdGVFeGlzdGluZ0ZpbGVzPzogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IHR5cGUgQnlJRE9wdGlvbnM8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSBCYXNlT3B0aW9uczxUU2x1Zz4gJiB7XG4gIGlkOiBudW1iZXIgfCBzdHJpbmdcbiAgd2hlcmU/OiBuZXZlclxufVxuXG5leHBvcnQgdHlwZSBNYW55T3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IEJhc2VPcHRpb25zPFRTbHVnPiAmIHtcbiAgaWQ/OiBuZXZlclxuICB3aGVyZTogV2hlcmVcbn1cblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9XG4gIHwgQnlJRE9wdGlvbnM8VFNsdWc+XG4gIHwgTWFueU9wdGlvbnM8VFNsdWc+XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBCeUlET3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXT5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBNYW55T3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEJ1bGtPcGVyYXRpb25SZXN1bHQ8VFNsdWc+PlxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlTG9jYWw8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VFNsdWc+LFxuKTogUHJvbWlzZTxCdWxrT3BlcmF0aW9uUmVzdWx0PFRTbHVnPiB8IEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXT5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8QnVsa09wZXJhdGlvblJlc3VsdDxUU2x1Zz4gfCBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXVtUU2x1Z10+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGF1dG9zYXZlLFxuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBmaWxlLFxuICAgIGZpbGVQYXRoLFxuICAgIGxvY2FsZSA9IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIG92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMgPSBmYWxzZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgdXNlcixcbiAgICB3aGVyZSxcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoY29sbGVjdGlvblNsdWcpfSBjYW4ndCBiZSBmb3VuZC4gVXBkYXRlIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBmYWxsYmFja0xvY2FsZTogdHlwZW9mIGZhbGxiYWNrTG9jYWxlICE9PSAndW5kZWZpbmVkJyA/IGZhbGxiYWNrTG9jYWxlIDogZGVmYXVsdExvY2FsZSxcbiAgICBmaWxlczoge1xuICAgICAgZmlsZTogZmlsZSA/PyAoYXdhaXQgZ2V0RmlsZUJ5UGF0aChmaWxlUGF0aCkpLFxuICAgIH0sXG4gICAgaTE4bixcbiAgICBsb2NhbGU6IGxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0cmFuc2FjdGlvbklEOiBpbmNvbWluZ1JlcT8udHJhbnNhY3Rpb25JRCxcbiAgICB1c2VyLFxuICB9IGFzIFBheWxvYWRSZXF1ZXN0XG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgaWQsXG4gICAgYXV0b3NhdmUsXG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIG92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMsXG4gICAgcGF5bG9hZCxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICB3aGVyZSxcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlkKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUJ5SUQ8VFNsdWc+KGFyZ3MpXG4gIH1cbiAgcmV0dXJuIHVwZGF0ZTxUU2x1Zz4oYXJncylcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlTG9jYWxcbiJdLCJuYW1lcyI6WyJ1cGRhdGVMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiaWQiLCJhdXRvc2F2ZSIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImNvbnRleHQiLCJkYXRhIiwiZGVwdGgiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwiZmlsZSIsImZpbGVQYXRoIiwibG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJvdmVyd3JpdGVFeGlzdGluZ0ZpbGVzIiwicmVxIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwidXNlciIsIndoZXJlIiwiY29sbGVjdGlvbnMiLCJpMThuIiwiaTE4bkluaXQiLCJjb25maWciLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxpemF0aW9uIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJmaWxlcyIsImdldEZpbGVCeVBhdGgiLCJwYXlsb2FkQVBJIiwidHJhbnNhY3Rpb25JRCIsInNldFJlcXVlc3RDb250ZXh0IiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImFyZ3MiLCJ1cGRhdGVCeUlEIiwidXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7OytCQTBJQTs7O2VBQUE7Ozt3QkFqSXlCO21DQUNTO3NCQUNUO3NFQUNDOzRCQUNJOytEQUNYO21FQUNJOzs7Ozs7QUFpRHZCLGVBQWVBLFlBQ2JDLE9BQWdCLEVBQ2hCQyxPQUF1QjtJQUV2QixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsUUFBUSxFQUNSQyxZQUFZQyxjQUFjLEVBQzFCQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLGNBQWMsRUFDZEMsSUFBSSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsSUFBSSxFQUNiQyxpQkFBaUIsSUFBSSxFQUNyQkMseUJBQXlCLEtBQUssRUFDOUJDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsSUFBSSxFQUNKQyxLQUFLLEVBQ04sR0FBR25CO0lBRUosTUFBTUcsYUFBYUosUUFBUXFCLFdBQVcsQ0FBQ2hCLGVBQWU7SUFDdEQsTUFBTWlCLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3ZCLFFBQVF3QixNQUFNLENBQUNGLElBQUk7SUFDekMsTUFBTUcsZ0JBQWdCekIsUUFBUXdCLE1BQU0sQ0FBQ0UsWUFBWSxHQUM3QzFCLFFBQVF3QixNQUFNLENBQUNFLFlBQVksRUFBRUQsZ0JBQzdCO0lBRUosSUFBSSxDQUFDckIsWUFBWTtRQUNmLE1BQU0sSUFBSXVCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU92QixnQkFBZ0Isa0NBQWtDLENBQUM7SUFFMUY7SUFFQSxNQUFNVyxNQUFNO1FBQ1ZOLGdCQUFnQixPQUFPQSxtQkFBbUIsY0FBY0EsaUJBQWlCZTtRQUN6RUksT0FBTztZQUNMbEIsTUFBTUEsUUFBUyxNQUFNbUIsSUFBQUEsc0JBQWEsRUFBQ2xCO1FBQ3JDO1FBQ0FVO1FBQ0FULFFBQVFBLFVBQVVZO1FBQ2xCekI7UUFDQStCLFlBQVk7UUFDWkMsZUFBZWYsYUFBYWU7UUFDNUJiO0lBQ0Y7SUFDQWMsSUFBQUEsb0NBQWlCLEVBQUNqQixLQUFLVjtJQUV2QixJQUFJLENBQUNVLElBQUlrQixDQUFDLEVBQUVsQixJQUFJa0IsQ0FBQyxHQUFHbEIsSUFBSU0sSUFBSSxDQUFDWSxDQUFDO0lBQzlCLElBQUksQ0FBQ2xCLElBQUltQixpQkFBaUIsRUFBRW5CLElBQUltQixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ3BCO0lBRWxFLE1BQU1xQixPQUFPO1FBQ1huQztRQUNBQztRQUNBQztRQUNBRztRQUNBQztRQUNBQztRQUNBSztRQUNBQztRQUNBZjtRQUNBZ0I7UUFDQUU7UUFDQUU7SUFDRjtJQUVBLElBQUluQixRQUFRQyxFQUFFLEVBQUU7UUFDZCxPQUFPb0MsSUFBQUEsbUJBQVUsRUFBUUQ7SUFDM0I7SUFDQSxPQUFPRSxJQUFBQSxlQUFNLEVBQVFGO0FBQ3ZCO01BRUEsV0FBZXRDIn0=