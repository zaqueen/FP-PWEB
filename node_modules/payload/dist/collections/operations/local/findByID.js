"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findByIDLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _findByID = /*#__PURE__*/ _interop_require_default(require("../findByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findByIDLocal(payload, options) {
    const { id, collection: collectionSlug, context, currentDepth, depth, disableErrors = false, draft = false, fallbackLocale, locale = null, overrideAccess = true, req = {}, showHiddenFields, user } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find By ID Operation.`);
    }
    let fallbackLocaleToUse = defaultLocale;
    if (typeof req.fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = req.fallbackLocale;
    }
    if (typeof fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = fallbackLocale;
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale ?? req?.locale ?? defaultLocale;
    req.fallbackLocale = fallbackLocaleToUse;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (typeof user !== 'undefined') req.user = user;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findByID.default)({
        id,
        collection,
        currentDepth,
        depth,
        disableErrors,
        draft,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmRCeUlELnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0LCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCBmaW5kQnlJRCBmcm9tICcuLi9maW5kQnlJRCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgaWQ6IG51bWJlciB8IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmaW5kQnlJRExvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RdPiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzID0gZmFsc2UsXG4gICAgZHJhZnQgPSBmYWxzZSxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBsb2NhbGUgPSBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHVzZXIsXG4gIH0gPSBvcHRpb25zXG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSwgY29udGV4dClcblxuICBjb25zdCBjb2xsZWN0aW9uID0gcGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uU2x1Z11cbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uXG4gICAgPyBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoY29sbGVjdGlvblNsdWcpfSBjYW4ndCBiZSBmb3VuZC4gRmluZCBCeSBJRCBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICBsZXQgZmFsbGJhY2tMb2NhbGVUb1VzZSA9IGRlZmF1bHRMb2NhbGVcblxuICBpZiAodHlwZW9mIHJlcS5mYWxsYmFja0xvY2FsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmYWxsYmFja0xvY2FsZVRvVXNlID0gcmVxLmZhbGxiYWNrTG9jYWxlXG4gIH1cblxuICBpZiAodHlwZW9mIGZhbGxiYWNrTG9jYWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGZhbGxiYWNrTG9jYWxlVG9Vc2UgPSBmYWxsYmFja0xvY2FsZVxuICB9XG5cbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5sb2NhbGUgPSBsb2NhbGUgPz8gcmVxPy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZVxuICByZXEuZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFja0xvY2FsZVRvVXNlXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG5cbiAgaWYgKHR5cGVvZiB1c2VyICE9PSAndW5kZWZpbmVkJykgcmVxLnVzZXIgPSB1c2VyXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gZmluZEJ5SUQ8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+KHtcbiAgICBpZCxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzLFxuICAgIGRyYWZ0LFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRCeUlETG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImN1cnJlbnREZXB0aCIsImRlcHRoIiwiZGlzYWJsZUVycm9ycyIsImRyYWZ0IiwiZmFsbGJhY2tMb2NhbGUiLCJsb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsInNob3dIaWRkZW5GaWVsZHMiLCJ1c2VyIiwic2V0UmVxdWVzdENvbnRleHQiLCJjb2xsZWN0aW9ucyIsImRlZmF1bHRMb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJBUElFcnJvciIsIlN0cmluZyIsImZhbGxiYWNrTG9jYWxlVG9Vc2UiLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRCeUlEIl0sIm1hcHBpbmdzIjoiOzs7OytCQThCQTs7O2VBQThCQTs7O3dCQXpCTDttQ0FDUztzQkFDVDs0QkFDSztpRUFDVDs7Ozs7O0FBcUJOLGVBQWVBLGNBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLGdCQUFnQixLQUFLLEVBQ3JCQyxRQUFRLEtBQUssRUFDYkMsY0FBYyxFQUNkQyxTQUFTLElBQUksRUFDYkMsaUJBQWlCLElBQUksRUFDckJDLE1BQU0sQ0FBQyxDQUFtQixFQUMxQkMsZ0JBQWdCLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2Q7SUFDSmUsSUFBQUEsb0NBQWlCLEVBQUNILEtBQUtSO0lBRXZCLE1BQU1GLGFBQWFILFFBQVFpQixXQUFXLENBQUNiLGVBQWU7SUFDdEQsTUFBTWMsZ0JBQWdCbEIsU0FBU21CLFFBQVFDLGVBQ25DcEIsU0FBU21CLFFBQVFDLGNBQWNGLGdCQUMvQjtJQUVKLElBQUksQ0FBQ2YsWUFBWTtRQUNmLE1BQU0sSUFBSWtCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU9sQixnQkFBZ0Isc0NBQXNDLENBQUM7SUFFOUY7SUFFQSxJQUFJbUIsc0JBQXNCTDtJQUUxQixJQUFJLE9BQU9MLElBQUlILGNBQWMsS0FBSyxhQUFhO1FBQzdDYSxzQkFBc0JWLElBQUlILGNBQWM7SUFDMUM7SUFFQSxJQUFJLE9BQU9BLG1CQUFtQixhQUFhO1FBQ3pDYSxzQkFBc0JiO0lBQ3hCO0lBRUFHLElBQUlXLFVBQVUsR0FBR1gsSUFBSVcsVUFBVSxJQUFJO0lBQ25DWCxJQUFJRixNQUFNLEdBQUdBLFVBQVVFLEtBQUtGLFVBQVVPO0lBQ3RDTCxJQUFJSCxjQUFjLEdBQUdhO0lBQ3JCVixJQUFJWSxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQzFCLFFBQVFtQixNQUFNLENBQUNNLElBQUk7SUFDdkNaLElBQUliLE9BQU8sR0FBR0E7SUFFZCxJQUFJLE9BQU9lLFNBQVMsYUFBYUYsSUFBSUUsSUFBSSxHQUFHQTtJQUU1QyxJQUFJLENBQUNGLElBQUljLENBQUMsRUFBRWQsSUFBSWMsQ0FBQyxHQUFHZCxJQUFJWSxJQUFJLENBQUNFLENBQUM7SUFDOUIsSUFBSSxDQUFDZCxJQUFJZSxpQkFBaUIsRUFBRWYsSUFBSWUsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNoQjtJQUVsRSxPQUFPaUIsSUFBQUEsaUJBQVEsRUFBbUM7UUFDaEQ1QjtRQUNBQztRQUNBRztRQUNBQztRQUNBQztRQUNBQztRQUNBRztRQUNBQztRQUNBQztJQUNGO0FBQ0YifQ==