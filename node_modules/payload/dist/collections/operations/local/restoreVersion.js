"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return restoreVersionLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("../restoreVersion"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersionLocal(payload, options) {
    const { id, collection: collectionSlug, context, depth, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, user } = options;
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Restore Version Operation.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        id,
        collection,
        depth,
        overrideAccess,
        payload,
        req,
        showHiddenFields
    };
    return (0, _restoreVersion.default)(args);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL3Jlc3RvcmVWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0LCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCByZXN0b3JlVmVyc2lvbiBmcm9tICcuLi9yZXN0b3JlVmVyc2lvbidcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRyYWZ0PzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHJlc3RvcmVWZXJzaW9uTG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGVwdGgsXG4gICAgZmFsbGJhY2tMb2NhbGUgPSBudWxsLFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuXG4gIGlmICghY29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcbiAgICAgIGBUaGUgY29sbGVjdGlvbiB3aXRoIHNsdWcgJHtTdHJpbmcoXG4gICAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgKX0gY2FuJ3QgYmUgZm91bmQuIFJlc3RvcmUgVmVyc2lvbiBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgaWQsXG4gICAgY29sbGVjdGlvbixcbiAgICBkZXB0aCxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICBwYXlsb2FkLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9XG5cbiAgcmV0dXJuIHJlc3RvcmVWZXJzaW9uKGFyZ3MpXG59XG4iXSwibmFtZXMiOlsicmVzdG9yZVZlcnNpb25Mb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiaWQiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGVwdGgiLCJmYWxsYmFja0xvY2FsZSIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInVzZXIiLCJjb2xsZWN0aW9ucyIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJhcmdzIiwicmVzdG9yZVZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBNEJBOzs7ZUFBOEJBOzs7d0JBdkJMO21DQUNTO3NCQUNUOzRCQUNLO3VFQUNIOzs7Ozs7QUFtQlosZUFBZUEsb0JBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxpQkFBaUIsSUFBSSxFQUNyQkMsU0FBU1IsUUFBUVMsTUFBTSxDQUFDQyxZQUFZLEdBQUdWLFFBQVFTLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsSUFBSSxFQUNMLEdBQUdmO0lBRUosTUFBTUUsYUFBYUgsUUFBUWlCLFdBQVcsQ0FBQ2IsZUFBZTtJQUV0RCxJQUFJLENBQUNELFlBQVk7UUFDZixNQUFNLElBQUllLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQzFCZixnQkFDQSwyQ0FBMkMsQ0FBQztJQUVsRDtJQUVBLE1BQU1nQixPQUFPQyxJQUFBQSxjQUFRLEVBQUNyQixRQUFRUyxNQUFNLENBQUNXLElBQUk7SUFDekMsTUFBTVAsTUFBTTtRQUNWTjtRQUNBYTtRQUNBWjtRQUNBUjtRQUNBc0IsWUFBWTtRQUNaQyxHQUFHSCxLQUFLRyxDQUFDO1FBQ1RDLGVBQWVWLGFBQWFVO1FBQzVCUjtJQUNGO0lBQ0FTLElBQUFBLG9DQUFpQixFQUFDWixLQUFLUjtJQUV2QixJQUFJLENBQUNRLElBQUlhLGlCQUFpQixFQUFFYixJQUFJYSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2Q7SUFFbEUsTUFBTWUsT0FBTztRQUNYMUI7UUFDQUM7UUFDQUc7UUFDQU07UUFDQVo7UUFDQWE7UUFDQUU7SUFDRjtJQUVBLE9BQU9jLElBQUFBLHVCQUFjLEVBQUNEO0FBQ3hCIn0=