"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionByIDLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("../findVersionByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByIDLocal(payload, options) {
    const { id, collection: collectionSlug, context, depth, disableErrors = false, fallbackLocale, locale = null, overrideAccess = true, req = {}, showHiddenFields } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find Version By ID Operation.`);
    }
    let fallbackLocaleToUse = defaultLocale;
    if (typeof req.fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = req.fallbackLocale;
    }
    if (typeof fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = fallbackLocale;
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale ?? req?.locale ?? defaultLocale;
    req.fallbackLocale = fallbackLocaleToUse;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersionByID.default)({
        id,
        collection,
        depth,
        disableErrors,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmRWZXJzaW9uQnlJRC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB0eXBlIHsgVHlwZVdpdGhWZXJzaW9uIH0gZnJvbSAnLi4vLi4vLi4vdmVyc2lvbnMvdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGZpbmRWZXJzaW9uQnlJRCBmcm9tICcuLi9maW5kVmVyc2lvbkJ5SUQnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFxuICAvKipcbiAgICogY29udGV4dCwgd2hpY2ggd2lsbCB0aGVuIGJlIHBhc3NlZCB0byByZXEuY29udGV4dCwgd2hpY2ggY2FuIGJlIHJlYWQgYnkgaG9va3NcbiAgICovXG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbkJ5SURMb2NhbDxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+PiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGRpc2FibGVFcnJvcnMgPSBmYWxzZSxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBsb2NhbGUgPSBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9ID0gb3B0aW9uc1xuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IHBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICAgID8gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKFxuICAgICAgICBjb2xsZWN0aW9uU2x1ZyxcbiAgICAgICl9IGNhbid0IGJlIGZvdW5kLiBGaW5kIFZlcnNpb24gQnkgSUQgT3BlcmF0aW9uLmAsXG4gICAgKVxuICB9XG5cbiAgbGV0IGZhbGxiYWNrTG9jYWxlVG9Vc2UgPSBkZWZhdWx0TG9jYWxlXG5cbiAgaWYgKHR5cGVvZiByZXEuZmFsbGJhY2tMb2NhbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZmFsbGJhY2tMb2NhbGVUb1VzZSA9IHJlcS5mYWxsYmFja0xvY2FsZVxuICB9XG5cbiAgaWYgKHR5cGVvZiBmYWxsYmFja0xvY2FsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmYWxsYmFja0xvY2FsZVRvVXNlID0gZmFsbGJhY2tMb2NhbGVcbiAgfVxuXG4gIHJlcS5wYXlsb2FkQVBJID0gcmVxLnBheWxvYWRBUEkgfHwgJ2xvY2FsJ1xuICByZXEubG9jYWxlID0gbG9jYWxlID8/IHJlcT8ubG9jYWxlID8/IGRlZmF1bHRMb2NhbGVcbiAgcmVxLmZhbGxiYWNrTG9jYWxlID0gZmFsbGJhY2tMb2NhbGVUb1VzZVxuICByZXEuaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG4gIHJlcS5wYXlsb2FkID0gcGF5bG9hZFxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGZpbmRWZXJzaW9uQnlJRCh7XG4gICAgaWQsXG4gICAgY29sbGVjdGlvbixcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRWZXJzaW9uQnlJRExvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJpZCIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImNvbnRleHQiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJmYWxsYmFja0xvY2FsZSIsImxvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNldFJlcXVlc3RDb250ZXh0IiwiY29sbGVjdGlvbnMiLCJkZWZhdWx0TG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJmYWxsYmFja0xvY2FsZVRvVXNlIiwicGF5bG9hZEFQSSIsImkxOG4iLCJpMThuSW5pdCIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbkJ5SUQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBOEJBOzs7ZUFBOEJBOzs7d0JBeEJMO21DQUNTO3NCQUNUOzRCQUNLO3dFQUNGOzs7Ozs7QUFvQmIsZUFBZUEscUJBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxnQkFBZ0IsS0FBSyxFQUNyQkMsY0FBYyxFQUNkQyxTQUFTLElBQUksRUFDYkMsaUJBQWlCLElBQUksRUFDckJDLE1BQU0sQ0FBQyxDQUFtQixFQUMxQkMsZ0JBQWdCLEVBQ2pCLEdBQUdYO0lBQ0pZLElBQUFBLG9DQUFpQixFQUFDRixLQUFLTjtJQUV2QixNQUFNRixhQUFhSCxRQUFRYyxXQUFXLENBQUNWLGVBQWU7SUFDdEQsTUFBTVcsZ0JBQWdCZixTQUFTZ0IsUUFBUUMsZUFDbkNqQixTQUFTZ0IsUUFBUUMsY0FBY0YsZ0JBQy9CO0lBRUosSUFBSSxDQUFDWixZQUFZO1FBQ2YsTUFBTSxJQUFJZSxnQkFBUSxDQUNoQixDQUFDLHlCQUF5QixFQUFFQyxPQUMxQmYsZ0JBQ0EsOENBQThDLENBQUM7SUFFckQ7SUFFQSxJQUFJZ0Isc0JBQXNCTDtJQUUxQixJQUFJLE9BQU9KLElBQUlILGNBQWMsS0FBSyxhQUFhO1FBQzdDWSxzQkFBc0JULElBQUlILGNBQWM7SUFDMUM7SUFFQSxJQUFJLE9BQU9BLG1CQUFtQixhQUFhO1FBQ3pDWSxzQkFBc0JaO0lBQ3hCO0lBRUFHLElBQUlVLFVBQVUsR0FBR1YsSUFBSVUsVUFBVSxJQUFJO0lBQ25DVixJQUFJRixNQUFNLEdBQUdBLFVBQVVFLEtBQUtGLFVBQVVNO0lBQ3RDSixJQUFJSCxjQUFjLEdBQUdZO0lBQ3JCVCxJQUFJVyxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQ3ZCLFFBQVFnQixNQUFNLENBQUNNLElBQUk7SUFDdkNYLElBQUlYLE9BQU8sR0FBR0E7SUFFZCxJQUFJLENBQUNXLElBQUlhLENBQUMsRUFBRWIsSUFBSWEsQ0FBQyxHQUFHYixJQUFJVyxJQUFJLENBQUNFLENBQUM7SUFDOUIsSUFBSSxDQUFDYixJQUFJYyxpQkFBaUIsRUFBRWQsSUFBSWMsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNmO0lBRWxFLE9BQU9nQixJQUFBQSx3QkFBZSxFQUFDO1FBQ3JCekI7UUFDQUM7UUFDQUc7UUFDQUM7UUFDQUc7UUFDQUM7UUFDQUM7SUFDRjtBQUNGIn0=