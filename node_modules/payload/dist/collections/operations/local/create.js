"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _getFileByPath = /*#__PURE__*/ _interop_require_default(require("../../../uploads/getFileByPath"));
const _dataloader = require("../../dataloader");
const _create = /*#__PURE__*/ _interop_require_default(require("../create"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function createLocal(payload, options) {
    const { collection: collectionSlug, context, data, depth, disableVerificationEmail, draft, fallbackLocale, file, filePath, locale = null, overrideAccess = true, overwriteExistingFiles = false, req = {}, showHiddenFields, user } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Create Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale ?? req?.locale ?? defaultLocale;
    req.fallbackLocale = fallbackLocale !== 'undefined' ? fallbackLocale : defaultLocale;
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.files = {
        file: file ?? await (0, _getFileByPath.default)(filePath)
    };
    if (typeof user !== 'undefined') req.user = user;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _create.default)({
        collection,
        data,
        depth,
        disableVerificationEmail,
        draft,
        overrideAccess,
        overwriteExistingFiles,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2NyZWF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVwbG9hZGVkRmlsZSB9IGZyb20gJ2V4cHJlc3MtZmlsZXVwbG9hZCdcbmltcG9ydCB0eXBlIHsgTWFya09wdGlvbmFsIH0gZnJvbSAndHMtZXNzZW50aWFscydcblxuaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpbGUgfSBmcm9tICcuLi8uLi8uLi91cGxvYWRzL3R5cGVzJ1xuXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZ2V0RmlsZUJ5UGF0aCBmcm9tICcuLi8uLi8uLi91cGxvYWRzL2dldEZpbGVCeVBhdGgnXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vZGF0YWxvYWRlcidcbmltcG9ydCBjcmVhdGUgZnJvbSAnLi4vY3JlYXRlJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUU2x1Z1xuICAvKipcbiAgICogY29udGV4dCwgd2hpY2ggd2lsbCB0aGVuIGJlIHBhc3NlZCB0byByZXEuY29udGV4dCwgd2hpY2ggY2FuIGJlIHJlYWQgYnkgaG9va3NcbiAgICovXG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkYXRhOiBNYXJrT3B0aW9uYWw8XG4gICAgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddLFxuICAgICdjcmVhdGVkQXQnIHwgJ2lkJyB8ICdzaXplcycgfCAndXBkYXRlZEF0J1xuICA+XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRpc2FibGVWZXJpZmljYXRpb25FbWFpbD86IGJvb2xlYW5cbiAgZHJhZnQ/OiBib29sZWFuXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGZpbGU/OiBGaWxlXG4gIGZpbGVQYXRoPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddPiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZVZlcmlmaWNhdGlvbkVtYWlsLFxuICAgIGRyYWZ0LFxuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGZpbGUsXG4gICAgZmlsZVBhdGgsXG4gICAgbG9jYWxlID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcyA9IGZhbHNlLFxuICAgIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgdXNlcixcbiAgfSA9IG9wdGlvbnNcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlXG4gICAgOiBudWxsXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhjb2xsZWN0aW9uU2x1Zyl9IGNhbid0IGJlIGZvdW5kLiBDcmVhdGUgT3BlcmF0aW9uLmAsXG4gICAgKVxuICB9XG5cbiAgcmVxLnBheWxvYWRBUEkgPSByZXEucGF5bG9hZEFQSSB8fCAnbG9jYWwnXG4gIHJlcS5sb2NhbGUgPSBsb2NhbGUgPz8gcmVxPy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZVxuICByZXEuZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFja0xvY2FsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFja0xvY2FsZSA6IGRlZmF1bHRMb2NhbGVcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgcmVxLmZpbGVzID0ge1xuICAgIGZpbGU6IChmaWxlID8/IChhd2FpdCBnZXRGaWxlQnlQYXRoKGZpbGVQYXRoKSkpIGFzIFVwbG9hZGVkRmlsZSxcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXNlciAhPT0gJ3VuZGVmaW5lZCcpIHJlcS51c2VyID0gdXNlclxuXG4gIGlmICghcmVxLnQpIHJlcS50ID0gcmVxLmkxOG4udFxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGNyZWF0ZTxUU2x1Zz4oe1xuICAgIGNvbGxlY3Rpb24sXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlVmVyaWZpY2F0aW9uRW1haWwsXG4gICAgZHJhZnQsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgb3ZlcndyaXRlRXhpc3RpbmdGaWxlcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImRhdGEiLCJkZXB0aCIsImRpc2FibGVWZXJpZmljYXRpb25FbWFpbCIsImRyYWZ0IiwiZmFsbGJhY2tMb2NhbGUiLCJmaWxlIiwiZmlsZVBhdGgiLCJsb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsIm92ZXJ3cml0ZUV4aXN0aW5nRmlsZXMiLCJyZXEiLCJzaG93SGlkZGVuRmllbGRzIiwidXNlciIsInNldFJlcXVlc3RDb250ZXh0IiwiY29sbGVjdGlvbnMiLCJkZWZhdWx0TG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwiZmlsZXMiLCJnZXRGaWxlQnlQYXRoIiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImNyZWF0ZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3Q0E7OztlQUE4QkE7Ozt3QkEvQkw7bUNBQ1M7c0JBQ1Q7c0VBQ0M7NEJBQ0k7K0RBQ1g7Ozs7OztBQTBCSixlQUFlQSxZQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQXVCO0lBRXZCLE1BQU0sRUFDSkMsWUFBWUMsY0FBYyxFQUMxQkMsT0FBTyxFQUNQQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsd0JBQXdCLEVBQ3hCQyxLQUFLLEVBQ0xDLGNBQWMsRUFDZEMsSUFBSSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsSUFBSSxFQUNiQyxpQkFBaUIsSUFBSSxFQUNyQkMseUJBQXlCLEtBQUssRUFDOUJDLE1BQU0sQ0FBQyxDQUFtQixFQUMxQkMsZ0JBQWdCLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2hCO0lBQ0ppQixJQUFBQSxvQ0FBaUIsRUFBQ0gsS0FBS1g7SUFFdkIsTUFBTUYsYUFBYUYsUUFBUW1CLFdBQVcsQ0FBQ2hCLGVBQWU7SUFDdEQsTUFBTWlCLGdCQUFnQnBCLFNBQVNxQixRQUFRQyxlQUNuQ3RCLFNBQVNxQixRQUFRQyxjQUFjRixnQkFDL0I7SUFFSixJQUFJLENBQUNsQixZQUFZO1FBQ2YsTUFBTSxJQUFJcUIsZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FBT3JCLGdCQUFnQixrQ0FBa0MsQ0FBQztJQUUxRjtJQUVBWSxJQUFJVSxVQUFVLEdBQUdWLElBQUlVLFVBQVUsSUFBSTtJQUNuQ1YsSUFBSUgsTUFBTSxHQUFHQSxVQUFVRyxLQUFLSCxVQUFVUTtJQUN0Q0wsSUFBSU4sY0FBYyxHQUFHQSxtQkFBbUIsY0FBY0EsaUJBQWlCVztJQUN2RUwsSUFBSWYsT0FBTyxHQUFHQTtJQUNkZSxJQUFJVyxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQzNCLFFBQVFxQixNQUFNLENBQUNLLElBQUk7SUFDdkNYLElBQUlhLEtBQUssR0FBRztRQUNWbEIsTUFBT0EsUUFBUyxNQUFNbUIsSUFBQUEsc0JBQWEsRUFBQ2xCO0lBQ3RDO0lBRUEsSUFBSSxPQUFPTSxTQUFTLGFBQWFGLElBQUlFLElBQUksR0FBR0E7SUFFNUMsSUFBSSxDQUFDRixJQUFJZSxDQUFDLEVBQUVmLElBQUllLENBQUMsR0FBR2YsSUFBSVcsSUFBSSxDQUFDSSxDQUFDO0lBQzlCLElBQUksQ0FBQ2YsSUFBSWdCLGlCQUFpQixFQUFFaEIsSUFBSWdCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDakI7SUFFbEUsT0FBT2tCLElBQUFBLGVBQU0sRUFBUTtRQUNuQi9CO1FBQ0FHO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FLO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0Y7QUFDRiJ9