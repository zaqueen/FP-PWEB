"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findLocal;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _find = /*#__PURE__*/ _interop_require_default(require("../find"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findLocal(payload, options) {
    const { collection: collectionSlug, context, currentDepth, depth, disableErrors, draft = false, fallbackLocale, limit, locale = null, overrideAccess = true, page, pagination = true, req = {}, showHiddenFields, sort, user, where } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Find Operation.`);
    }
    let fallbackLocaleToUse = defaultLocale;
    if (typeof req.fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = req.fallbackLocale;
    }
    if (typeof fallbackLocale !== 'undefined') {
        fallbackLocaleToUse = fallbackLocale;
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.locale = locale ?? req?.locale ?? defaultLocale;
    req.fallbackLocale = fallbackLocaleToUse;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.payload = payload;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    if (typeof user !== 'undefined') req.user = user;
    return (0, _find.default)({
        collection,
        currentDepth,
        depth,
        disableErrors,
        draft,
        limit,
        overrideAccess,
        page,
        pagination,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2ZpbmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGFnaW5hdGVkRG9jcyB9IGZyb20gJy4uLy4uLy4uL2RhdGFiYXNlL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIFdoZXJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vZmluZCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGN1cnJlbnREZXB0aD86IG51bWJlclxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgbGltaXQ/OiBudW1iZXJcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICBwYWdlPzogbnVtYmVyXG4gIHBhZ2luYXRpb24/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNvcnQ/OiBzdHJpbmdcbiAgdXNlcj86IERvY3VtZW50XG4gIHdoZXJlPzogV2hlcmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZExvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFBhZ2luYXRlZERvY3M8R2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVF0+PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uU2x1ZyxcbiAgICBjb250ZXh0LFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzLFxuICAgIGRyYWZ0ID0gZmFsc2UsXG4gICAgZmFsbGJhY2tMb2NhbGUsXG4gICAgbGltaXQsXG4gICAgbG9jYWxlID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uID0gdHJ1ZSxcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNvcnQsXG4gICAgdXNlcixcbiAgICB3aGVyZSxcbiAgfSA9IG9wdGlvbnNcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25TbHVnXVxuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb25cbiAgICA/IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlXG4gICAgOiBudWxsXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhjb2xsZWN0aW9uU2x1Zyl9IGNhbid0IGJlIGZvdW5kLiBGaW5kIE9wZXJhdGlvbi5gLFxuICAgIClcbiAgfVxuXG4gIGxldCBmYWxsYmFja0xvY2FsZVRvVXNlID0gZGVmYXVsdExvY2FsZVxuXG4gIGlmICh0eXBlb2YgcmVxLmZhbGxiYWNrTG9jYWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGZhbGxiYWNrTG9jYWxlVG9Vc2UgPSByZXEuZmFsbGJhY2tMb2NhbGVcbiAgfVxuXG4gIGlmICh0eXBlb2YgZmFsbGJhY2tMb2NhbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZmFsbGJhY2tMb2NhbGVUb1VzZSA9IGZhbGxiYWNrTG9jYWxlXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLmxvY2FsZSA9IGxvY2FsZSA/PyByZXE/LmxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlXG4gIHJlcS5mYWxsYmFja0xvY2FsZSA9IGZhbGxiYWNrTG9jYWxlVG9Vc2VcbiAgcmVxLmkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuICByZXEucGF5bG9hZCA9IHBheWxvYWRcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIGlmICh0eXBlb2YgdXNlciAhPT0gJ3VuZGVmaW5lZCcpIHJlcS51c2VyID0gdXNlclxuXG4gIHJldHVybiBmaW5kPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RdPih7XG4gICAgY29sbGVjdGlvbixcbiAgICBjdXJyZW50RGVwdGgsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyxcbiAgICBkcmFmdCxcbiAgICBsaW1pdCxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICBwYWdlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc29ydCxcbiAgICB3aGVyZSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJmaW5kTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uU2x1ZyIsImNvbnRleHQiLCJjdXJyZW50RGVwdGgiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwibGltaXQiLCJsb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInBhZ2UiLCJwYWdpbmF0aW9uIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNvcnQiLCJ1c2VyIiwid2hlcmUiLCJzZXRSZXF1ZXN0Q29udGV4dCIsImNvbGxlY3Rpb25zIiwiZGVmYXVsdExvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsIkFQSUVycm9yIiwiU3RyaW5nIiwiZmFsbGJhY2tMb2NhbGVUb1VzZSIsInBheWxvYWRBUEkiLCJpMThuIiwiaTE4bkluaXQiLCJ0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwiZmluZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFtQ0E7OztlQUE4QkE7Ozt3QkE3Qkw7bUNBQ1M7c0JBQ1Q7NEJBQ0s7NkRBQ2I7Ozs7OztBQXlCRixlQUFlQSxVQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQW1CO0lBRW5CLE1BQU0sRUFDSkMsWUFBWUMsY0FBYyxFQUMxQkMsT0FBTyxFQUNQQyxZQUFZLEVBQ1pDLEtBQUssRUFDTEMsYUFBYSxFQUNiQyxRQUFRLEtBQUssRUFDYkMsY0FBYyxFQUNkQyxLQUFLLEVBQ0xDLFNBQVMsSUFBSSxFQUNiQyxpQkFBaUIsSUFBSSxFQUNyQkMsSUFBSSxFQUNKQyxhQUFhLElBQUksRUFDakJDLE1BQU0sQ0FBQyxDQUFtQixFQUMxQkMsZ0JBQWdCLEVBQ2hCQyxJQUFJLEVBQ0pDLElBQUksRUFDSkMsS0FBSyxFQUNOLEdBQUdsQjtJQUNKbUIsSUFBQUEsb0NBQWlCLEVBQUNMLEtBQUtYO0lBRXZCLE1BQU1GLGFBQWFGLFFBQVFxQixXQUFXLENBQUNsQixlQUFlO0lBQ3RELE1BQU1tQixnQkFBZ0J0QixTQUFTdUIsUUFBUUMsZUFDbkN4QixTQUFTdUIsUUFBUUMsY0FBY0YsZ0JBQy9CO0lBRUosSUFBSSxDQUFDcEIsWUFBWTtRQUNmLE1BQU0sSUFBSXVCLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU92QixnQkFBZ0IsZ0NBQWdDLENBQUM7SUFFeEY7SUFFQSxJQUFJd0Isc0JBQXNCTDtJQUUxQixJQUFJLE9BQU9QLElBQUlOLGNBQWMsS0FBSyxhQUFhO1FBQzdDa0Isc0JBQXNCWixJQUFJTixjQUFjO0lBQzFDO0lBRUEsSUFBSSxPQUFPQSxtQkFBbUIsYUFBYTtRQUN6Q2tCLHNCQUFzQmxCO0lBQ3hCO0lBRUFNLElBQUlhLFVBQVUsR0FBR2IsSUFBSWEsVUFBVSxJQUFJO0lBQ25DYixJQUFJSixNQUFNLEdBQUdBLFVBQVVJLEtBQUtKLFVBQVVXO0lBQ3RDUCxJQUFJTixjQUFjLEdBQUdrQjtJQUNyQlosSUFBSWMsSUFBSSxHQUFHQyxJQUFBQSxjQUFRLEVBQUM5QixRQUFRdUIsTUFBTSxDQUFDTSxJQUFJO0lBQ3ZDZCxJQUFJZixPQUFPLEdBQUdBO0lBRWQsSUFBSSxDQUFDZSxJQUFJZ0IsQ0FBQyxFQUFFaEIsSUFBSWdCLENBQUMsR0FBR2hCLElBQUljLElBQUksQ0FBQ0UsQ0FBQztJQUM5QixJQUFJLENBQUNoQixJQUFJaUIsaUJBQWlCLEVBQUVqQixJQUFJaUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNsQjtJQUVsRSxJQUFJLE9BQU9HLFNBQVMsYUFBYUgsSUFBSUcsSUFBSSxHQUFHQTtJQUU1QyxPQUFPZ0IsSUFBQUEsYUFBSSxFQUFtQztRQUM1Q2hDO1FBQ0FHO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FFO0lBQ0Y7QUFDRiJ9