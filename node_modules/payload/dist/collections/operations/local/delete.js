"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _dataloader = require("../../dataloader");
const _delete = /*#__PURE__*/ _interop_require_default(require("../delete"));
const _deleteByID = /*#__PURE__*/ _interop_require_default(require("../deleteByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function deleteLocal(payload, options) {
    const { id, collection: collectionSlug, context, depth, fallbackLocale, locale = null, overrideAccess = true, req: incomingReq, showHiddenFields, user, where } = options;
    const collection = payload.collections[collectionSlug];
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Delete Operation.`);
    }
    const req = {
        fallbackLocale: typeof fallbackLocale !== 'undefined' ? fallbackLocale : defaultLocale,
        i18n: (0, _init.i18nInit)(payload.config.i18n),
        locale: locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        id,
        collection,
        depth,
        overrideAccess,
        req,
        showHiddenFields,
        where
    };
    if (options.id) {
        return (0, _deleteByID.default)(args);
    }
    return (0, _delete.default)(args);
}
const _default = deleteLocal;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2xvY2FsL2RlbGV0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCwgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIFdoZXJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEJ1bGtPcGVyYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi9jb25maWcvdHlwZXMnXG5cbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi9kYXRhbG9hZGVyJ1xuaW1wb3J0IGRlbGV0ZU9wZXJhdGlvbiBmcm9tICcuLi9kZWxldGUnXG5pbXBvcnQgZGVsZXRlQnlJRCBmcm9tICcuLi9kZWxldGVCeUlEJ1xuXG5leHBvcnQgdHlwZSBCYXNlT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+ID0ge1xuICBjb2xsZWN0aW9uOiBUXG4gIC8qKlxuICAgKiBjb250ZXh0LCB3aGljaCB3aWxsIHRoZW4gYmUgcGFzc2VkIHRvIHJlcS5jb250ZXh0LCB3aGljaCBjYW4gYmUgcmVhZCBieSBob29rc1xuICAgKi9cbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRlcHRoPzogbnVtYmVyXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCB0eXBlIEJ5SURPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSBCYXNlT3B0aW9uczxUPiAmIHtcbiAgaWQ6IG51bWJlciB8IHN0cmluZ1xuICB3aGVyZT86IG5ldmVyXG59XG5cbmV4cG9ydCB0eXBlIE1hbnlPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4gPSBCYXNlT3B0aW9uczxUPiAmIHtcbiAgaWQ/OiBuZXZlclxuICB3aGVyZTogV2hlcmVcbn1cblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9XG4gIHwgQnlJRE9wdGlvbnM8VFNsdWc+XG4gIHwgTWFueU9wdGlvbnM8VFNsdWc+XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBCeUlET3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXT5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBNYW55T3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEJ1bGtPcGVyYXRpb25SZXN1bHQ8VFNsdWc+PlxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlTG9jYWw8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VFNsdWc+LFxuKTogUHJvbWlzZTxCdWxrT3BlcmF0aW9uUmVzdWx0PFRTbHVnPiB8IEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddW1RTbHVnXT5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxvY2FsPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8QnVsa09wZXJhdGlvblJlc3VsdDxUU2x1Zz4gfCBHZW5lcmF0ZWRUeXBlc1snY29sbGVjdGlvbnMnXVtUU2x1Z10+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGVwdGgsXG4gICAgZmFsbGJhY2tMb2NhbGUsXG4gICAgbG9jYWxlID0gbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxOiBpbmNvbWluZ1JlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHVzZXIsXG4gICAgd2hlcmUsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IHBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICAgID8gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXG4gICAgICBgVGhlIGNvbGxlY3Rpb24gd2l0aCBzbHVnICR7U3RyaW5nKGNvbGxlY3Rpb25TbHVnKX0gY2FuJ3QgYmUgZm91bmQuIERlbGV0ZSBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGU6IHR5cGVvZiBmYWxsYmFja0xvY2FsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFja0xvY2FsZSA6IGRlZmF1bHRMb2NhbGUsXG4gICAgaTE4bjogaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4biksXG4gICAgbG9jYWxlOiBsb2NhbGUgPz8gZGVmYXVsdExvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEudCkgcmVxLnQgPSByZXEuaTE4bi50XG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICBjb25zdCBhcmdzID0ge1xuICAgIGlkLFxuICAgIGNvbGxlY3Rpb24sXG4gICAgZGVwdGgsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgd2hlcmUsXG4gIH1cblxuICBpZiAob3B0aW9ucy5pZCkge1xuICAgIHJldHVybiBkZWxldGVCeUlEPFRTbHVnPihhcmdzKVxuICB9XG4gIHJldHVybiBkZWxldGVPcGVyYXRpb248VFNsdWc+KGFyZ3MpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlbGV0ZUxvY2FsXG4iXSwibmFtZXMiOlsiZGVsZXRlTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TbHVnIiwiY29udGV4dCIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJsb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInVzZXIiLCJ3aGVyZSIsImNvbGxlY3Rpb25zIiwiZGVmYXVsdExvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicGF5bG9hZEFQSSIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJhcmdzIiwiZGVsZXRlQnlJRCIsImRlbGV0ZU9wZXJhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFpSEE7OztlQUFBOzs7d0JBM0d5QjttQ0FDUztzQkFDVDs0QkFDSzsrREFDRjttRUFDTDs7Ozs7O0FBMkN2QixlQUFlQSxZQUNiQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLFlBQVlDLGNBQWMsRUFDMUJDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxjQUFjLEVBQ2RDLFNBQVMsSUFBSSxFQUNiQyxpQkFBaUIsSUFBSSxFQUNyQkMsS0FBS0MsV0FBVyxFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxJQUFJLEVBQ0pDLEtBQUssRUFDTixHQUFHYjtJQUVKLE1BQU1FLGFBQWFILFFBQVFlLFdBQVcsQ0FBQ1gsZUFBZTtJQUN0RCxNQUFNWSxnQkFBZ0JoQixTQUFTaUIsUUFBUUMsZUFDbkNsQixTQUFTaUIsUUFBUUMsY0FBY0YsZ0JBQy9CO0lBRUosSUFBSSxDQUFDYixZQUFZO1FBQ2YsTUFBTSxJQUFJZ0IsZ0JBQVEsQ0FDaEIsQ0FBQyx5QkFBeUIsRUFBRUMsT0FBT2hCLGdCQUFnQixrQ0FBa0MsQ0FBQztJQUUxRjtJQUVBLE1BQU1NLE1BQU07UUFDVkgsZ0JBQWdCLE9BQU9BLG1CQUFtQixjQUFjQSxpQkFBaUJTO1FBQ3pFSyxNQUFNQyxJQUFBQSxjQUFRLEVBQUN0QixRQUFRaUIsTUFBTSxDQUFDSSxJQUFJO1FBQ2xDYixRQUFRQSxVQUFVUTtRQUNsQmhCO1FBQ0F1QixZQUFZO1FBQ1pDLGVBQWViLGFBQWFhO1FBQzVCWDtJQUNGO0lBQ0FZLElBQUFBLG9DQUFpQixFQUFDZixLQUFLTDtJQUV2QixJQUFJLENBQUNLLElBQUlnQixDQUFDLEVBQUVoQixJQUFJZ0IsQ0FBQyxHQUFHaEIsSUFBSVcsSUFBSSxDQUFDSyxDQUFDO0lBQzlCLElBQUksQ0FBQ2hCLElBQUlpQixpQkFBaUIsRUFBRWpCLElBQUlpQixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2xCO0lBRWxFLE1BQU1tQixPQUFPO1FBQ1gzQjtRQUNBQztRQUNBRztRQUNBRztRQUNBQztRQUNBRTtRQUNBRTtJQUNGO0lBRUEsSUFBSWIsUUFBUUMsRUFBRSxFQUFFO1FBQ2QsT0FBTzRCLElBQUFBLG1CQUFVLEVBQVFEO0lBQzNCO0lBQ0EsT0FBT0UsSUFBQUEsZUFBZSxFQUFRRjtBQUNoQztNQUVBLFdBQWU5QiJ9