"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _combineQueries = require("../../database/combineQueries");
const _validateQueryPaths = require("../../database/queryValidation/validateQueryPaths");
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _buildCollectionFields = require("../../versions/buildCollectionFields");
const _appendVersionToQueryKey = require("../../versions/drafts/appendVersionToQueryKey");
const _getQueryDraftsSort = require("../../versions/drafts/getQueryDraftsSort");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function find(incomingArgs) {
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        args = await hook({
            args,
            collection: args.collection.config,
            context: args.req.context,
            operation: 'read'
        }) || args;
    }, Promise.resolve());
    const { collection: { config: collectionConfig }, collection, currentDepth, depth, disableErrors, draft: draftsEnabled, limit, overrideAccess, page, pagination = true, req: { locale, payload }, req, showHiddenFields, sort, where } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        let accessResult;
        if (!overrideAccess) {
            accessResult = await (0, _executeAccess.default)({
                disableErrors,
                req
            }, collectionConfig.access.read);
            // If errors are disabled, and access returns false, return empty results
            if (accessResult === false) {
                return {
                    docs: [],
                    hasNextPage: false,
                    hasPrevPage: false,
                    limit,
                    nextPage: null,
                    page: 1,
                    pagingCounter: 1,
                    prevPage: null,
                    totalDocs: 0,
                    totalPages: 1
                };
            }
        }
        // /////////////////////////////////////
        // Find
        // /////////////////////////////////////
        const usePagination = pagination && limit !== 0;
        const sanitizedLimit = limit ?? (usePagination ? 10 : 0);
        const sanitizedPage = page || 1;
        let result;
        let fullWhere = (0, _combineQueries.combineQueries)(where, accessResult);
        if (collectionConfig.versions?.drafts && draftsEnabled) {
            fullWhere = (0, _appendVersionToQueryKey.appendVersionToQueryKey)(fullWhere);
            await (0, _validateQueryPaths.validateQueryPaths)({
                collectionConfig: collection.config,
                overrideAccess,
                req,
                versionFields: (0, _buildCollectionFields.buildVersionCollectionFields)(collection.config),
                where: fullWhere
            });
            result = await payload.db.queryDrafts({
                collection: collectionConfig.slug,
                limit: sanitizedLimit,
                locale,
                page: sanitizedPage,
                pagination: usePagination,
                req,
                sort: (0, _getQueryDraftsSort.getQueryDraftsSort)(sort),
                where: fullWhere
            });
        } else {
            await (0, _validateQueryPaths.validateQueryPaths)({
                collectionConfig,
                overrideAccess,
                req,
                where
            });
            result = await payload.db.find({
                collection: collectionConfig.slug,
                limit: sanitizedLimit,
                locale,
                page: sanitizedPage,
                pagination,
                req,
                sort,
                where: fullWhere
            });
        }
        // /////////////////////////////////////
        // beforeRead - Collection
        // /////////////////////////////////////
        result = {
            ...result,
            docs: await Promise.all(result.docs.map(async (doc)=>{
                let docRef = doc;
                await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    docRef = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        doc: docRef,
                        query: fullWhere,
                        req
                    }) || docRef;
                }, Promise.resolve());
                return docRef;
            }))
        };
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result = {
            ...result,
            docs: await Promise.all(result.docs.map(async (doc)=>(0, _afterRead.afterRead)({
                    collection: collectionConfig,
                    context: req.context,
                    currentDepth,
                    depth,
                    doc,
                    findMany: true,
                    global: null,
                    overrideAccess,
                    req,
                    showHiddenFields
                })))
        };
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        result = {
            ...result,
            docs: await Promise.all(result.docs.map(async (doc)=>{
                let docRef = doc;
                await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
                    await priorHook;
                    docRef = await hook({
                        collection: collectionConfig,
                        context: req.context,
                        doc: docRef,
                        findMany: true,
                        query: fullWhere,
                        req
                    }) || doc;
                }, Promise.resolve());
                return docRef;
            }))
        };
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: collectionConfig,
            operation: 'find',
            result
        });
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = find;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2ZpbmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBY2Nlc3NSZXN1bHQgfSBmcm9tICcuLi8uLi9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBhZ2luYXRlZERvY3MgfSBmcm9tICcuLi8uLi9kYXRhYmFzZS90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBXaGVyZSB9IGZyb20gJy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBDb2xsZWN0aW9uLCBUeXBlV2l0aElEIH0gZnJvbSAnLi4vY29uZmlnL3R5cGVzJ1xuXG5pbXBvcnQgZXhlY3V0ZUFjY2VzcyBmcm9tICcuLi8uLi9hdXRoL2V4ZWN1dGVBY2Nlc3MnXG5pbXBvcnQgeyBjb21iaW5lUXVlcmllcyB9IGZyb20gJy4uLy4uL2RhdGFiYXNlL2NvbWJpbmVRdWVyaWVzJ1xuaW1wb3J0IHsgdmFsaWRhdGVRdWVyeVBhdGhzIH0gZnJvbSAnLi4vLi4vZGF0YWJhc2UvcXVlcnlWYWxpZGF0aW9uL3ZhbGlkYXRlUXVlcnlQYXRocydcbmltcG9ydCB7IGFmdGVyUmVhZCB9IGZyb20gJy4uLy4uL2ZpZWxkcy9ob29rcy9hZnRlclJlYWQnXG5pbXBvcnQgeyBjb21taXRUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9jb21taXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IGluaXRUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9pbml0VHJhbnNhY3Rpb24nXG5pbXBvcnQgeyBraWxsVHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi91dGlsaXRpZXMva2lsbFRyYW5zYWN0aW9uJ1xuaW1wb3J0IHsgYnVpbGRWZXJzaW9uQ29sbGVjdGlvbkZpZWxkcyB9IGZyb20gJy4uLy4uL3ZlcnNpb25zL2J1aWxkQ29sbGVjdGlvbkZpZWxkcydcbmltcG9ydCB7IGFwcGVuZFZlcnNpb25Ub1F1ZXJ5S2V5IH0gZnJvbSAnLi4vLi4vdmVyc2lvbnMvZHJhZnRzL2FwcGVuZFZlcnNpb25Ub1F1ZXJ5S2V5J1xuaW1wb3J0IHsgZ2V0UXVlcnlEcmFmdHNTb3J0IH0gZnJvbSAnLi4vLi4vdmVyc2lvbnMvZHJhZnRzL2dldFF1ZXJ5RHJhZnRzU29ydCdcbmltcG9ydCB7IGJ1aWxkQWZ0ZXJPcGVyYXRpb24gfSBmcm9tICcuL3V0aWxzJ1xuXG5leHBvcnQgdHlwZSBBcmd1bWVudHMgPSB7XG4gIGNvbGxlY3Rpb246IENvbGxlY3Rpb25cbiAgY3VycmVudERlcHRoPzogbnVtYmVyXG4gIGRlcHRoPzogbnVtYmVyXG4gIGRpc2FibGVFcnJvcnM/OiBib29sZWFuXG4gIGRyYWZ0PzogYm9vbGVhblxuICBsaW1pdD86IG51bWJlclxuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcGFnZT86IG51bWJlclxuICBwYWdpbmF0aW9uPzogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxuICBzb3J0Pzogc3RyaW5nXG4gIHdoZXJlPzogV2hlcmVcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmluZDxUIGV4dGVuZHMgVHlwZVdpdGhJRCAmIFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgaW5jb21pbmdBcmdzOiBBcmd1bWVudHMsXG4pOiBQcm9taXNlPFBhZ2luYXRlZERvY3M8VD4+IHtcbiAgbGV0IGFyZ3MgPSBpbmNvbWluZ0FyZ3NcblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGJlZm9yZU9wZXJhdGlvbiAtIENvbGxlY3Rpb25cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGF3YWl0IGFyZ3MuY29sbGVjdGlvbi5jb25maWcuaG9va3MuYmVmb3JlT3BlcmF0aW9uLnJlZHVjZShhc3luYyAocHJpb3JIb29rLCBob29rKSA9PiB7XG4gICAgYXdhaXQgcHJpb3JIb29rXG5cbiAgICBhcmdzID1cbiAgICAgIChhd2FpdCBob29rKHtcbiAgICAgICAgYXJncyxcbiAgICAgICAgY29sbGVjdGlvbjogYXJncy5jb2xsZWN0aW9uLmNvbmZpZyxcbiAgICAgICAgY29udGV4dDogYXJncy5yZXEuY29udGV4dCxcbiAgICAgICAgb3BlcmF0aW9uOiAncmVhZCcsXG4gICAgICB9KSkgfHwgYXJnc1xuICB9LCBQcm9taXNlLnJlc29sdmUoKSlcblxuICBjb25zdCB7XG4gICAgY29sbGVjdGlvbjogeyBjb25maWc6IGNvbGxlY3Rpb25Db25maWcgfSxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGN1cnJlbnREZXB0aCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzLFxuICAgIGRyYWZ0OiBkcmFmdHNFbmFibGVkLFxuICAgIGxpbWl0LFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbiA9IHRydWUsXG4gICAgcmVxOiB7IGxvY2FsZSwgcGF5bG9hZCB9LFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNvcnQsXG4gICAgd2hlcmUsXG4gIH0gPSBhcmdzXG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzaG91bGRDb21taXQgPSBhd2FpdCBpbml0VHJhbnNhY3Rpb24ocmVxKVxuXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEFjY2Vzc1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGxldCBhY2Nlc3NSZXN1bHQ6IEFjY2Vzc1Jlc3VsdFxuXG4gICAgaWYgKCFvdmVycmlkZUFjY2Vzcykge1xuICAgICAgYWNjZXNzUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZUFjY2Vzcyh7IGRpc2FibGVFcnJvcnMsIHJlcSB9LCBjb2xsZWN0aW9uQ29uZmlnLmFjY2Vzcy5yZWFkKVxuXG4gICAgICAvLyBJZiBlcnJvcnMgYXJlIGRpc2FibGVkLCBhbmQgYWNjZXNzIHJldHVybnMgZmFsc2UsIHJldHVybiBlbXB0eSByZXN1bHRzXG4gICAgICBpZiAoYWNjZXNzUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRvY3M6IFtdLFxuICAgICAgICAgIGhhc05leHRQYWdlOiBmYWxzZSxcbiAgICAgICAgICBoYXNQcmV2UGFnZTogZmFsc2UsXG4gICAgICAgICAgbGltaXQsXG4gICAgICAgICAgbmV4dFBhZ2U6IG51bGwsXG4gICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICBwYWdpbmdDb3VudGVyOiAxLFxuICAgICAgICAgIHByZXZQYWdlOiBudWxsLFxuICAgICAgICAgIHRvdGFsRG9jczogMCxcbiAgICAgICAgICB0b3RhbFBhZ2VzOiAxLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEZpbmRcbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBjb25zdCB1c2VQYWdpbmF0aW9uID0gcGFnaW5hdGlvbiAmJiBsaW1pdCAhPT0gMFxuICAgIGNvbnN0IHNhbml0aXplZExpbWl0ID0gbGltaXQgPz8gKHVzZVBhZ2luYXRpb24gPyAxMCA6IDApXG4gICAgY29uc3Qgc2FuaXRpemVkUGFnZSA9IHBhZ2UgfHwgMVxuXG4gICAgbGV0IHJlc3VsdDogUGFnaW5hdGVkRG9jczxUPlxuXG4gICAgbGV0IGZ1bGxXaGVyZSA9IGNvbWJpbmVRdWVyaWVzKHdoZXJlLCBhY2Nlc3NSZXN1bHQpXG5cbiAgICBpZiAoY29sbGVjdGlvbkNvbmZpZy52ZXJzaW9ucz8uZHJhZnRzICYmIGRyYWZ0c0VuYWJsZWQpIHtcbiAgICAgIGZ1bGxXaGVyZSA9IGFwcGVuZFZlcnNpb25Ub1F1ZXJ5S2V5KGZ1bGxXaGVyZSlcblxuICAgICAgYXdhaXQgdmFsaWRhdGVRdWVyeVBhdGhzKHtcbiAgICAgICAgY29sbGVjdGlvbkNvbmZpZzogY29sbGVjdGlvbi5jb25maWcsXG4gICAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgICByZXEsXG4gICAgICAgIHZlcnNpb25GaWVsZHM6IGJ1aWxkVmVyc2lvbkNvbGxlY3Rpb25GaWVsZHMoY29sbGVjdGlvbi5jb25maWcpLFxuICAgICAgICB3aGVyZTogZnVsbFdoZXJlLFxuICAgICAgfSlcblxuICAgICAgcmVzdWx0ID0gYXdhaXQgcGF5bG9hZC5kYi5xdWVyeURyYWZ0czxUPih7XG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcuc2x1ZyxcbiAgICAgICAgbGltaXQ6IHNhbml0aXplZExpbWl0LFxuICAgICAgICBsb2NhbGUsXG4gICAgICAgIHBhZ2U6IHNhbml0aXplZFBhZ2UsXG4gICAgICAgIHBhZ2luYXRpb246IHVzZVBhZ2luYXRpb24sXG4gICAgICAgIHJlcSxcbiAgICAgICAgc29ydDogZ2V0UXVlcnlEcmFmdHNTb3J0KHNvcnQpLFxuICAgICAgICB3aGVyZTogZnVsbFdoZXJlLFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdmFsaWRhdGVRdWVyeVBhdGhzKHtcbiAgICAgICAgY29sbGVjdGlvbkNvbmZpZyxcbiAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgIHJlcSxcbiAgICAgICAgd2hlcmUsXG4gICAgICB9KVxuXG4gICAgICByZXN1bHQgPSBhd2FpdCBwYXlsb2FkLmRiLmZpbmQ8VD4oe1xuICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uQ29uZmlnLnNsdWcsXG4gICAgICAgIGxpbWl0OiBzYW5pdGl6ZWRMaW1pdCxcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBwYWdlOiBzYW5pdGl6ZWRQYWdlLFxuICAgICAgICBwYWdpbmF0aW9uLFxuICAgICAgICByZXEsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIHdoZXJlOiBmdWxsV2hlcmUsXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBiZWZvcmVSZWFkIC0gQ29sbGVjdGlvblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHJlc3VsdCA9IHtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIGRvY3M6IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICByZXN1bHQuZG9jcy5tYXAoYXN5bmMgKGRvYykgPT4ge1xuICAgICAgICAgIGxldCBkb2NSZWYgPSBkb2NcblxuICAgICAgICAgIGF3YWl0IGNvbGxlY3Rpb25Db25maWcuaG9va3MuYmVmb3JlUmVhZC5yZWR1Y2UoYXN5bmMgKHByaW9ySG9vaywgaG9vaykgPT4ge1xuICAgICAgICAgICAgYXdhaXQgcHJpb3JIb29rXG5cbiAgICAgICAgICAgIGRvY1JlZiA9XG4gICAgICAgICAgICAgIChhd2FpdCBob29rKHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uQ29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcS5jb250ZXh0LFxuICAgICAgICAgICAgICAgIGRvYzogZG9jUmVmLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBmdWxsV2hlcmUsXG4gICAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICB9KSkgfHwgZG9jUmVmXG4gICAgICAgICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpXG5cbiAgICAgICAgICByZXR1cm4gZG9jUmVmXG4gICAgICAgIH0pLFxuICAgICAgKSxcbiAgICB9XG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gYWZ0ZXJSZWFkIC0gRmllbGRzXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgcmVzdWx0ID0ge1xuICAgICAgLi4ucmVzdWx0LFxuICAgICAgZG9jczogYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHJlc3VsdC5kb2NzLm1hcChhc3luYyAoZG9jKSA9PlxuICAgICAgICAgIGFmdGVyUmVhZDxUPih7XG4gICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uQ29uZmlnLFxuICAgICAgICAgICAgY29udGV4dDogcmVxLmNvbnRleHQsXG4gICAgICAgICAgICBjdXJyZW50RGVwdGgsXG4gICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgIGRvYyxcbiAgICAgICAgICAgIGZpbmRNYW55OiB0cnVlLFxuICAgICAgICAgICAgZ2xvYmFsOiBudWxsLFxuICAgICAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgICAgIH0pLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICB9XG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gYWZ0ZXJSZWFkIC0gQ29sbGVjdGlvblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHJlc3VsdCA9IHtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIGRvY3M6IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICByZXN1bHQuZG9jcy5tYXAoYXN5bmMgKGRvYykgPT4ge1xuICAgICAgICAgIGxldCBkb2NSZWYgPSBkb2NcblxuICAgICAgICAgIGF3YWl0IGNvbGxlY3Rpb25Db25maWcuaG9va3MuYWZ0ZXJSZWFkLnJlZHVjZShhc3luYyAocHJpb3JIb29rLCBob29rKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBwcmlvckhvb2tcblxuICAgICAgICAgICAgZG9jUmVmID1cbiAgICAgICAgICAgICAgKGF3YWl0IGhvb2soe1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcsXG4gICAgICAgICAgICAgICAgY29udGV4dDogcmVxLmNvbnRleHQsXG4gICAgICAgICAgICAgICAgZG9jOiBkb2NSZWYsXG4gICAgICAgICAgICAgICAgZmluZE1hbnk6IHRydWUsXG4gICAgICAgICAgICAgICAgcXVlcnk6IGZ1bGxXaGVyZSxcbiAgICAgICAgICAgICAgICByZXEsXG4gICAgICAgICAgICAgIH0pKSB8fCBkb2NcbiAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSlcblxuICAgICAgICAgIHJldHVybiBkb2NSZWZcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgIH1cblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBhZnRlck9wZXJhdGlvbiAtIENvbGxlY3Rpb25cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICByZXN1bHQgPSBhd2FpdCBidWlsZEFmdGVyT3BlcmF0aW9uPFQ+KHtcbiAgICAgIGFyZ3MsXG4gICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uQ29uZmlnLFxuICAgICAgb3BlcmF0aW9uOiAnZmluZCcsXG4gICAgICByZXN1bHQsXG4gICAgfSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZXR1cm4gcmVzdWx0c1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGlmIChzaG91bGRDb21taXQpIGF3YWl0IGNvbW1pdFRyYW5zYWN0aW9uKHJlcSlcblxuICAgIHJldHVybiByZXN1bHRcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBhd2FpdCBraWxsVHJhbnNhY3Rpb24ocmVxKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZmluZFxuIl0sIm5hbWVzIjpbImZpbmQiLCJpbmNvbWluZ0FyZ3MiLCJhcmdzIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImhvb2tzIiwiYmVmb3JlT3BlcmF0aW9uIiwicmVkdWNlIiwicHJpb3JIb29rIiwiaG9vayIsImNvbnRleHQiLCJyZXEiLCJvcGVyYXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvbGxlY3Rpb25Db25maWciLCJjdXJyZW50RGVwdGgiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJkcmFmdCIsImRyYWZ0c0VuYWJsZWQiLCJsaW1pdCIsIm92ZXJyaWRlQWNjZXNzIiwicGFnZSIsInBhZ2luYXRpb24iLCJsb2NhbGUiLCJwYXlsb2FkIiwic2hvd0hpZGRlbkZpZWxkcyIsInNvcnQiLCJ3aGVyZSIsInNob3VsZENvbW1pdCIsImluaXRUcmFuc2FjdGlvbiIsImFjY2Vzc1Jlc3VsdCIsImV4ZWN1dGVBY2Nlc3MiLCJhY2Nlc3MiLCJyZWFkIiwiZG9jcyIsImhhc05leHRQYWdlIiwiaGFzUHJldlBhZ2UiLCJuZXh0UGFnZSIsInBhZ2luZ0NvdW50ZXIiLCJwcmV2UGFnZSIsInRvdGFsRG9jcyIsInRvdGFsUGFnZXMiLCJ1c2VQYWdpbmF0aW9uIiwic2FuaXRpemVkTGltaXQiLCJzYW5pdGl6ZWRQYWdlIiwicmVzdWx0IiwiZnVsbFdoZXJlIiwiY29tYmluZVF1ZXJpZXMiLCJ2ZXJzaW9ucyIsImRyYWZ0cyIsImFwcGVuZFZlcnNpb25Ub1F1ZXJ5S2V5IiwidmFsaWRhdGVRdWVyeVBhdGhzIiwidmVyc2lvbkZpZWxkcyIsImJ1aWxkVmVyc2lvbkNvbGxlY3Rpb25GaWVsZHMiLCJkYiIsInF1ZXJ5RHJhZnRzIiwic2x1ZyIsImdldFF1ZXJ5RHJhZnRzU29ydCIsImFsbCIsIm1hcCIsImRvYyIsImRvY1JlZiIsImJlZm9yZVJlYWQiLCJxdWVyeSIsImFmdGVyUmVhZCIsImZpbmRNYW55IiwiZ2xvYmFsIiwiYnVpbGRBZnRlck9wZXJhdGlvbiIsImNvbW1pdFRyYW5zYWN0aW9uIiwiZXJyb3IiLCJraWxsVHJhbnNh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