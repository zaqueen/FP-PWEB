/* eslint-disable no-underscore-dangle */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _httpstatus = /*#__PURE__*/ _interop_require_default(require("http-status"));
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _types = require("../../auth/types");
const _combineQueries = require("../../database/combineQueries");
const _errors = require("../../errors");
const _afterChange = require("../../fields/hooks/afterChange");
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _getLatestCollectionVersion = require("../../versions/getLatestCollectionVersion");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersion(args) {
    const { id, collection: { config: collectionConfig }, depth, overrideAccess = false, req, req: { locale, payload, t }, showHiddenFields } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        if (!id) {
            throw new _errors.APIError('Missing ID of version to restore.', _httpstatus.default.BAD_REQUEST);
        }
        // /////////////////////////////////////
        // Retrieve original raw version
        // /////////////////////////////////////
        const { docs: versionDocs } = await req.payload.db.findVersions({
            collection: collectionConfig.slug,
            limit: 1,
            locale,
            req,
            where: {
                id: {
                    equals: id
                }
            }
        });
        const [rawVersion] = versionDocs;
        if (!rawVersion) {
            throw new _errors.NotFound(t);
        }
        const parentDocID = rawVersion.parent;
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        const accessResults = !overrideAccess ? await (0, _executeAccess.default)({
            id: parentDocID,
            req
        }, collectionConfig.access.update) : true;
        const hasWherePolicy = (0, _types.hasWhereAccessResult)(accessResults);
        // /////////////////////////////////////
        // Retrieve document
        // /////////////////////////////////////
        const findOneArgs = {
            collection: collectionConfig.slug,
            locale,
            req,
            where: (0, _combineQueries.combineQueries)({
                id: {
                    equals: parentDocID
                }
            }, accessResults)
        };
        const doc = await req.payload.db.findOne(findOneArgs);
        if (!doc && !hasWherePolicy) throw new _errors.NotFound(t);
        if (!doc && hasWherePolicy) throw new _errors.Forbidden(t);
        // /////////////////////////////////////
        // fetch previousDoc
        // /////////////////////////////////////
        const prevDocWithLocales = await (0, _getLatestCollectionVersion.getLatestCollectionVersion)({
            id: parentDocID,
            config: collectionConfig,
            payload,
            query: findOneArgs,
            req
        });
        // /////////////////////////////////////
        // Update
        // /////////////////////////////////////
        let result = await req.payload.db.updateOne({
            id: parentDocID,
            collection: collectionConfig.slug,
            data: rawVersion.version,
            req
        });
        // /////////////////////////////////////
        // Save `previousDoc` as a version after restoring
        // /////////////////////////////////////
        const prevVersion = {
            ...prevDocWithLocales
        };
        delete prevVersion.id;
        await payload.db.createVersion({
            autosave: false,
            collectionSlug: collectionConfig.slug,
            createdAt: prevVersion.createdAt,
            parent: parentDocID,
            req,
            updatedAt: new Date().toISOString(),
            versionData: rawVersion.version
        });
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            depth,
            doc: result,
            global: null,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterChange - Fields
        // /////////////////////////////////////
        result = await (0, _afterChange.afterChange)({
            collection: collectionConfig,
            context: req.context,
            data: result,
            doc: result,
            global: null,
            operation: 'update',
            previousDoc: prevDocWithLocales,
            req
        });
        // /////////////////////////////////////
        // afterChange - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                operation: 'update',
                previousDoc: prevDocWithLocales,
                req
            }) || result;
        }, Promise.resolve());
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = restoreVersion;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL3Jlc3RvcmVWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgaHR0cFN0YXR1cyBmcm9tICdodHRwLXN0YXR1cydcblxuaW1wb3J0IHR5cGUgeyBGaW5kT25lQXJncyB9IGZyb20gJy4uLy4uL2RhdGFiYXNlL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb24sIFR5cGVXaXRoSUQgfSBmcm9tICcuLi9jb25maWcvdHlwZXMnXG5cbmltcG9ydCBleGVjdXRlQWNjZXNzIGZyb20gJy4uLy4uL2F1dGgvZXhlY3V0ZUFjY2VzcydcbmltcG9ydCB7IGhhc1doZXJlQWNjZXNzUmVzdWx0IH0gZnJvbSAnLi4vLi4vYXV0aC90eXBlcydcbmltcG9ydCB7IGNvbWJpbmVRdWVyaWVzIH0gZnJvbSAnLi4vLi4vZGF0YWJhc2UvY29tYmluZVF1ZXJpZXMnXG5pbXBvcnQgeyBBUElFcnJvciwgRm9yYmlkZGVuLCBOb3RGb3VuZCB9IGZyb20gJy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IGFmdGVyQ2hhbmdlIH0gZnJvbSAnLi4vLi4vZmllbGRzL2hvb2tzL2FmdGVyQ2hhbmdlJ1xuaW1wb3J0IHsgYWZ0ZXJSZWFkIH0gZnJvbSAnLi4vLi4vZmllbGRzL2hvb2tzL2FmdGVyUmVhZCdcbmltcG9ydCB7IGNvbW1pdFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbW1pdFRyYW5zYWN0aW9uJ1xuaW1wb3J0IHsgaW5pdFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2luaXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IGtpbGxUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9raWxsVHJhbnNhY3Rpb24nXG5pbXBvcnQgeyBnZXRMYXRlc3RDb2xsZWN0aW9uVmVyc2lvbiB9IGZyb20gJy4uLy4uL3ZlcnNpb25zL2dldExhdGVzdENvbGxlY3Rpb25WZXJzaW9uJ1xuXG5leHBvcnQgdHlwZSBBcmd1bWVudHMgPSB7XG4gIGNvbGxlY3Rpb246IENvbGxlY3Rpb25cbiAgY3VycmVudERlcHRoPzogbnVtYmVyXG4gIGRlcHRoPzogbnVtYmVyXG4gIGRpc2FibGVFcnJvcnM/OiBib29sZWFuXG4gIGlkOiBudW1iZXIgfCBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcTogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzdG9yZVZlcnNpb248VCBleHRlbmRzIFR5cGVXaXRoSUQgPSBhbnk+KGFyZ3M6IEFyZ3VtZW50cyk6IFByb21pc2U8VD4ge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgY29sbGVjdGlvbjogeyBjb25maWc6IGNvbGxlY3Rpb25Db25maWcgfSxcbiAgICBkZXB0aCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IGZhbHNlLFxuICAgIHJlcSxcbiAgICByZXE6IHsgbG9jYWxlLCBwYXlsb2FkLCB0IH0sXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfSA9IGFyZ3NcblxuICB0cnkge1xuICAgIGNvbnN0IHNob3VsZENvbW1pdCA9IGF3YWl0IGluaXRUcmFuc2FjdGlvbihyZXEpXG5cbiAgICBpZiAoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoJ01pc3NpbmcgSUQgb2YgdmVyc2lvbiB0byByZXN0b3JlLicsIGh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpXG4gICAgfVxuXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFJldHJpZXZlIG9yaWdpbmFsIHJhdyB2ZXJzaW9uXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgY29uc3QgeyBkb2NzOiB2ZXJzaW9uRG9jcyB9ID0gYXdhaXQgcmVxLnBheWxvYWQuZGIuZmluZFZlcnNpb25zKHtcbiAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcuc2x1ZyxcbiAgICAgIGxpbWl0OiAxLFxuICAgICAgbG9jYWxlLFxuICAgICAgcmVxLFxuICAgICAgd2hlcmU6IHsgaWQ6IHsgZXF1YWxzOiBpZCB9IH0sXG4gICAgfSlcblxuICAgIGNvbnN0IFtyYXdWZXJzaW9uXSA9IHZlcnNpb25Eb2NzXG5cbiAgICBpZiAoIXJhd1ZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZCh0KVxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudERvY0lEID0gcmF3VmVyc2lvbi5wYXJlbnRcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBBY2Nlc3NcbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBjb25zdCBhY2Nlc3NSZXN1bHRzID0gIW92ZXJyaWRlQWNjZXNzXG4gICAgICA/IGF3YWl0IGV4ZWN1dGVBY2Nlc3MoeyBpZDogcGFyZW50RG9jSUQsIHJlcSB9LCBjb2xsZWN0aW9uQ29uZmlnLmFjY2Vzcy51cGRhdGUpXG4gICAgICA6IHRydWVcbiAgICBjb25zdCBoYXNXaGVyZVBvbGljeSA9IGhhc1doZXJlQWNjZXNzUmVzdWx0KGFjY2Vzc1Jlc3VsdHMpXG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmV0cmlldmUgZG9jdW1lbnRcbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBjb25zdCBmaW5kT25lQXJnczogRmluZE9uZUFyZ3MgPSB7XG4gICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uQ29uZmlnLnNsdWcsXG4gICAgICBsb2NhbGUsXG4gICAgICByZXEsXG4gICAgICB3aGVyZTogY29tYmluZVF1ZXJpZXMoeyBpZDogeyBlcXVhbHM6IHBhcmVudERvY0lEIH0gfSwgYWNjZXNzUmVzdWx0cyksXG4gICAgfVxuXG4gICAgY29uc3QgZG9jID0gYXdhaXQgcmVxLnBheWxvYWQuZGIuZmluZE9uZShmaW5kT25lQXJncylcblxuICAgIGlmICghZG9jICYmICFoYXNXaGVyZVBvbGljeSkgdGhyb3cgbmV3IE5vdEZvdW5kKHQpXG4gICAgaWYgKCFkb2MgJiYgaGFzV2hlcmVQb2xpY3kpIHRocm93IG5ldyBGb3JiaWRkZW4odClcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBmZXRjaCBwcmV2aW91c0RvY1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGNvbnN0IHByZXZEb2NXaXRoTG9jYWxlcyA9IGF3YWl0IGdldExhdGVzdENvbGxlY3Rpb25WZXJzaW9uKHtcbiAgICAgIGlkOiBwYXJlbnREb2NJRCxcbiAgICAgIGNvbmZpZzogY29sbGVjdGlvbkNvbmZpZyxcbiAgICAgIHBheWxvYWQsXG4gICAgICBxdWVyeTogZmluZE9uZUFyZ3MsXG4gICAgICByZXEsXG4gICAgfSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBVcGRhdGVcbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcmVxLnBheWxvYWQuZGIudXBkYXRlT25lKHtcbiAgICAgIGlkOiBwYXJlbnREb2NJRCxcbiAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcuc2x1ZyxcbiAgICAgIGRhdGE6IHJhd1ZlcnNpb24udmVyc2lvbixcbiAgICAgIHJlcSxcbiAgICB9KVxuXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFNhdmUgYHByZXZpb3VzRG9jYCBhcyBhIHZlcnNpb24gYWZ0ZXIgcmVzdG9yaW5nXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgY29uc3QgcHJldlZlcnNpb24gPSB7IC4uLnByZXZEb2NXaXRoTG9jYWxlcyB9XG5cbiAgICBkZWxldGUgcHJldlZlcnNpb24uaWRcblxuICAgIGF3YWl0IHBheWxvYWQuZGIuY3JlYXRlVmVyc2lvbih7XG4gICAgICBhdXRvc2F2ZTogZmFsc2UsXG4gICAgICBjb2xsZWN0aW9uU2x1ZzogY29sbGVjdGlvbkNvbmZpZy5zbHVnLFxuICAgICAgY3JlYXRlZEF0OiBwcmV2VmVyc2lvbi5jcmVhdGVkQXQsXG4gICAgICBwYXJlbnQ6IHBhcmVudERvY0lELFxuICAgICAgcmVxLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB2ZXJzaW9uRGF0YTogcmF3VmVyc2lvbi52ZXJzaW9uLFxuICAgIH0pXG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gYWZ0ZXJSZWFkIC0gRmllbGRzXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgcmVzdWx0ID0gYXdhaXQgYWZ0ZXJSZWFkKHtcbiAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcsXG4gICAgICBjb250ZXh0OiByZXEuY29udGV4dCxcbiAgICAgIGRlcHRoLFxuICAgICAgZG9jOiByZXN1bHQsXG4gICAgICBnbG9iYWw6IG51bGwsXG4gICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgIHJlcSxcbiAgICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgfSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBhZnRlclJlYWQgLSBDb2xsZWN0aW9uXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgYXdhaXQgY29sbGVjdGlvbkNvbmZpZy5ob29rcy5hZnRlclJlYWQucmVkdWNlKGFzeW5jIChwcmlvckhvb2ssIGhvb2spID0+IHtcbiAgICAgIGF3YWl0IHByaW9ySG9va1xuXG4gICAgICByZXN1bHQgPVxuICAgICAgICAoYXdhaXQgaG9vayh7XG4gICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbkNvbmZpZyxcbiAgICAgICAgICBjb250ZXh0OiByZXEuY29udGV4dCxcbiAgICAgICAgICBkb2M6IHJlc3VsdCxcbiAgICAgICAgICByZXEsXG4gICAgICAgIH0pKSB8fCByZXN1bHRcbiAgICB9LCBQcm9taXNlLnJlc29sdmUoKSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBhZnRlckNoYW5nZSAtIEZpZWxkc1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHJlc3VsdCA9IGF3YWl0IGFmdGVyQ2hhbmdlKHtcbiAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcsXG4gICAgICBjb250ZXh0OiByZXEuY29udGV4dCxcbiAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgIGRvYzogcmVzdWx0LFxuICAgICAgZ2xvYmFsOiBudWxsLFxuICAgICAgb3BlcmF0aW9uOiAndXBkYXRlJyxcbiAgICAgIHByZXZpb3VzRG9jOiBwcmV2RG9jV2l0aExvY2FsZXMsXG4gICAgICByZXEsXG4gICAgfSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBhZnRlckNoYW5nZSAtIENvbGxlY3Rpb25cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBhd2FpdCBjb2xsZWN0aW9uQ29uZmlnLmhvb2tzLmFmdGVyQ2hhbmdlLnJlZHVjZShhc3luYyAocHJpb3JIb29rLCBob29rKSA9PiB7XG4gICAgICBhd2FpdCBwcmlvckhvb2tcblxuICAgICAgcmVzdWx0ID1cbiAgICAgICAgKGF3YWl0IGhvb2soe1xuICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcsXG4gICAgICAgICAgY29udGV4dDogcmVxLmNvbnRleHQsXG4gICAgICAgICAgZG9jOiByZXN1bHQsXG4gICAgICAgICAgb3BlcmF0aW9uOiAndXBkYXRlJyxcbiAgICAgICAgICBwcmV2aW91c0RvYzogcHJldkRvY1dpdGhMb2NhbGVzLFxuICAgICAgICAgIHJlcSxcbiAgICAgICAgfSkpIHx8IHJlc3VsdFxuICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKVxuXG4gICAgaWYgKHNob3VsZENvbW1pdCkgYXdhaXQgY29tbWl0VHJhbnNhY3Rpb24ocmVxKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgIGF3YWl0IGtpbGxUcmFuc2FjdGlvbihyZXEpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZXN0b3JlVmVyc2lvblxuIl0sIm5hbWVzIjpbInJlc3RvcmVWZXJzaW9uIiwiYXJncyIsImlkIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImNvbGxlY3Rpb25Db25maWciLCJkZXB0aCIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwibG9jYWxlIiwicGF5bG9hZCIsInQiLCJzaG93SGlkZGVuRmllbGRzIiwic2hvdWxkQ29tbWl0IiwiaW5pdFRyYW5zYWN0aW9uIiwiQVBJRXJyb3IiLCJodHRwU3RhdHVzIiwiQkFEX1JFUVVFU1QiLCJkb2NzIiwidmVyc2lvbkRvY3MiLCJkYiIsImZpbmRWZXJzaW9ucyIsInNsdWciLCJsaW1pdCIsIndoZXJlIiwiZXF1YWxzIiwicmF3VmVyc2lvbiIsIk5vdEZvdW5kIiwicGFyZW50RG9jSUQiLCJwYXJlbnQiLCJhY2Nlc3NSZXN1bHRzIiwiZXhlY3V0ZUFjY2VzcyIsImFjY2VzcyIsInVwZGF0ZSIsImhhc1doZXJlUG9saWN5IiwiaGFzV2hlcmVBY2Nlc3NSZXN1bHQiLCJmaW5kT25lQXJncyIsImNvbWJpbmVRdWVyaWVzIiwiZG9jIiwiZmluZE9uZSIsIkZvcmJpZGRlbiIsInByZXZEb2NXaXRoTG9jYWxlcyIsImdldExhdGVzdENvbGxlY3Rpb25WZXJzaW9uIiwicXVlcnkiLCJyZXN1bHQiLCJ1cGRhdGVPbmUiLCJkYXRhIiwidmVyc2lvbiIsInByZXZWZXJzaW9uIiwiY3JlYXRlVmVyc2lvbiIsImF1dG9zYXZlIiwiY29sbGVjdGlvblNsdWciLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ2ZXJzaW9uRGF0YSIsImFmdGVyUmVhZCIsImNvbnRleHQiLCJnbG9iYWwiLCJob29rcyIsInJlZHVjZSIsInByaW9ySG9vayIsImhvb2siLCJQcm9taXNlIiwicmVzb2x2ZSIsImFmdGVyQ2hhbmdlIiwib3BlcmF0aW9uIiwicHJldmlvdXNEb2MiLCJjb21taXRUcmFuc2FjdGlvbiIsImVycm9yIiwia2lsbFRyYW5zYWN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7Ozs7K0JBOE12Qzs7O2VBQUE7OzttRUE3TXVCO3NFQU1HO3VCQUNXO2dDQUNOO3dCQUNlOzZCQUNsQjsyQkFDRjttQ0FDUTtpQ0FDRjtpQ0FDQTs0Q0FDVzs7Ozs7O0FBYTNDLGVBQWVBLGVBQTJDQyxJQUFlO0lBQ3ZFLE1BQU0sRUFDSkMsRUFBRSxFQUNGQyxZQUFZLEVBQUVDLFFBQVFDLGdCQUFnQixFQUFFLEVBQ3hDQyxLQUFLLEVBQ0xDLGlCQUFpQixLQUFLLEVBQ3RCQyxHQUFHLEVBQ0hBLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLENBQUMsRUFBRSxFQUMzQkMsZ0JBQWdCLEVBQ2pCLEdBQUdYO0lBRUosSUFBSTtRQUNGLE1BQU1ZLGVBQWUsTUFBTUMsSUFBQUEs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