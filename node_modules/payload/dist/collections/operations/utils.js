"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildAfterOperation", {
    enumerable: true,
    get: function() {
        return buildAfterOperation;
    }
});
const buildAfterOperation = async (operationArgs)=>{
    const { args, collection, operation, result } = operationArgs;
    let newResult = result;
    await args.collection.config.hooks.afterOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        const hookResult = await hook({
            args,
            collection,
            operation,
            result: newResult
        });
        if (hookResult !== undefined) {
            newResult = hookResult;
        }
    }, Promise.resolve());
    return newResult;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIGZvcmdvdFBhc3N3b3JkIGZyb20gJy4uLy4uL2F1dGgvb3BlcmF0aW9ucy9mb3Jnb3RQYXNzd29yZCdcbmltcG9ydCB0eXBlIGxvZ2luIGZyb20gJy4uLy4uL2F1dGgvb3BlcmF0aW9ucy9sb2dpbidcbmltcG9ydCB0eXBlIHJlZnJlc2ggZnJvbSAnLi4vLi4vYXV0aC9vcGVyYXRpb25zL3JlZnJlc2gnXG5pbXBvcnQgdHlwZSB7IEFmdGVyT3BlcmF0aW9uSG9vaywgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZywgVHlwZVdpdGhJRCB9IGZyb20gJy4uL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIGNyZWF0ZSBmcm9tICcuL2NyZWF0ZSdcbmltcG9ydCB0eXBlIGRlbGV0ZU9wZXJhdGlvbiBmcm9tICcuL2RlbGV0ZSdcbmltcG9ydCB0eXBlIGRlbGV0ZUJ5SUQgZnJvbSAnLi9kZWxldGVCeUlEJ1xuaW1wb3J0IHR5cGUgZmluZCBmcm9tICcuL2ZpbmQnXG5pbXBvcnQgdHlwZSBmaW5kQnlJRCBmcm9tICcuL2ZpbmRCeUlEJ1xuaW1wb3J0IHR5cGUgdXBkYXRlIGZyb20gJy4vdXBkYXRlJ1xuaW1wb3J0IHR5cGUgdXBkYXRlQnlJRCBmcm9tICcuL3VwZGF0ZUJ5SUQnXG5cbmV4cG9ydCB0eXBlIEFmdGVyT3BlcmF0aW9uTWFwPFQgZXh0ZW5kcyBUeXBlV2l0aElEPiA9IHtcbiAgY3JlYXRlOiB0eXBlb2YgY3JlYXRlIC8vIHRvZG86IHBhc3MgY29ycmVjdCBnZW5lcmljXG4gIGRlbGV0ZTogdHlwZW9mIGRlbGV0ZU9wZXJhdGlvbiAvLyB0b2RvOiBwYXNzIGNvcnJlY3QgZ2VuZXJpY1xuICBkZWxldGVCeUlEOiB0eXBlb2YgZGVsZXRlQnlJRCAvLyB0b2RvOiBwYXNzIGNvcnJlY3QgZ2VuZXJpY1xuICBmaW5kOiB0eXBlb2YgZmluZDxUPlxuICBmaW5kQnlJRDogdHlwZW9mIGZpbmRCeUlEPFQ+XG4gIGZvcmdvdFBhc3N3b3JkOiB0eXBlb2YgZm9yZ290UGFzc3dvcmRcbiAgbG9naW46IHR5cGVvZiBsb2dpblxuICByZWZyZXNoOiB0eXBlb2YgcmVmcmVzaFxuICB1cGRhdGU6IHR5cGVvZiB1cGRhdGUgLy8gdG9kbzogcGFzcyBjb3JyZWN0IGdlbmVyaWNcbiAgdXBkYXRlQnlJRDogdHlwZW9mIHVwZGF0ZUJ5SUQgLy8gdG9kbzogcGFzcyBjb3JyZWN0IGdlbmVyaWNcbn1cbmV4cG9ydCB0eXBlIEFmdGVyT3BlcmF0aW9uQXJnPFQgZXh0ZW5kcyBUeXBlV2l0aElEPiA9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnY3JlYXRlJ10+WzBdXG4gICAgICAvKiogVGhlIGNvbGxlY3Rpb24gd2hpY2ggdGhpcyBob29rIGlzIGJlaW5nIHJ1biBvbiAqL1xuICAgICAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZ1xuICAgICAgb3BlcmF0aW9uOiAnY3JlYXRlJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2NyZWF0ZSddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZGVsZXRlJ10+WzBdXG4gICAgICAvKiogVGhlIGNvbGxlY3Rpb24gd2hpY2ggdGhpcyBob29rIGlzIGJlaW5nIHJ1biBvbiAqL1xuICAgICAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZ1xuICAgICAgb3BlcmF0aW9uOiAnZGVsZXRlJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ2RlbGV0ZSddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZGVsZXRlQnlJRCddPlswXVxuICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIHdoaWNoIHRoaXMgaG9vayBpcyBiZWluZyBydW4gb24gKi9cbiAgICAgIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgICAgIG9wZXJhdGlvbjogJ2RlbGV0ZUJ5SUQnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZGVsZXRlQnlJRCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZmluZCddPlswXVxuICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIHdoaWNoIHRoaXMgaG9vayBpcyBiZWluZyBydW4gb24gKi9cbiAgICAgIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgICAgIG9wZXJhdGlvbjogJ2ZpbmQnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZmluZCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZmluZEJ5SUQnXT5bMF1cbiAgICAgIC8qKiBUaGUgY29sbGVjdGlvbiB3aGljaCB0aGlzIGhvb2sgaXMgYmVpbmcgcnVuIG9uICovXG4gICAgICBjb2xsZWN0aW9uOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gICAgICBvcGVyYXRpb246ICdmaW5kQnlJRCdcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+WydmaW5kQnlJRCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnZm9yZ290UGFzc3dvcmQnXT5bMF1cbiAgICAgIC8qKiBUaGUgY29sbGVjdGlvbiB3aGljaCB0aGlzIGhvb2sgaXMgYmVpbmcgcnVuIG9uICovXG4gICAgICBjb2xsZWN0aW9uOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gICAgICBvcGVyYXRpb246ICdmb3Jnb3RQYXNzd29yZCdcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+Wydmb3Jnb3RQYXNzd29yZCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsnbG9naW4nXT5bMF1cbiAgICAgIC8qKiBUaGUgY29sbGVjdGlvbiB3aGljaCB0aGlzIGhvb2sgaXMgYmVpbmcgcnVuIG9uICovXG4gICAgICBjb2xsZWN0aW9uOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gICAgICBvcGVyYXRpb246ICdsb2dpbidcbiAgICAgIHJlc3VsdDogQXdhaXRlZDxSZXR1cm5UeXBlPEFmdGVyT3BlcmF0aW9uTWFwPFQ+Wydsb2dpbiddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsncmVmcmVzaCddPlswXVxuICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIHdoaWNoIHRoaXMgaG9vayBpcyBiZWluZyBydW4gb24gKi9cbiAgICAgIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgICAgIG9wZXJhdGlvbjogJ3JlZnJlc2gnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsncmVmcmVzaCddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsndXBkYXRlJ10+WzBdXG4gICAgICAvKiogVGhlIGNvbGxlY3Rpb24gd2hpY2ggdGhpcyBob29rIGlzIGJlaW5nIHJ1biBvbiAqL1xuICAgICAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZ1xuICAgICAgb3BlcmF0aW9uOiAndXBkYXRlJ1xuICAgICAgcmVzdWx0OiBBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bJ3VwZGF0ZSddPj5cbiAgICB9XG4gIHwge1xuICAgICAgYXJnczogUGFyYW1ldGVyczxBZnRlck9wZXJhdGlvbk1hcDxUPlsndXBkYXRlQnlJRCddPlswXVxuICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIHdoaWNoIHRoaXMgaG9vayBpcyBiZWluZyBydW4gb24gKi9cbiAgICAgIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgICAgIG9wZXJhdGlvbjogJ3VwZGF0ZUJ5SUQnXG4gICAgICByZXN1bHQ6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxBZnRlck9wZXJhdGlvbk1hcDxUPlsndXBkYXRlQnlJRCddPj5cbiAgICB9XG5cbi8vIGV4cG9ydCB0eXBlIEFmdGVyT3BlcmF0aW9uSG9vayA9IHR5cGVvZiBidWlsZEFmdGVyT3BlcmF0aW9uO1xuXG5leHBvcnQgY29uc3QgYnVpbGRBZnRlck9wZXJhdGlvbiA9IGFzeW5jIDxcbiAgVCBleHRlbmRzIFR5cGVXaXRoSUQgPSBhbnksXG4gIE8gZXh0ZW5kcyBrZXlvZiBBZnRlck9wZXJhdGlvbk1hcDxUPiA9IGtleW9mIEFmdGVyT3BlcmF0aW9uTWFwPFQ+LFxuPihcbiAgb3BlcmF0aW9uQXJnczogQWZ0ZXJPcGVyYXRpb25Bcmc8VD4gJiB7IG9wZXJhdGlvbjogTyB9LFxuKTogUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8QWZ0ZXJPcGVyYXRpb25NYXA8VD5bT10+Pj4gPT4ge1xuICBjb25zdCB7IGFyZ3MsIGNvbGxlY3Rpb24sIG9wZXJhdGlvbiwgcmVzdWx0IH0gPSBvcGVyYXRpb25BcmdzXG5cbiAgbGV0IG5ld1Jlc3VsdCA9IHJlc3VsdFxuXG4gIGF3YWl0IGFyZ3MuY29sbGVjdGlvbi5jb25maWcuaG9va3MuYWZ0ZXJPcGVyYXRpb24ucmVkdWNlKFxuICAgIGFzeW5jIChwcmlvckhvb2ssIGhvb2s6IEFmdGVyT3BlcmF0aW9uSG9vazxUPikgPT4ge1xuICAgICAgYXdhaXQgcHJpb3JIb29rXG5cbiAgICAgIGNvbnN0IGhvb2tSZXN1bHQgPSBhd2FpdCBob29rKHtcbiAgICAgICAgYXJncyxcbiAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICByZXN1bHQ6IG5ld1Jlc3VsdCxcbiAgICAgIH0gYXMgQWZ0ZXJPcGVyYXRpb25Bcmc8VD4pXG5cbiAgICAgIGlmIChob29rUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3UmVzdWx0ID0gaG9va1Jlc3VsdFxuICAgICAgfVxuICAgIH0sXG4gICAgUHJvbWlzZS5yZXNvbHZlKCksXG4gIClcblxuICByZXR1cm4gbmV3UmVzdWx0XG59XG4iXSwibmFtZXMiOlsiYnVpbGRBZnRlck9wZXJhdGlvbiIsIm9wZXJhdGlvbkFyZ3MiLCJhcmdzIiwiY29sbGVjdGlvbiIsIm9wZXJhdGlvbiIsInJlc3VsdCIsIm5ld1Jlc3VsdCIsImNvbmZpZyIsImhvb2tzIiwiYWZ0ZXJPcGVyYXRpb24iLCJyZWR1Y2UiLCJwcmlvckhvb2siLCJob29rIiwiaG9va1Jlc3VsdCIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7OytCQWtHYUE7OztlQUFBQTs7O0FBQU4sTUFBTUEsc0JBQXNCLE9BSWpDQztJQUVBLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEdBQUdKO0lBRWhELElBQUlLLFlBQVlEO0lBRWhCLE1BQU1ILEtBQUtDLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDQyxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsTUFBTSxDQUN0RCxPQUFPQyxXQUFXQztRQUNoQixNQUFNRDtRQUVOLE1BQU1FLGFBQWEsTUFBTUQsS0FBSztZQUM1QlY7WUFDQUM7WUFDQUM7WUFDQUMsUUFBUUM7UUFDVjtRQUVBLElBQUlPLGVBQWVDLFdBQVc7WUFDNUJSLFlBQVlPO1FBQ2Q7SUFDRixHQUNBRSxRQUFRQyxPQUFPO0lBR2pCLE9BQU9WO0FBQ1QifQ==