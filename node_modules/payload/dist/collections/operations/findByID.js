/* eslint-disable no-underscore-dangle */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _micromemoize = /*#__PURE__*/ _interop_require_default(require("micro-memoize"));
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _combineQueries = require("../../database/combineQueries");
const _errors = require("../../errors");
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _replaceWithDraftIfAvailable = /*#__PURE__*/ _interop_require_default(require("../../versions/drafts/replaceWithDraftIfAvailable"));
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findByID(incomingArgs) {
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
        await priorHook;
        args = await hook({
            args,
            collection: args.collection.config,
            context: args.req.context,
            operation: 'read'
        }) || args;
    }, Promise.resolve());
    const { id, collection: { config: collectionConfig }, currentDepth, depth, disableErrors, draft: draftEnabled = false, overrideAccess = false, req: { locale, t }, req, showHiddenFields } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        const { transactionID } = req;
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        const accessResult = !overrideAccess ? await (0, _executeAccess.default)({
            id,
            disableErrors,
            req
        }, collectionConfig.access.read) : true;
        // If errors are disabled, and access returns false, return null
        if (accessResult === false) return null;
        const findOneArgs = {
            collection: collectionConfig.slug,
            locale,
            req: {
                transactionID: req.transactionID
            },
            where: (0, _combineQueries.combineQueries)({
                id: {
                    equals: id
                }
            }, accessResult)
        };
        // /////////////////////////////////////
        // Find by ID
        // /////////////////////////////////////
        if (!findOneArgs.where.and[0].id) throw new _errors.NotFound(t);
        if (!req.findByID) {
            req.findByID = {
                [transactionID]: {}
            };
        } else if (!req.findByID[transactionID]) {
            req.findByID[transactionID] = {};
        }
        if (!req.findByID[transactionID][collectionConfig.slug]) {
            const nonMemoizedFindByID = async (query)=>req.payload.db.findOne(query);
            req.findByID[transactionID][collectionConfig.slug] = (0, _micromemoize.default)(nonMemoizedFindByID, {
                isPromise: true,
                maxSize: 100,
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore This is straight from their docs, bad typings
                transformKey: JSON.stringify
            });
        }
        let result = await req.findByID[transactionID][collectionConfig.slug](findOneArgs);
        if (!result) {
            if (!disableErrors) {
                throw new _errors.NotFound(t);
            }
            return null;
        }
        // Clone the result - it may have come back memoized
        result = JSON.parse(JSON.stringify(result));
        // /////////////////////////////////////
        // Replace document with draft if available
        // /////////////////////////////////////
        if (collectionConfig.versions?.drafts && draftEnabled) {
            result = await (0, _replaceWithDraftIfAvailable.default)({
                accessResult,
                doc: result,
                entity: collectionConfig,
                entityType: 'collection',
                overrideAccess,
                req
            });
        }
        // /////////////////////////////////////
        // beforeRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                query: findOneArgs.where,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            currentDepth,
            depth,
            doc: result,
            global: null,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                query: findOneArgs.where,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: collectionConfig,
            operation: 'findByID',
            result: result
        }) // TODO: fix this typing
        ;
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = findByID;

//# sourceMappingURL=data:application/json;base64,