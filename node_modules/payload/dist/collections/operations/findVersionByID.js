/* eslint-disable no-underscore-dangle */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _httpstatus = /*#__PURE__*/ _interop_require_default(require("http-status"));
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _combineQueries = require("../../database/combineQueries");
const _errors = require("../../errors");
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByID(args) {
    const { id, collection: { config: collectionConfig }, currentDepth, depth, disableErrors, overrideAccess, req: { locale, payload, t }, req, showHiddenFields } = args;
    if (!id) {
        throw new _errors.APIError('Missing ID of version.', _httpstatus.default.BAD_REQUEST);
    }
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        const accessResults = !overrideAccess ? await (0, _executeAccess.default)({
            id,
            disableErrors,
            req
        }, collectionConfig.access.readVersions) : true;
        // If errors are disabled, and access returns false, return null
        if (accessResults === false) return null;
        const hasWhereAccess = typeof accessResults === 'object';
        const fullWhere = (0, _combineQueries.combineQueries)({
            id: {
                equals: id
            }
        }, accessResults);
        // /////////////////////////////////////
        // Find by ID
        // /////////////////////////////////////
        const versionsQuery = await payload.db.findVersions({
            collection: collectionConfig.slug,
            limit: 1,
            locale,
            pagination: false,
            req,
            where: fullWhere
        });
        const result = versionsQuery.docs[0];
        if (!result) {
            if (!disableErrors) {
                if (!hasWhereAccess) throw new _errors.NotFound(t);
                if (hasWhereAccess) throw new _errors.Forbidden(t);
            }
            return null;
        }
        // /////////////////////////////////////
        // beforeRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result.version = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result.version,
                query: fullWhere,
                req
            }) || result.version;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result.version = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            currentDepth,
            depth,
            doc: result.version,
            global: null,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result.version = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result.version,
                query: fullWhere,
                req
            }) || result.version;
        }, Promise.resolve());
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = findVersionByID;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2xsZWN0aW9ucy9vcGVyYXRpb25zL2ZpbmRWZXJzaW9uQnlJRC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGh0dHBTdGF0dXMgZnJvbSAnaHR0cC1zdGF0dXMnXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBUeXBlV2l0aFZlcnNpb24gfSBmcm9tICcuLi8uLi92ZXJzaW9ucy90eXBlcydcbmltcG9ydCB0eXBlIHsgQ29sbGVjdGlvbiwgVHlwZVdpdGhJRCB9IGZyb20gJy4uL2NvbmZpZy90eXBlcydcblxuaW1wb3J0IGV4ZWN1dGVBY2Nlc3MgZnJvbSAnLi4vLi4vYXV0aC9leGVjdXRlQWNjZXNzJ1xuaW1wb3J0IHsgY29tYmluZVF1ZXJpZXMgfSBmcm9tICcuLi8uLi9kYXRhYmFzZS9jb21iaW5lUXVlcmllcydcbmltcG9ydCB7IEFQSUVycm9yLCBGb3JiaWRkZW4sIE5vdEZvdW5kIH0gZnJvbSAnLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgYWZ0ZXJSZWFkIH0gZnJvbSAnLi4vLi4vZmllbGRzL2hvb2tzL2FmdGVyUmVhZCdcbmltcG9ydCB7IGNvbW1pdFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbW1pdFRyYW5zYWN0aW9uJ1xuaW1wb3J0IHsgaW5pdFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2luaXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IGtpbGxUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9raWxsVHJhbnNhY3Rpb24nXG5cbmV4cG9ydCB0eXBlIEFyZ3VtZW50cyA9IHtcbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvblxuICBjdXJyZW50RGVwdGg/OiBudW1iZXJcbiAgZGVwdGg/OiBudW1iZXJcbiAgZGlzYWJsZUVycm9ycz86IGJvb2xlYW5cbiAgaWQ6IG51bWJlciB8IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxOiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxufVxuXG5hc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbkJ5SUQ8VCBleHRlbmRzIFR5cGVXaXRoSUQgPSBhbnk+KFxuICBhcmdzOiBBcmd1bWVudHMsXG4pOiBQcm9taXNlPFR5cGVXaXRoVmVyc2lvbjxUPj4ge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgY29sbGVjdGlvbjogeyBjb25maWc6IGNvbGxlY3Rpb25Db25maWcgfSxcbiAgICBjdXJyZW50RGVwdGgsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXE6IHsgbG9jYWxlLCBwYXlsb2FkLCB0IH0sXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gIH0gPSBhcmdzXG5cbiAgaWYgKCFpZCkge1xuICAgIHRocm93IG5ldyBBUElFcnJvcignTWlzc2luZyBJRCBvZiB2ZXJzaW9uLicsIGh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHNob3VsZENvbW1pdCA9IGF3YWl0IGluaXRUcmFuc2FjdGlvbihyZXEpXG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQWNjZXNzXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgY29uc3QgYWNjZXNzUmVzdWx0cyA9ICFvdmVycmlkZUFjY2Vzc1xuICAgICAgPyBhd2FpdCBleGVjdXRlQWNjZXNzKHsgaWQsIGRpc2FibGVFcnJvcnMsIHJlcSB9LCBjb2xsZWN0aW9uQ29uZmlnLmFjY2Vzcy5yZWFkVmVyc2lvbnMpXG4gICAgICA6IHRydWVcblxuICAgIC8vIElmIGVycm9ycyBhcmUgZGlzYWJsZWQsIGFuZCBhY2Nlc3MgcmV0dXJucyBmYWxzZSwgcmV0dXJuIG51bGxcbiAgICBpZiAoYWNjZXNzUmVzdWx0cyA9PT0gZmFsc2UpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCBoYXNXaGVyZUFjY2VzcyA9IHR5cGVvZiBhY2Nlc3NSZXN1bHRzID09PSAnb2JqZWN0J1xuXG4gICAgY29uc3QgZnVsbFdoZXJlID0gY29tYmluZVF1ZXJpZXMoeyBpZDogeyBlcXVhbHM6IGlkIH0gfSwgYWNjZXNzUmVzdWx0cylcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBGaW5kIGJ5IElEXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgY29uc3QgdmVyc2lvbnNRdWVyeSA9IGF3YWl0IHBheWxvYWQuZGIuZmluZFZlcnNpb25zPFQ+KHtcbiAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcuc2x1ZyxcbiAgICAgIGxpbWl0OiAxLFxuICAgICAgbG9jYWxlLFxuICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXG4gICAgICByZXEsXG4gICAgICB3aGVyZTogZnVsbFdoZXJlLFxuICAgIH0pXG5cbiAgICBjb25zdCByZXN1bHQgPSB2ZXJzaW9uc1F1ZXJ5LmRvY3NbMF1cblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICBpZiAoIWRpc2FibGVFcnJvcnMpIHtcbiAgICAgICAgaWYgKCFoYXNXaGVyZUFjY2VzcykgdGhyb3cgbmV3IE5vdEZvdW5kKHQpXG4gICAgICAgIGlmIChoYXNXaGVyZUFjY2VzcykgdGhyb3cgbmV3IEZvcmJpZGRlbih0KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBiZWZvcmVSZWFkIC0gQ29sbGVjdGlvblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGF3YWl0IGNvbGxlY3Rpb25Db25maWcuaG9va3MuYmVmb3JlUmVhZC5yZWR1Y2UoYXN5bmMgKHByaW9ySG9vaywgaG9vaykgPT4ge1xuICAgICAgYXdhaXQgcHJpb3JIb29rXG5cbiAgICAgIHJlc3VsdC52ZXJzaW9uID1cbiAgICAgICAgKGF3YWl0IGhvb2soe1xuICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25Db25maWcsXG4gICAgICAgICAgY29udGV4dDogcmVxLmNvbnRleHQsXG4gICAgICAgICAgZG9jOiByZXN1bHQudmVyc2lvbixcbiAgICAgICAgICBxdWVyeTogZnVsbFdoZXJlLFxuICAgICAgICAgIHJlcSxcbiAgICAgICAgfSkpIHx8IHJlc3VsdC52ZXJzaW9uXG4gICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpXG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gYWZ0ZXJSZWFkIC0gRmllbGRzXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgcmVzdWx0LnZlcnNpb24gPSBhd2FpdCBhZnRlclJlYWQoe1xuICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbkNvbmZpZyxcbiAgICAgIGNvbnRleHQ6IHJlcS5jb250ZXh0LFxuICAgICAgY3VycmVudERlcHRoLFxuICAgICAgZGVwdGgsXG4gICAgICBkb2M6IHJlc3VsdC52ZXJzaW9uLFxuICAgICAgZ2xvYmFsOiBudWxsLFxuICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICByZXEsXG4gICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIH0pXG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gYWZ0ZXJSZWFkIC0gQ29sbGVjdGlvblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGF3YWl0IGNvbGxlY3Rpb25Db25maWcuaG9va3MuYWZ0ZXJSZWFkLnJlZHVjZShhc3luYyAocHJpb3JIb29rLCBob29rKSA9PiB7XG4gICAgICBhd2FpdCBwcmlvckhvb2tcblxuICAgICAgcmVzdWx0LnZlcnNpb24gPVxuICAgICAgICAoYXdhaXQgaG9vayh7XG4gICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbkNvbmZpZyxcbiAgICAgICAgICBjb250ZXh0OiByZXEuY29udGV4dCxcbiAgICAgICAgICBkb2M6IHJlc3VsdC52ZXJzaW9uLFxuICAgICAgICAgIHF1ZXJ5OiBmdWxsV2hlcmUsXG4gICAgICAgICAgcmVxLFxuICAgICAgICB9KSkgfHwgcmVzdWx0LnZlcnNpb25cbiAgICB9LCBQcm9taXNlLnJlc29sdmUoKSlcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZXR1cm4gcmVzdWx0c1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGlmIChzaG91bGRDb21taXQpIGF3YWl0IGNvbW1pdFRyYW5zYWN0aW9uKHJlcSlcblxuICAgIHJldHVybiByZXN1bHRcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBhd2FpdCBraWxsVHJhbnNhY3Rpb24ocmVxKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZmluZFZlcnNpb25CeUlEXG4iXSwibmFtZXMiOlsiZmluZFZlcnNpb25CeUlEIiwiYXJncyIsImlkIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImNvbGxlY3Rpb25Db25maWciLCJjdXJyZW50RGVwdGgiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsImxvY2FsZSIsInBheWxvYWQiLCJ0Iiwic2hvd0hpZGRlbkZpZWxkcyIsIkFQSUVycm9yIiwiaHR0cFN0YXR1cyIsIkJBRF9SRVFVRVNUIiwic2hvdWxkQ29tbWl0IiwiaW5pdFRyYW5zYWN0aW9uIiwiYWNjZXNzUmVzdWx0cyIsImV4ZWN1dGVBY2Nlc3MiLCJhY2Nlc3MiLCJyZWFkVmVyc2lvbnMiLCJoYXNXaGVyZUFjY2VzcyIsImZ1bGxXaGVyZSIsImNvbWJpbmVRdWVyaWVzIiwiZXF1YWxzIiwidmVyc2lvbnNRdWVyeSIsImRiIiwiZmluZFZlcnNpb25zIiwic2x1ZyIsImxpbWl0IiwicGFnaW5hdGlvbiIsIndoZXJlIiwicmVzdWx0IiwiZG9jcyIsIk5vdEZvdW5kIiwiRm9yYmlkZGVuIiwiaG9va3MiLCJiZWZvcmVSZWFkIiwicmVkdWNlIiwicHJpb3JIb29rIiwiaG9vayIsInZlcnNpb24iLCJjb250ZXh0IiwiZG9jIiwicXVlcnkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFmdGVyUmVhZCIsImdsb2JhbCIsImNvbW1pdFRyYW5zYWN0aW9uIiwiZXJyb3IiLCJraWxsVHJhbnNhY3Rpb24iXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1Qzs7OzsrQkFzSnZDOzs7ZUFBQTs7O21FQXJKdUI7c0VBTUc7Z0NBQ0s7d0JBQ2U7MkJBQ3BCO21DQUNRO2lDQUNGO2lDQUNBOzs7Ozs7QUFhaEMsZUFBZUEsZ0JBQ2JDLElBQWU7SUFFZixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsWUFBWSxFQUFFQyxRQUFRQyxnQkFBZ0IsRUFBRSxFQUN4Q0MsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxDQUFDLEVBQUUsRUFDM0JILEdBQUcsRUFDSEksZ0JBQWdCLEVBQ2pCLEdBQUdiO0lBRUosSUFBSSxDQUFDQyxJQUFJO1FBQ1AsTUFBTSxJQUFJYSxnQkFBUSxDQUFDLDBCQUEwQkMsbUJBQVUsQ0FBQ0MsV0FBVztJQUNyRTtJQUVBLElBQUk7UUFDRixNQUFNQyxlQUFlLE1BQU1DLElBQUFBLGdDQUFlLEVBQUNUO1FBRTNDLHdDQUF3QztRQUN4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