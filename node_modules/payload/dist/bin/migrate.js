"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "migrate", {
    enumerable: true,
    get: function() {
        return migrate;
    }
});
const _minimist = /*#__PURE__*/ _interop_require_default(require("minimist"));
const _ = /*#__PURE__*/ _interop_require_default(require(".."));
const _logger = require("../utilities/logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * The default logger's options did not allow for forcing sync logging
 * Using these options, to force both pretty print and sync logging
 */ const prettySyncLogger = {
    loggerDestination: _logger.prettySyncLoggerDestination,
    loggerOptions: {}
};
const availableCommands = [
    'migrate',
    'migrate:create',
    'migrate:down',
    'migrate:refresh',
    'migrate:reset',
    'migrate:status',
    'migration:fresh'
];
const availableCommandsMsg = `Available commands: ${availableCommands.join(', ')}`;
const migrate = async (parsedArgs)=>{
    const { _: args, file, help } = parsedArgs;
    if (help) {
        // eslint-disable-next-line no-console
        console.log(`\n\n${availableCommandsMsg}\n`) // Avoid having to init payload to get the logger
        ;
        process.exit(0);
    }
    process.env.PAYLOAD_MIGRATING = 'true';
    // Barebones instance to access database adapter
    await _.default.init({
        disableOnInit: true,
        local: true,
        secret: process.env.PAYLOAD_SECRET || '--unused--',
        ...prettySyncLogger
    });
    const adapter = _.default.db;
    if (!adapter) {
        throw new Error('No database adapter found');
    }
    if (!args.length) {
        _.default.logger.error({
            msg: `No migration command provided. ${availableCommandsMsg}`
        });
        process.exit(1);
    }
    switch(args[0]){
        case 'migrate':
            await adapter.migrate();
            break;
        case 'migrate:status':
            await adapter.migrateStatus();
            break;
        case 'migrate:down':
            await adapter.migrateDown();
            break;
        case 'migrate:refresh':
            await adapter.migrateRefresh();
            break;
        case 'migrate:reset':
            await adapter.migrateReset();
            break;
        case 'migrate:fresh':
            await adapter.migrateFresh();
            break;
        case 'migrate:create':
            try {
                await adapter.createMigration({
                    file,
                    migrationName: args[1],
                    payload: _.default
                });
            } catch (err) {
                throw new Error(`Error creating migration: ${err.message}`);
            }
            break;
        default:
            _.default.logger.error({
                msg: `Unknown migration command: ${args[0]}. ${availableCommandsMsg}`
            });
            process.exit(1);
    }
    _.default.logger.info('Done.');
};
// When launched directly call migrate
if (module.id === require.main.id) {
    const args = (0, _minimist.default)(process.argv.slice(2));
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    migrate(args).then(()=>{
        process.exit(0);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vbWlncmF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFBhcnNlZEFyZ3MgfSBmcm9tICdtaW5pbWlzdCdcblxuaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0J1xuXG5pbXBvcnQgcGF5bG9hZCBmcm9tICcuLidcbmltcG9ydCB7IHByZXR0eVN5bmNMb2dnZXJEZXN0aW5hdGlvbiB9IGZyb20gJy4uL3V0aWxpdGllcy9sb2dnZXInXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbG9nZ2VyJ3Mgb3B0aW9ucyBkaWQgbm90IGFsbG93IGZvciBmb3JjaW5nIHN5bmMgbG9nZ2luZ1xuICogVXNpbmcgdGhlc2Ugb3B0aW9ucywgdG8gZm9yY2UgYm90aCBwcmV0dHkgcHJpbnQgYW5kIHN5bmMgbG9nZ2luZ1xuICovXG5jb25zdCBwcmV0dHlTeW5jTG9nZ2VyID0ge1xuICBsb2dnZXJEZXN0aW5hdGlvbjogcHJldHR5U3luY0xvZ2dlckRlc3RpbmF0aW9uLFxuICBsb2dnZXJPcHRpb25zOiB7fSxcbn1cblxuY29uc3QgYXZhaWxhYmxlQ29tbWFuZHMgPSBbXG4gICdtaWdyYXRlJyxcbiAgJ21pZ3JhdGU6Y3JlYXRlJyxcbiAgJ21pZ3JhdGU6ZG93bicsXG4gICdtaWdyYXRlOnJlZnJlc2gnLFxuICAnbWlncmF0ZTpyZXNldCcsXG4gICdtaWdyYXRlOnN0YXR1cycsXG4gICdtaWdyYXRpb246ZnJlc2gnLFxuXVxuXG5jb25zdCBhdmFpbGFibGVDb21tYW5kc01zZyA9IGBBdmFpbGFibGUgY29tbWFuZHM6ICR7YXZhaWxhYmxlQ29tbWFuZHMuam9pbignLCAnKX1gXG5cbmV4cG9ydCBjb25zdCBtaWdyYXRlID0gYXN5bmMgKHBhcnNlZEFyZ3M6IFBhcnNlZEFyZ3MpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgeyBfOiBhcmdzLCBmaWxlLCBoZWxwIH0gPSBwYXJzZWRBcmdzXG4gIGlmIChoZWxwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhgXFxuXFxuJHthdmFpbGFibGVDb21tYW5kc01zZ31cXG5gKSAvLyBBdm9pZCBoYXZpbmcgdG8gaW5pdCBwYXlsb2FkIHRvIGdldCB0aGUgbG9nZ2VyXG4gICAgcHJvY2Vzcy5leGl0KDApXG4gIH1cblxuICBwcm9jZXNzLmVudi5QQVlMT0FEX01JR1JBVElORyA9ICd0cnVlJ1xuXG4gIC8vIEJhcmVib25lcyBpbnN0YW5jZSB0byBhY2Nlc3MgZGF0YWJhc2UgYWRhcHRlclxuICBhd2FpdCBwYXlsb2FkLmluaXQoe1xuICAgIGRpc2FibGVPbkluaXQ6IHRydWUsXG4gICAgbG9jYWw6IHRydWUsXG4gICAgc2VjcmV0OiBwcm9jZXNzLmVudi5QQVlMT0FEX1NFQ1JFVCB8fCAnLS11bnVzZWQtLScsXG4gICAgLi4ucHJldHR5U3luY0xvZ2dlcixcbiAgfSlcblxuICBjb25zdCBhZGFwdGVyID0gcGF5bG9hZC5kYlxuXG4gIGlmICghYWRhcHRlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YWJhc2UgYWRhcHRlciBmb3VuZCcpXG4gIH1cblxuICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgcGF5bG9hZC5sb2dnZXIuZXJyb3Ioe1xuICAgICAgbXNnOiBgTm8gbWlncmF0aW9uIGNvbW1hbmQgcHJvdmlkZWQuICR7YXZhaWxhYmxlQ29tbWFuZHNNc2d9YCxcbiAgICB9KVxuICAgIHByb2Nlc3MuZXhpdCgxKVxuICB9XG5cbiAgc3dpdGNoIChhcmdzWzBdKSB7XG4gICAgY2FzZSAnbWlncmF0ZSc6XG4gICAgICBhd2FpdCBhZGFwdGVyLm1pZ3JhdGUoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdtaWdyYXRlOnN0YXR1cyc6XG4gICAgICBhd2FpdCBhZGFwdGVyLm1pZ3JhdGVTdGF0dXMoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdtaWdyYXRlOmRvd24nOlxuICAgICAgYXdhaXQgYWRhcHRlci5taWdyYXRlRG93bigpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ21pZ3JhdGU6cmVmcmVzaCc6XG4gICAgICBhd2FpdCBhZGFwdGVyLm1pZ3JhdGVSZWZyZXNoKClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbWlncmF0ZTpyZXNldCc6XG4gICAgICBhd2FpdCBhZGFwdGVyLm1pZ3JhdGVSZXNldCgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ21pZ3JhdGU6ZnJlc2gnOlxuICAgICAgYXdhaXQgYWRhcHRlci5taWdyYXRlRnJlc2goKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdtaWdyYXRlOmNyZWF0ZSc6XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBhZGFwdGVyLmNyZWF0ZU1pZ3JhdGlvbih7IGZpbGUsIG1pZ3JhdGlvbk5hbWU6IGFyZ3NbMV0sIHBheWxvYWQgfSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGNyZWF0aW5nIG1pZ3JhdGlvbjogJHtlcnIubWVzc2FnZX1gKVxuICAgICAgfVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcih7XG4gICAgICAgIG1zZzogYFVua25vd24gbWlncmF0aW9uIGNvbW1hbmQ6ICR7YXJnc1swXX0uICR7YXZhaWxhYmxlQ29tbWFuZHNNc2d9YCxcbiAgICAgIH0pXG4gICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgfVxuXG4gIHBheWxvYWQubG9nZ2VyLmluZm8oJ0RvbmUuJylcbn1cblxuLy8gV2hlbiBsYXVuY2hlZCBkaXJlY3RseSBjYWxsIG1pZ3JhdGVcbmlmIChtb2R1bGUuaWQgPT09IHJlcXVpcmUubWFpbi5pZCkge1xuICBjb25zdCBhcmdzID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gIG1pZ3JhdGUoYXJncykudGhlbigoKSA9PiB7XG4gICAgcHJvY2Vzcy5leGl0KDApXG4gIH0pXG59XG4iXSwibmFtZXMiOlsibWlncmF0ZSIsInByZXR0eVN5bmNMb2dnZXIiLCJsb2dnZXJEZXN0aW5hdGlvbiIsInByZXR0eVN5bmNMb2dnZXJEZXN0aW5hdGlvbiIsImxvZ2dlck9wdGlvbnMiLCJhdmFpbGFibGVDb21tYW5kcyIsImF2YWlsYWJsZUNvbW1hbmRzTXNnIiwiam9pbiIsInBhcnNlZEFyZ3MiLCJfIiwiYXJncyIsImZpbGUiLCJoZWxwIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJleGl0IiwiZW52IiwiUEFZTE9BRF9NSUdSQVRJTkciLCJwYXlsb2FkIiwiaW5pdCIsImRpc2FibGVPbkluaXQiLCJsb2NhbCIsInNlY3JldCIsIlBBWUxPQURfU0VDUkVUIiwiYWRhcHRlciIsImRiIiwiRXJyb3IiLCJsZW5ndGgiLCJsb2dnZXIiLCJlcnJvciIsIm1zZyIsIm1pZ3JhdGVTdGF0dXMiLCJtaWdyYXRlRG93biIsIm1pZ3JhdGVSZWZyZXNoIiwibWlncmF0ZVJlc2V0IiwibWlncmF0ZUZyZXNoIiwiY3JlYXRlTWlncmF0aW9uIiwibWlncmF0aW9uTmFtZSIsImVyciIsIm1lc3NhZ2UiLCJpbmZvIiwibW9kdWxlIiwiaWQiLCJyZXF1aXJlIiwibWFpbiIsIm1pbmltaXN0IiwiYXJndiIsInNsaWNlIiwidGhlbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE0QmFBOzs7ZUFBQUE7OztpRUExQlE7eURBRUQ7d0JBQ3dCOzs7Ozs7QUFFNUM7OztDQUdDLEdBQ0QsTUFBTUMsbUJBQW1CO0lBQ3ZCQyxtQkFBbUJDLG1DQUEyQjtJQUM5Q0MsZUFBZSxDQUFDO0FBQ2xCO0FBRUEsTUFBTUMsb0JBQW9CO0lBQ3hCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxNQUFNQyx1QkFBdUIsQ0FBQyxvQkFBb0IsRUFBRUQsa0JBQWtCRSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBRTNFLE1BQU1QLFVBQVUsT0FBT1E7SUFDNUIsTUFBTSxFQUFFQyxHQUFHQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdKO0lBQ2hDLElBQUlJLE1BQU07UUFDUixzQ0FBc0M7UUFDdENDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRVIscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLGlEQUFpRDs7UUFDOUZTLFFBQVFDLElBQUksQ0FBQztJQUNmO0lBRUFELFFBQVFFLEdBQUcsQ0FBQ0MsaUJBQWlCLEdBQUc7SUFFaEMsZ0RBQWdEO0lBQ2hELE1BQU1DLFNBQU8sQ0FBQ0MsSUFBSSxDQUFDO1FBQ2pCQyxlQUFlO1FBQ2ZDLE9BQU87UUFDUEMsUUFBUVIsUUFBUUUsR0FBRyxDQUFDTyxjQUFjLElBQUk7UUFDdEMsR0FBR3ZCLGdCQUFnQjtJQUNyQjtJQUVBLE1BQU13QixVQUFVTixTQUFPLENBQUNPLEVBQUU7SUFFMUIsSUFBSSxDQUFDRCxTQUFTO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBRUEsSUFBSSxDQUFDakIsS0FBS2tCLE1BQU0sRUFBRTtRQUNoQlQsU0FBTyxDQUFDVSxNQUFNLENBQUNDLEtBQUssQ0FBQztZQUNuQkMsS0FBSyxDQUFDLCtCQUErQixFQUFFekIscUJBQXFCLENBQUM7UUFDL0Q7UUFDQVMsUUFBUUMsSUFBSSxDQUFDO0lBQ2Y7SUFFQSxPQUFRTixJQUFJLENBQUMsRUFBRTtRQUNiLEtBQUs7WUFDSCxNQUFNZSxRQUFRekIsT0FBTztZQUNyQjtRQUNGLEtBQUs7WUFDSCxNQUFNeUIsUUFBUU8sYUFBYTtZQUMzQjtRQUNGLEtBQUs7WUFDSCxNQUFNUCxRQUFRUSxXQUFXO1lBQ3pCO1FBQ0YsS0FBSztZQUNILE1BQU1SLFFBQVFTLGNBQWM7WUFDNUI7UUFDRixLQUFLO1lBQ0gsTUFBTVQsUUFBUVUsWUFBWTtZQUMxQjtRQUNGLEtBQUs7WUFDSCxNQUFNVixRQUFRVyxZQUFZO1lBQzFCO1FBQ0YsS0FBSztZQUNILElBQUk7Z0JBQ0YsTUFBTVgsUUFBUVksZUFBZSxDQUFDO29CQUFFMUI7b0JBQU0yQixlQUFlNUIsSUFBSSxDQUFDLEVBQUU7b0JBQUVTLFNBQUFBLFNBQU87Z0JBQUM7WUFDeEUsRUFBRSxPQUFPb0IsS0FBSztnQkFDWixNQUFNLElBQUlaLE1BQU0sQ0FBQywwQkFBMEIsRUFBRVksSUFBSUMsT0FBTyxDQUFDLENBQUM7WUFDNUQ7WUFDQTtRQUVGO1lBQ0VyQixTQUFPLENBQUNVLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO2dCQUNuQkMsS0FBSyxDQUFDLDJCQUEyQixFQUFFckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVKLHFCQUFxQixDQUFDO1lBQ3ZFO1lBQ0FTLFFBQVFDLElBQUksQ0FBQztJQUNqQjtJQUVBRyxTQUFPLENBQUNVLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDO0FBQ3RCO0FBRUEsc0NBQXNDO0FBQ3RDLElBQUlDLE9BQU9DLEVBQUUsS0FBS0MsUUFBUUMsSUFBSSxDQUFDRixFQUFFLEVBQUU7SUFDakMsTUFBTWpDLE9BQU9vQyxJQUFBQSxpQkFBUSxFQUFDL0IsUUFBUWdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDO0lBQ3pDLG1FQUFtRTtJQUNuRWhELFFBQVFVLE1BQU11QyxJQUFJLENBQUM7UUFDakJsQyxRQUFRQyxJQUFJLENBQUM7SUFDZjtBQUNGIn0=