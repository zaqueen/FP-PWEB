/* eslint-disable @typescript-eslint/no-floating-promises */ /* eslint-disable @typescript-eslint/no-var-requires */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _register = /*#__PURE__*/ _interop_require_default(require("@swc/register"));
const _dotenv = /*#__PURE__*/ _interop_require_default(require("dotenv"));
const _findup = /*#__PURE__*/ _interop_require_default(require("find-up"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _gettsconfig = require("get-tsconfig");
const _minimist = /*#__PURE__*/ _interop_require_default(require("minimist"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _generateGraphQLSchema = require("./generateGraphQLSchema");
const _generateTypes = require("./generateTypes");
const _migrate = require("./migrate");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
loadEnv();
const tsConfig = (0, _gettsconfig.getTsconfig)();
const swcOptions = {
    ignore: [
        /.*[\\/]node_modules[\\/].*/
    ],
    jsc: {
        baseUrl: _path.default.resolve(),
        parser: {
            syntax: 'typescript',
            tsx: true
        },
        paths: undefined
    },
    module: {
        type: 'commonjs'
    },
    sourceMaps: 'inline'
};
if (tsConfig?.config?.compilerOptions?.paths) {
    swcOptions.jsc.paths = tsConfig.config.compilerOptions.paths;
    if (tsConfig?.config?.compilerOptions?.baseUrl) {
        swcOptions.jsc.baseUrl = _path.default.resolve(tsConfig.config.compilerOptions.baseUrl);
    }
}
// Allow disabling SWC for debugging
if (process.env.DISABLE_SWC !== 'true') {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - bad @swc/register types
    (0, _register.default)(swcOptions);
}
const { build } = require('./build');
const args = (0, _minimist.default)(process.argv.slice(2));
const scriptIndex = args._.findIndex((x)=>x === 'build');
const script = scriptIndex === -1 ? args._[0] : args._[scriptIndex];
if (script.startsWith('migrate')) {
    (0, _migrate.migrate)(args).then(()=>process.exit(0));
} else {
    switch(script.toLowerCase()){
        case 'build':
            {
                build();
                break;
            }
        case 'generate:types':
            {
                (0, _generateTypes.generateTypes)();
                break;
            }
        case 'generate:graphqlschema':
            {
                (0, _generateGraphQLSchema.generateGraphQLSchema)();
                break;
            }
        default:
            console.log(`Unknown script "${script}".`);
            break;
    }
}
/**
 * Try to find user's .env and load it
 */ function loadEnv() {
    const envPath = _findup.default.sync('.env');
    if (envPath) {
        _dotenv.default.config({
            path: envPath
        });
    } else {
        const cwdPath = _path.default.resolve(process.cwd(), '.env');
        if (_fs.default.existsSync(cwdPath)) {
            _dotenv.default.config({
                path: cwdPath
            });
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovXG5pbXBvcnQgc3djUmVnaXN0ZXIgZnJvbSAnQHN3Yy9yZWdpc3RlcidcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52J1xuaW1wb3J0IGZpbmRVcCBmcm9tICdmaW5kLXVwJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHsgZ2V0VHNjb25maWcgYXMgZ2V0VFNjb25maWcgfSBmcm9tICdnZXQtdHNjb25maWcnXG5pbXBvcnQgbWluaW1pc3QgZnJvbSAnbWluaW1pc3QnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgeyBnZW5lcmF0ZUdyYXBoUUxTY2hlbWEgfSBmcm9tICcuL2dlbmVyYXRlR3JhcGhRTFNjaGVtYSdcbmltcG9ydCB7IGdlbmVyYXRlVHlwZXMgfSBmcm9tICcuL2dlbmVyYXRlVHlwZXMnXG5pbXBvcnQgeyBtaWdyYXRlIH0gZnJvbSAnLi9taWdyYXRlJ1xuXG5sb2FkRW52KClcblxuY29uc3QgdHNDb25maWcgPSBnZXRUU2NvbmZpZygpXG5cbmNvbnN0IHN3Y09wdGlvbnMgPSB7XG4gIGlnbm9yZTogW1xuICAgIC8uKltcXFxcL11ub2RlX21vZHVsZXNbXFxcXC9dLiovLCAvLyBwYXJzZSBldmVyeXRoaW5nIGJlc2lkZXMgZmlsZXMgd2l0aGluIG5vZGVfbW9kdWxlc1xuICBdLFxuICBqc2M6IHtcbiAgICBiYXNlVXJsOiBwYXRoLnJlc29sdmUoKSxcbiAgICBwYXJzZXI6IHtcbiAgICAgIHN5bnRheDogJ3R5cGVzY3JpcHQnLFxuICAgICAgdHN4OiB0cnVlLFxuICAgIH0sXG4gICAgcGF0aHM6IHVuZGVmaW5lZCxcbiAgfSxcbiAgbW9kdWxlOiB7XG4gICAgdHlwZTogJ2NvbW1vbmpzJyxcbiAgfSxcbiAgc291cmNlTWFwczogJ2lubGluZScsXG59XG5cbmlmICh0c0NvbmZpZz8uY29uZmlnPy5jb21waWxlck9wdGlvbnM/LnBhdGhzKSB7XG4gIHN3Y09wdGlvbnMuanNjLnBhdGhzID0gdHNDb25maWcuY29uZmlnLmNvbXBpbGVyT3B0aW9ucy5wYXRoc1xuXG4gIGlmICh0c0NvbmZpZz8uY29uZmlnPy5jb21waWxlck9wdGlvbnM/LmJhc2VVcmwpIHtcbiAgICBzd2NPcHRpb25zLmpzYy5iYXNlVXJsID0gcGF0aC5yZXNvbHZlKHRzQ29uZmlnLmNvbmZpZy5jb21waWxlck9wdGlvbnMuYmFzZVVybClcbiAgfVxufVxuXG4vLyBBbGxvdyBkaXNhYmxpbmcgU1dDIGZvciBkZWJ1Z2dpbmdcbmlmIChwcm9jZXNzLmVudi5ESVNBQkxFX1NXQyAhPT0gJ3RydWUnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgLy8gQHRzLWlnbm9yZSAtIGJhZCBAc3djL3JlZ2lzdGVyIHR5cGVzXG4gIHN3Y1JlZ2lzdGVyKHN3Y09wdGlvbnMpXG59XG5cbmNvbnN0IHsgYnVpbGQgfSA9IHJlcXVpcmUoJy4vYnVpbGQnKVxuXG5jb25zdCBhcmdzID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKVxuXG5jb25zdCBzY3JpcHRJbmRleCA9IGFyZ3MuXy5maW5kSW5kZXgoKHgpID0+IHggPT09ICdidWlsZCcpXG5cbmNvbnN0IHNjcmlwdCA9IHNjcmlwdEluZGV4ID09PSAtMSA/IGFyZ3MuX1swXSA6IGFyZ3MuX1tzY3JpcHRJbmRleF1cblxuaWYgKHNjcmlwdC5zdGFydHNXaXRoKCdtaWdyYXRlJykpIHtcbiAgbWlncmF0ZShhcmdzKS50aGVuKCgpID0+IHByb2Nlc3MuZXhpdCgwKSlcbn0gZWxzZSB7XG4gIHN3aXRjaCAoc2NyaXB0LnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdidWlsZCc6IHtcbiAgICAgIGJ1aWxkKClcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgY2FzZSAnZ2VuZXJhdGU6dHlwZXMnOiB7XG4gICAgICBnZW5lcmF0ZVR5cGVzKClcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgY2FzZSAnZ2VuZXJhdGU6Z3JhcGhxbHNjaGVtYSc6IHtcbiAgICAgIGdlbmVyYXRlR3JhcGhRTFNjaGVtYSgpXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBzY3JpcHQgXCIke3NjcmlwdH1cIi5gKVxuICAgICAgYnJlYWtcbiAgfVxufVxuXG4vKipcbiAqIFRyeSB0byBmaW5kIHVzZXIncyAuZW52IGFuZCBsb2FkIGl0XG4gKi9cbmZ1bmN0aW9uIGxvYWRFbnYoKSB7XG4gIGNvbnN0IGVudlBhdGggPSBmaW5kVXAuc3luYygnLmVudicpXG5cbiAgaWYgKGVudlBhdGgpIHtcbiAgICBkb3RlbnYuY29uZmlnKHsgcGF0aDogZW52UGF0aCB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGN3ZFBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy5lbnYnKVxuICAgIGlmIChmcy5leGlzdHNTeW5jKGN3ZFBhdGgpKSB7XG4gICAgICBkb3RlbnYuY29uZmlnKHtcbiAgICAgICAgcGF0aDogY3dkUGF0aCxcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibG9hZEVudiIsInRzQ29uZmlnIiwiZ2V0VFNjb25maWciLCJzd2NPcHRpb25zIiwiaWdub3JlIiwianNjIiwiYmFzZVVybCIsInBhdGgiLCJyZXNvbHZlIiwicGFyc2VyIiwic3ludGF4IiwidHN4IiwicGF0aHMiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJ0eXBlIiwic291cmNlTWFwcyIsImNvbmZpZyIsImNvbXBpbGVyT3B0aW9ucyIsInByb2Nlc3MiLCJlbnYiLCJESVNBQkxFX1NXQyIsInN3Y1JlZ2lzdGVyIiwiYnVpbGQiLCJyZXF1aXJlIiwiYXJncyIsIm1pbmltaXN0IiwiYXJndiIsInNsaWNlIiwic2NyaXB0SW5kZXgiLCJfIiwiZmluZEluZGV4IiwieCIsInNjcmlwdCIsInN0YXJ0c1dpdGgiLCJtaWdyYXRlIiwidGhlbiIsImV4aXQiLCJ0b0xvd2VyQ2FzZSIsImdlbmVyYXRlVHlwZXMiLCJnZW5lcmF0ZUdyYXBoUUxTY2hlbWEiLCJjb25zb2xlIiwibG9nIiwiZW52UGF0aCIsImZpbmRVcCIsInN5bmMiLCJkb3RlbnYiLCJjd2RQYXRoIiwiY3dkIiwiZnMiLCJleGlzdHNTeW5jIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQsR0FDMUQscURBQXFEOzs7O2lFQUM3QjsrREFDTDsrREFDQTsyREFDSjs2QkFDNEI7aUVBQ3RCOzZEQUNKO3VDQUVxQjsrQkFDUjt5QkFDTjs7Ozs7O0FBRXhCQTtBQUVBLE1BQU1DLFdBQVdDLElBQUFBLHdCQUFXO0FBRTVCLE1BQU1DLGFBQWE7SUFDakJDLFFBQVE7UUFDTjtLQUNEO0lBQ0RDLEtBQUs7UUFDSEMsU0FBU0MsYUFBSSxDQUFDQyxPQUFPO1FBQ3JCQyxRQUFRO1lBQ05DLFFBQVE7WUFDUkMsS0FBSztRQUNQO1FBQ0FDLE9BQU9DO0lBQ1Q7SUFDQUMsUUFBUTtRQUNOQyxNQUFNO0lBQ1I7SUFDQUMsWUFBWTtBQUNkO0FBRUEsSUFBSWYsVUFBVWdCLFFBQVFDLGlCQUFpQk4sT0FBTztJQUM1Q1QsV0FBV0UsR0FBRyxDQUFDTyxLQUFLLEdBQUdYLFNBQVNnQixNQUFNLENBQUNDLGVBQWUsQ0FBQ04sS0FBSztJQUU1RCxJQUFJWCxVQUFVZ0IsUUFBUUMsaUJBQWlCWixTQUFTO1FBQzlDSCxXQUFXRSxHQUFHLENBQUNDLE9BQU8sR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQUNQLFNBQVNnQixNQUFNLENBQUNDLGVBQWUsQ0FBQ1osT0FBTztJQUMvRTtBQUNGO0FBRUEsb0NBQW9DO0FBQ3BDLElBQUlhLFFBQVFDLEdBQUcsQ0FBQ0MsV0FBVyxLQUFLLFFBQVE7SUFDdEMsNkRBQTZEO0lBQzdELHVDQUF1QztJQUN2Q0MsSUFBQUEsaUJBQVcsRUFBQ25CO0FBQ2Q7QUFFQSxNQUFNLEVBQUVvQixLQUFLLEVBQUUsR0FBR0MsUUFBUTtBQUUxQixNQUFNQyxPQUFPQyxJQUFBQSxpQkFBUSxFQUFDUCxRQUFRUSxJQUFJLENBQUNDLEtBQUssQ0FBQztBQUV6QyxNQUFNQyxjQUFjSixLQUFLSyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDQyxJQUFNQSxNQUFNO0FBRWxELE1BQU1DLFNBQVNKLGdCQUFnQixDQUFDLElBQUlKLEtBQUtLLENBQUMsQ0FBQyxFQUFFLEdBQUdMLEtBQUtLLENBQUMsQ0FBQ0QsWUFBWTtBQUVuRSxJQUFJSSxPQUFPQyxVQUFVLENBQUMsWUFBWTtJQUNoQ0MsSUFBQUEsZ0JBQU8sRUFBQ1YsTUFBTVcsSUFBSSxDQUFDLElBQU1qQixRQUFRa0IsSUFBSSxDQUFDO0FBQ3hDLE9BQU87SUFDTCxPQUFRSixPQUFPSyxXQUFXO1FBQ3hCLEtBQUs7WUFBUztnQkFDWmY7Z0JBQ0E7WUFDRjtRQUVBLEtBQUs7WUFBa0I7Z0JBQ3JCZ0IsSUFBQUEsNEJBQWE7Z0JBQ2I7WUFDRjtRQUVBLEtBQUs7WUFBMEI7Z0JBQzdCQyxJQUFBQSw0Q0FBcUI7Z0JBQ3JCO1lBQ0Y7UUFFQTtZQUNFQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRVQsT0FBTyxFQUFFLENBQUM7WUFDekM7SUFDSjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTakM7SUFDUCxNQUFNMkMsVUFBVUMsZUFBTSxDQUFDQyxJQUFJLENBQUM7SUFFNUIsSUFBSUYsU0FBUztRQUNYRyxlQUFNLENBQUM3QixNQUFNLENBQUM7WUFBRVYsTUFBTW9DO1FBQVE7SUFDaEMsT0FBTztRQUNMLE1BQU1JLFVBQVV4QyxhQUFJLENBQUNDLE9BQU8sQ0FBQ1csUUFBUTZCLEdBQUcsSUFBSTtRQUM1QyxJQUFJQyxXQUFFLENBQUNDLFVBQVUsQ0FBQ0gsVUFBVTtZQUMxQkQsZUFBTSxDQUFDN0IsTUFBTSxDQUFDO2dCQUNaVixNQUFNd0M7WUFDUjtRQUNGO0lBQ0Y7QUFDRiJ9