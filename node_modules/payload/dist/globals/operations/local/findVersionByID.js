"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionByIDLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("../findVersionByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByIDLocal(payload, options) {
    const { id, depth, disableErrors = false, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, showHiddenFields, slug: globalSlug, user, req: incomingReq } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersionByID.default)({
        id,
        depth,
        disableErrors,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25CeUlELnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFR5cGVXaXRoVmVyc2lvbiB9IGZyb20gJy4uLy4uLy4uL3ZlcnNpb25zL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBmaW5kVmVyc2lvbkJ5SUQgZnJvbSAnLi4vZmluZFZlcnNpb25CeUlEJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPiA9IHtcbiAgZGVwdGg/OiBudW1iZXJcbiAgZGlzYWJsZUVycm9ycz86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNsdWc6IFRcbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGZpbmRWZXJzaW9uQnlJRExvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8VHlwZVdpdGhWZXJzaW9uPEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ11bVF0+PiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBkZXB0aCxcbiAgICBkaXNhYmxlRXJyb3JzID0gZmFsc2UsXG4gICAgZmFsbGJhY2tMb2NhbGUgPSBudWxsLFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICB1c2VyLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gcGF5bG9hZC5nbG9iYWxzLmNvbmZpZy5maW5kKChjb25maWcpID0+IGNvbmZpZy5zbHVnID09PSBnbG9iYWxTbHVnKVxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGUsXG4gICAgaTE4bixcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZCxcbiAgICBwYXlsb2FkQVBJOiAnbG9jYWwnLFxuICAgIHQ6IGkxOG4udCxcbiAgICB0cmFuc2FjdGlvbklEOiBpbmNvbWluZ1JlcT8udHJhbnNhY3Rpb25JRCxcbiAgICB1c2VyLFxuICB9IGFzIFBheWxvYWRSZXF1ZXN0XG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSlcblxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGZpbmRWZXJzaW9uQnlJRCh7XG4gICAgaWQsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiZmluZFZlcnNpb25CeUlETG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiZGVwdGgiLCJkaXNhYmxlRXJyb3JzIiwiZmFsbGJhY2tMb2NhbGUiLCJsb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJ1c2VyIiwicmVxIiwiaW5jb21pbmdSZXEiLCJnbG9iYWxDb25maWciLCJnbG9iYWxzIiwiZmluZCIsImkxOG4iLCJpMThuSW5pdCIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbkJ5SUQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBeUJBOzs7ZUFBOEJBOzs7NEJBbkJBO3dCQUNMO21DQUNTO3NCQUNUO3dFQUNHOzs7Ozs7QUFlYixlQUFlQSxxQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsS0FBSyxFQUNMQyxnQkFBZ0IsS0FBSyxFQUNyQkMsaUJBQWlCLElBQUksRUFDckJDLFNBQVNOLFFBQVFPLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHUixRQUFRTyxNQUFNLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLElBQUksRUFDeEZDLGlCQUFpQixJQUFJLEVBQ3JCQyxnQkFBZ0IsRUFDaEJDLE1BQU1DLFVBQVUsRUFDaEJDLElBQUksRUFDSkMsS0FBS0MsV0FBVyxFQUNqQixHQUFHZjtJQUVKLE1BQU1nQixlQUFlakIsUUFBUWtCLE9BQU8sQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUMsQ0FBQ1osU0FBV0EsT0FBT0ssSUFBSSxLQUFLQztJQUM3RSxNQUFNTyxPQUFPQyxJQUFBQSxjQUFRLEVBQUNyQixRQUFRTyxNQUFNLENBQUNhLElBQUk7SUFFekMsSUFBSSxDQUFDSCxjQUFjO1FBQ2pCLE1BQU0sSUFBSUssZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPVixZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTUUsTUFBTTtRQUNWVjtRQUNBZTtRQUNBZDtRQUNBTjtRQUNBd0IsWUFBWTtRQUNaQyxHQUFHTCxLQUFLSyxDQUFDO1FBQ1RDLGVBQWVWLGFBQWFVO1FBQzVCWjtJQUNGO0lBQ0FhLElBQUFBLG9DQUFpQixFQUFDWjtJQUVsQixJQUFJLENBQUNBLElBQUlhLGlCQUFpQixFQUFFYixJQUFJYSxpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2Q7SUFFbEUsT0FBT2UsSUFBQUEsd0JBQWUsRUFBQztRQUNyQjVCO1FBQ0FDO1FBQ0FDO1FBQ0FhO1FBQ0FQO1FBQ0FLO1FBQ0FKO0lBQ0Y7QUFDRiJ9