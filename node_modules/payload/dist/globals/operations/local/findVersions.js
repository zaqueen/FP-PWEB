"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionsLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersions = /*#__PURE__*/ _interop_require_default(require("../findVersions"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionsLocal(payload, options) {
    const { depth, fallbackLocale = null, limit, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, page, req: incomingReq, showHiddenFields, slug: globalSlug, sort, user, where } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersions.default)({
        depth,
        globalConfig,
        limit,
        overrideAccess,
        page,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBhZ2luYXRlZERvY3MgfSBmcm9tICcuLi8uLi8uLi9kYXRhYmFzZS90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIFdoZXJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFR5cGVXaXRoVmVyc2lvbiB9IGZyb20gJy4uLy4uLy4uL3ZlcnNpb25zL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBmaW5kVmVyc2lvbnMgZnJvbSAnLi4vZmluZFZlcnNpb25zJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPiA9IHtcbiAgZGVwdGg/OiBudW1iZXJcbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgbGltaXQ/OiBudW1iZXJcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICBwYWdlPzogbnVtYmVyXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNsdWc6IFRcbiAgc29ydD86IHN0cmluZ1xuICB1c2VyPzogRG9jdW1lbnRcbiAgd2hlcmU/OiBXaGVyZVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbnNMb2NhbDxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFBhZ2luYXRlZERvY3M8VHlwZVdpdGhWZXJzaW9uPEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ11bVF0+Pj4ge1xuICBjb25zdCB7XG4gICAgZGVwdGgsXG4gICAgZmFsbGJhY2tMb2NhbGUgPSBudWxsLFxuICAgIGxpbWl0LFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHBhZ2UsXG4gICAgcmVxOiBpbmNvbWluZ1JlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNsdWc6IGdsb2JhbFNsdWcsXG4gICAgc29ydCxcbiAgICB1c2VyLFxuICAgIHdoZXJlLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IHBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoY29uZmlnKSA9PiBjb25maWcuc2x1ZyA9PT0gZ2xvYmFsU2x1ZylcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kVmVyc2lvbnMoe1xuICAgIGRlcHRoLFxuICAgIGdsb2JhbENvbmZpZyxcbiAgICBsaW1pdCxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICBwYWdlLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNvcnQsXG4gICAgd2hlcmUsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiZmluZFZlcnNpb25zTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJsaW1pdCIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInBhZ2UiLCJyZXEiLCJpbmNvbWluZ1JlcSIsInNob3dIaWRkZW5GaWVsZHMiLCJzbHVnIiwiZ2xvYmFsU2x1ZyIsInNvcnQiLCJ1c2VyIiwid2hlcmUiLCJnbG9iYWxDb25maWciLCJnbG9iYWxzIiwiZmluZCIsImkxOG4iLCJpMThuSW5pdCIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJmaW5kVmVyc2lvbnMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBNEJBOzs7ZUFBOEJBOzs7NEJBckJBO3dCQUNMO21DQUNTO3NCQUNUO3FFQUNBOzs7Ozs7QUFpQlYsZUFBZUEsa0JBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxLQUFLLEVBQ0xDLGlCQUFpQixJQUFJLEVBQ3JCQyxLQUFLLEVBQ0xDLFNBQVNMLFFBQVFNLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHUCxRQUFRTSxNQUFNLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLElBQUksRUFDeEZDLGlCQUFpQixJQUFJLEVBQ3JCQyxJQUFJLEVBQ0pDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNKQyxJQUFJLEVBQ0pDLEtBQUssRUFDTixHQUFHakI7SUFFSixNQUFNa0IsZUFBZW5CLFFBQVFvQixPQUFPLENBQUNkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDLENBQUNmLFNBQVdBLE9BQU9RLElBQUksS0FBS0M7SUFDN0UsTUFBTU8sT0FBT0MsSUFBQUEsY0FBUSxFQUFDdkIsUUFBUU0sTUFBTSxDQUFDZ0IsSUFBSTtJQUV6QyxJQUFJLENBQUNILGNBQWM7UUFDakIsTUFBTSxJQUFJSyxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9WLFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNSixNQUFNO1FBQ1ZSO1FBQ0FtQjtRQUNBakI7UUFDQUw7UUFDQTBCLFlBQVk7UUFDWkMsR0FBR0wsS0FBS0ssQ0FBQztRQUNUQyxlQUFlaEIsYUFBYWdCO1FBQzVCWDtJQUNGO0lBQ0FZLElBQUFBLG9DQUFpQixFQUFDbEI7SUFFbEIsSUFBSSxDQUFDQSxJQUFJbUIsaUJBQWlCLEVBQUVuQixJQUFJbUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNwQjtJQUVsRSxPQUFPcUIsSUFBQUEscUJBQVksRUFBQztRQUNsQjlCO1FBQ0FpQjtRQUNBZjtRQUNBSztRQUNBQztRQUNBQztRQUNBRTtRQUNBRztRQUNBRTtJQUNGO0FBQ0YifQ==