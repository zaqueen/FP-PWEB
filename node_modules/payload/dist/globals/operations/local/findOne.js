"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findOneLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findOne = /*#__PURE__*/ _interop_require_default(require("../findOne"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findOneLocal(payload, options) {
    const { depth, draft = false, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale: fallbackLocale ?? options.req?.fallbackLocale ?? defaultLocale,
        i18n,
        locale: locale ?? options.req?.locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        user
    };
    (0, _setRequestContext.setRequestContext)(req);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findOne.default)({
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZE9uZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IGZpbmRPbmUgZnJvbSAnLi4vZmluZE9uZSdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRyYWZ0PzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNsdWc6IFRcbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGZpbmRPbmVMb2NhbDxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4oXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ11bVF0+IHtcbiAgY29uc3Qge1xuICAgIGRlcHRoLFxuICAgIGRyYWZ0ID0gZmFsc2UsXG4gICAgZmFsbGJhY2tMb2NhbGUgPSBudWxsLFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IHBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoY29uZmlnKSA9PiBjb25maWcuc2x1ZyA9PT0gZ2xvYmFsU2x1ZylcbiAgY29uc3QgZGVmYXVsdExvY2FsZSA9IHBheWxvYWQ/LmNvbmZpZz8ubG9jYWxpemF0aW9uXG4gICAgPyBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZVxuICAgIDogbnVsbFxuXG4gIGlmICghZ2xvYmFsQ29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKGBUaGUgZ2xvYmFsIHdpdGggc2x1ZyAke1N0cmluZyhnbG9iYWxTbHVnKX0gY2FuJ3QgYmUgZm91bmQuYClcbiAgfVxuXG4gIGNvbnN0IGkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGUgPz8gb3B0aW9ucy5yZXE/LmZhbGxiYWNrTG9jYWxlID8/IGRlZmF1bHRMb2NhbGUsXG4gICAgaTE4bixcbiAgICBsb2NhbGU6IGxvY2FsZSA/PyBvcHRpb25zLnJlcT8ubG9jYWxlID8/IGRlZmF1bHRMb2NhbGUsXG4gICAgcGF5bG9hZCxcbiAgICBwYXlsb2FkQVBJOiAnbG9jYWwnLFxuICAgIHQ6IGkxOG4udCxcbiAgICB1c2VyLFxuICB9IGFzIFBheWxvYWRSZXF1ZXN0XG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSlcblxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIGZpbmRPbmUoe1xuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIGdsb2JhbENvbmZpZyxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnIGFzIHN0cmluZyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJmaW5kT25lTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImRlcHRoIiwiZHJhZnQiLCJmYWxsYmFja0xvY2FsZSIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInNob3dIaWRkZW5GaWVsZHMiLCJzbHVnIiwiZ2xvYmFsU2x1ZyIsInVzZXIiLCJnbG9iYWxDb25maWciLCJnbG9iYWxzIiwiZmluZCIsIkFQSUVycm9yIiwiU3RyaW5nIiwiaTE4biIsImkxOG5Jbml0IiwicmVxIiwicGF5bG9hZEFQSSIsInQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRPbmUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBdUJBOzs7ZUFBOEJBOzs7NEJBbEJBO3dCQUNMO21DQUNTO3NCQUNUO2dFQUNMOzs7Ozs7QUFjTCxlQUFlQSxhQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQW1CO0lBRW5CLE1BQU0sRUFDSkMsS0FBSyxFQUNMQyxRQUFRLEtBQUssRUFDYkMsaUJBQWlCLElBQUksRUFDckJDLFNBQVNMLFFBQVFNLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHUCxRQUFRTSxNQUFNLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLElBQUksRUFDeEZDLGlCQUFpQixJQUFJLEVBQ3JCQyxnQkFBZ0IsRUFDaEJDLE1BQU1DLFVBQVUsRUFDaEJDLElBQUksRUFDTCxHQUFHWjtJQUVKLE1BQU1hLGVBQWVkLFFBQVFlLE9BQU8sQ0FBQ1QsTUFBTSxDQUFDVSxJQUFJLENBQUMsQ0FBQ1YsU0FBV0EsT0FBT0ssSUFBSSxLQUFLQztJQUM3RSxNQUFNSixnQkFBZ0JSLFNBQVNNLFFBQVFDLGVBQ25DUCxTQUFTTSxRQUFRQyxjQUFjQyxnQkFDL0I7SUFFSixJQUFJLENBQUNNLGNBQWM7UUFDakIsTUFBTSxJQUFJRyxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9OLFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNTyxPQUFPQyxJQUFBQSxjQUFRLEVBQUNwQixRQUFRTSxNQUFNLENBQUNhLElBQUk7SUFFekMsTUFBTUUsTUFBTTtRQUNWakIsZ0JBQWdCQSxrQkFBa0JILFFBQVFvQixHQUFHLEVBQUVqQixrQkFBa0JJO1FBQ2pFVztRQUNBZCxRQUFRQSxVQUFVSixRQUFRb0IsR0FBRyxFQUFFaEIsVUFBVUc7UUFDekNSO1FBQ0FzQixZQUFZO1FBQ1pDLEdBQUdKLEtBQUtJLENBQUM7UUFDVFY7SUFDRjtJQUNBVyxJQUFBQSxvQ0FBaUIsRUFBQ0g7SUFFbEIsSUFBSSxDQUFDQSxJQUFJSSxpQkFBaUIsRUFBRUosSUFBSUksaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNMO0lBRWxFLE9BQU9NLElBQUFBLGdCQUFPLEVBQUM7UUFDYnpCO1FBQ0FDO1FBQ0FXO1FBQ0FMO1FBQ0FZO1FBQ0FYO1FBQ0FDLE1BQU1DO0lBQ1I7QUFDRiJ9