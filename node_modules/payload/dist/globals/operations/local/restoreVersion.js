"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return restoreVersionLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("../restoreVersion"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersionLocal(payload, options) {
    const { id, depth, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _restoreVersion.default)({
        id,
        depth,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvcmVzdG9yZVZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcyB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgcmVzdG9yZVZlcnNpb24gZnJvbSAnLi4vcmVzdG9yZVZlcnNpb24nXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+ID0ge1xuICBkZXB0aD86IG51bWJlclxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1Zzogc3RyaW5nXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiByZXN0b3JlVmVyc2lvbkxvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4ge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgZGVwdGgsXG4gICAgZmFsbGJhY2tMb2NhbGUgPSBudWxsLFxuICAgIGxvY2FsZSA9IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbiA/IHBheWxvYWQuY29uZmlnLmxvY2FsaXphdGlvbj8uZGVmYXVsdExvY2FsZSA6IG51bGwsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnLFxuICAgIHVzZXIsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gcGF5bG9hZC5nbG9iYWxzLmNvbmZpZy5maW5kKChjb25maWcpID0+IGNvbmZpZy5zbHVnID09PSBnbG9iYWxTbHVnKVxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGUsXG4gICAgaTE4bixcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZCxcbiAgICBwYXlsb2FkQVBJOiAnbG9jYWwnLFxuICAgIHQ6IGkxOG4udCxcbiAgICB0cmFuc2FjdGlvbklEOiBpbmNvbWluZ1JlcT8udHJhbnNhY3Rpb25JRCxcbiAgICB1c2VyLFxuICB9IGFzIFBheWxvYWRSZXF1ZXN0XG4gIHNldFJlcXVlc3RDb250ZXh0KHJlcSlcblxuICBpZiAoIXJlcS5wYXlsb2FkRGF0YUxvYWRlcikgcmVxLnBheWxvYWREYXRhTG9hZGVyID0gZ2V0RGF0YUxvYWRlcihyZXEpXG5cbiAgcmV0dXJuIHJlc3RvcmVWZXJzaW9uKHtcbiAgICBpZCxcbiAgICBkZXB0aCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsicmVzdG9yZVZlcnNpb25Mb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiaWQiLCJkZXB0aCIsImZhbGxiYWNrTG9jYWxlIiwibG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJ1c2VyIiwiZ2xvYmFsQ29uZmlnIiwiZ2xvYmFscyIsImZpbmQiLCJpMThuIiwiaTE4bkluaXQiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJ0IiwidHJhbnNhY3Rpb25JRCIsInNldFJlcXVlc3RDb250ZXh0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwicmVzdG9yZVZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBdUJBOzs7ZUFBOEJBOzs7NEJBbEJBO3dCQUNMO21DQUNTO3NCQUNUO3VFQUNFOzs7Ozs7QUFjWixlQUFlQSxvQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsS0FBSyxFQUNMQyxpQkFBaUIsSUFBSSxFQUNyQkMsU0FBU0wsUUFBUU0sTUFBTSxDQUFDQyxZQUFZLEdBQUdQLFFBQVFNLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNMLEdBQUdkO0lBRUosTUFBTWUsZUFBZWhCLFFBQVFpQixPQUFPLENBQUNYLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDLENBQUNaLFNBQVdBLE9BQU9PLElBQUksS0FBS0M7SUFDN0UsTUFBTUssT0FBT0MsSUFBQUEsY0FBUSxFQUFDcEIsUUFBUU0sTUFBTSxDQUFDYSxJQUFJO0lBRXpDLElBQUksQ0FBQ0gsY0FBYztRQUNqQixNQUFNLElBQUlLLGdCQUFRLENBQUMsQ0FBQyxxQkFBcUIsRUFBRUMsT0FBT1IsWUFBWSxnQkFBZ0IsQ0FBQztJQUNqRjtJQUVBLE1BQU1KLE1BQU07UUFDVk47UUFDQWU7UUFDQWQ7UUFDQUw7UUFDQXVCLFlBQVk7UUFDWkMsR0FBR0wsS0FBS0ssQ0FBQztRQUNUQyxlQUFlZCxhQUFhYztRQUM1QlY7SUFDRjtJQUNBVyxJQUFBQSxvQ0FBaUIsRUFBQ2hCO0lBRWxCLElBQUksQ0FBQ0EsSUFBSWlCLGlCQUFpQixFQUFFakIsSUFBSWlCLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDbEI7SUFFbEUsT0FBT21CLElBQUFBLHVCQUFjLEVBQUM7UUFDcEIzQjtRQUNBQztRQUNBYTtRQUNBUDtRQUNBQztRQUNBRTtJQUNGO0FBQ0YifQ==