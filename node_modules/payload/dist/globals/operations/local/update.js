"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updateLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { data, depth, draft, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _update.default)({
        data,
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvdXBkYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGVlcFBhcnRpYWwgfSBmcm9tICd0cy1lc3NlbnRpYWxzJ1xuXG5pbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi4vdXBkYXRlJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFRTbHVnIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGRhdGE6IERlZXBQYXJ0aWFsPE9taXQ8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUU2x1Z10sICdpZCc+PlxuICBkZXB0aD86IG51bWJlclxuICBkcmFmdD86IGJvb2xlYW5cbiAgZmFsbGJhY2tMb2NhbGU/OiBzdHJpbmdcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxuICBzbHVnOiBUU2x1Z1xuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlTG9jYWw8VFNsdWcgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ11bVFNsdWddPiB7XG4gIGNvbnN0IHtcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIGZhbGxiYWNrTG9jYWxlID0gbnVsbCxcbiAgICBsb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24gPyBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGUgOiBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IHBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoY29uZmlnKSA9PiBjb25maWcuc2x1ZyA9PT0gZ2xvYmFsU2x1ZylcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiB1cGRhdGU8VFNsdWc+KHtcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIGRyYWZ0LFxuICAgIGdsb2JhbENvbmZpZyxcbiAgICBvdmVycmlkZUFjY2VzcyxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnIGFzIHN0cmluZyxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJ1cGRhdGVMb2NhbCIsInBheWxvYWQiLCJvcHRpb25zIiwiZGF0YSIsImRlcHRoIiwiZHJhZnQiLCJmYWxsYmFja0xvY2FsZSIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNsdWciLCJnbG9iYWxTbHVnIiwidXNlciIsImdsb2JhbENvbmZpZyIsImdsb2JhbHMiLCJmaW5kIiwiaTE4biIsImkxOG5Jbml0IiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwidCIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsInVwZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkEwQkE7OztlQUE4QkE7Ozs0QkFuQkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7K0RBQ047Ozs7OztBQWVKLGVBQWVBLFlBQzVCQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxpQkFBaUIsSUFBSSxFQUNyQkMsU0FBU04sUUFBUU8sTUFBTSxDQUFDQyxZQUFZLEdBQUdSLFFBQVFPLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNMLEdBQUdmO0lBRUosTUFBTWdCLGVBQWVqQixRQUFRa0IsT0FBTyxDQUFDWCxNQUFNLENBQUNZLElBQUksQ0FBQyxDQUFDWixTQUFXQSxPQUFPTyxJQUFJLEtBQUtDO0lBQzdFLE1BQU1LLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3JCLFFBQVFPLE1BQU0sQ0FBQ2EsSUFBSTtJQUV6QyxJQUFJLENBQUNILGNBQWM7UUFDakIsTUFBTSxJQUFJSyxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9SLFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNSixNQUFNO1FBQ1ZOO1FBQ0FlO1FBQ0FkO1FBQ0FOO1FBQ0F3QixZQUFZO1FBQ1pDLEdBQUdMLEtBQUtLLENBQUM7UUFDVEMsZUFBZWQsYUFBYWM7UUFDNUJWO0lBQ0Y7SUFDQVcsSUFBQUEsb0NBQWlCLEVBQUNoQjtJQUVsQixJQUFJLENBQUNBLElBQUlpQixpQkFBaUIsRUFBRWpCLElBQUlpQixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2xCO0lBRWxFLE9BQU9tQixJQUFBQSxlQUFNLEVBQVE7UUFDbkI1QjtRQUNBQztRQUNBQztRQUNBYTtRQUNBUDtRQUNBQztRQUNBRTtRQUNBQyxNQUFNQztJQUNSO0FBQ0YifQ==