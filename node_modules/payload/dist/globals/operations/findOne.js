"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _replaceWithDraftIfAvailable = /*#__PURE__*/ _interop_require_default(require("../../versions/drafts/replaceWithDraftIfAvailable"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findOne(args) {
    const { depth, draft: draftEnabled = false, globalConfig, overrideAccess = false, req: { locale, payload }, req, showHiddenFields, slug } = args;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(req);
        // /////////////////////////////////////
        // Retrieve and execute access
        // /////////////////////////////////////
        let accessResult;
        if (!overrideAccess) {
            accessResult = await (0, _executeAccess.default)({
                req
            }, globalConfig.access.read);
        }
        // /////////////////////////////////////
        // Perform database operation
        // /////////////////////////////////////
        let doc = await req.payload.db.findGlobal({
            locale,
            req,
            slug,
            where: overrideAccess ? undefined : accessResult
        });
        if (!doc) {
            doc = {};
        }
        // /////////////////////////////////////
        // Replace document with draft if available
        // /////////////////////////////////////
        if (globalConfig.versions?.drafts && draftEnabled) {
            doc = await (0, _replaceWithDraftIfAvailable.default)({
                accessResult,
                doc,
                entity: globalConfig,
                entityType: 'global',
                overrideAccess,
                req
            });
        }
        // /////////////////////////////////////
        // Execute before global hook
        // /////////////////////////////////////
        await globalConfig.hooks.beforeRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            doc = await hook({
                context: req.context,
                doc,
                global: globalConfig,
                req
            }) || doc;
        }, Promise.resolve());
        // /////////////////////////////////////
        // Execute field-level hooks and access
        // /////////////////////////////////////
        doc = await (0, _afterRead.afterRead)({
            collection: null,
            context: req.context,
            depth,
            doc,
            global: globalConfig,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // Execute after global hook
        // /////////////////////////////////////
        await globalConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            doc = await hook({
                context: req.context,
                doc,
                global: globalConfig,
                req
            }) || doc;
        }, Promise.resolve());
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        return doc;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(req);
        throw error;
    }
}
const _default = findOne;

//# sourceMappingURL=data:application/json;base64,